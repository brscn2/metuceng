

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Fri Apr 19 18:00:01 2024

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og9 
     1                           	processor	18F8722
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    51                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    52  0000                     
    53                           ; Version 2.20
    54                           ; Generated 12/02/2020 GMT
    55                           ; 
    56                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F8722 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     _INTCON	set	4082
    88  0000                     _TMR0L	set	4054
    89  0000                     _TMR0H	set	4055
    90  0000                     _RCON	set	4048
    91  0000                     _T0CONbits	set	4053
    92  0000                     _T0CON	set	4053
    93  0000                     _INTCON2bits	set	4081
    94  0000                     _INTCON2	set	4081
    95  0000                     _PIE2	set	4000
    96  0000                     _LATJ	set	3985
    97  0000                     _TRISJ	set	3994
    98  0000                     _TRISH	set	3993
    99  0000                     _PORTH	set	3975
   100  0000                     _LATH	set	3984
   101  0000                     _TRISG	set	3992
   102  0000                     _PORTG	set	3974
   103  0000                     _LATG	set	3983
   104  0000                     _TRISF	set	3991
   105  0000                     _TRISE	set	3990
   106  0000                     _TRISD	set	3989
   107  0000                     _TRISC	set	3988
   108  0000                     _TRISB	set	3987
   109  0000                     _TRISA	set	3986
   110  0000                     _PORTF	set	3973
   111  0000                     _PORTE	set	3972
   112  0000                     _PORTD	set	3971
   113  0000                     _PORTC	set	3970
   114  0000                     _PORTB	set	3969
   115  0000                     _PORTA	set	3968
   116  0000                     _LATF	set	3982
   117  0000                     _LATE	set	3981
   118  0000                     _LATD	set	3980
   119  0000                     _LATC	set	3979
   120  0000                     _LATB	set	3978
   121  0000                     _LATA	set	3977
   122  0000                     _INTCONbits	set	4082
   123  0000                     _ADCON1	set	4033
   124                           
   125                           ; #config settings
   126                           
   127                           	psect	cinit
   128  0012A8                     __pcinit:
   129                           	callstack 0
   130  0012A8                     start_initialization:
   131                           	callstack 0
   132  0012A8                     __initialization:
   133                           	callstack 0
   134                           
   135                           ; Clear objects allocated to BANK0 (16 bytes)
   136  0012A8  EE00  F060         	lfsr	0,__pbssBANK0
   137  0012AC  0E10               	movlw	16
   138  0012AE                     clear_0:
   139  0012AE  6AEE               	clrf	postinc0,c
   140  0012B0  06E8               	decf	wreg,f,c
   141  0012B2  E1FD               	bnz	clear_0
   142                           
   143                           ; Clear objects allocated to COMRAM (66 bytes)
   144  0012B4  EE00  F001         	lfsr	0,__pbssCOMRAM
   145  0012B8  0E42               	movlw	66
   146  0012BA                     clear_1:
   147  0012BA  6AEE               	clrf	postinc0,c
   148  0012BC  06E8               	decf	wreg,f,c
   149  0012BE  E1FD               	bnz	clear_1
   150  0012C0                     end_of_initialization:
   151                           	callstack 0
   152  0012C0                     __end_of__initialization:
   153                           	callstack 0
   154  0012C0  9055               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   155  0012C2  9255               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   156  0012C4  0100               	movlb	0
   157  0012C6  EFA7  F007         	goto	_main	;jump to C main() function
   158                           
   159                           	psect	bssCOMRAM
   160  000001                     __pbssCOMRAM:
   161                           	callstack 0
   162  000001                     _shape:
   163                           	callstack 0
   164  000001                     	ds	16
   165  000011                     _grid:
   166                           	callstack 0
   167  000011                     	ds	8
   168  000019                     _RotationOrder:
   169                           	callstack 0
   170  000019                     	ds	2
   171  00001B                     _countA3:
   172                           	callstack 0
   173  00001B                     	ds	2
   174  00001D                     _countA2:
   175                           	callstack 0
   176  00001D                     	ds	2
   177  00001F                     _countA1:
   178                           	callstack 0
   179  00001F                     	ds	2
   180  000021                     _stateA0:
   181                           	callstack 0
   182  000021                     	ds	2
   183  000023                     _countA0:
   184                           	callstack 0
   185  000023                     	ds	2
   186  000025                     _digitNo:
   187                           	callstack 0
   188  000025                     	ds	2
   189  000027                     _downMov:
   190                           	callstack 0
   191  000027                     	ds	2
   192  000029                     _upMov:
   193                           	callstack 0
   194  000029                     	ds	2
   195  00002B                     _rightMov:
   196                           	callstack 0
   197  00002B                     	ds	2
   198  00002D                     _leftMov:
   199                           	callstack 0
   200  00002D                     	ds	2
   201  00002F                     _SubmittedBlock:
   202                           	callstack 0
   203  00002F                     	ds	2
   204  000031                     _CurShape:
   205                           	callstack 0
   206  000031                     	ds	2
   207  000033                     _on:
   208                           	callstack 0
   209  000033                     	ds	2
   210  000035                     _blink:
   211                           	callstack 0
   212  000035                     	ds	2
   213  000037                     _bInterruptFired:
   214                           	callstack 0
   215  000037                     	ds	2
   216  000039                     _debounceTimer:
   217                           	callstack 0
   218  000039                     	ds	2
   219  00003B                     _rotate:
   220                           	callstack 0
   221  00003B                     	ds	2
   222  00003D                     _submit:
   223                           	callstack 0
   224  00003D                     	ds	2
   225  00003F                     _count:
   226                           	callstack 0
   227  00003F                     	ds	2
   228  000041                     _curB:
   229                           	callstack 0
   230  000041                     	ds	2
   231                           
   232                           	psect	bssBANK0
   233  000060                     __pbssBANK0:
   234                           	callstack 0
   235  000060                     _stateA3:
   236                           	callstack 0
   237  000060                     	ds	2
   238  000062                     _stateA2:
   239                           	callstack 0
   240  000062                     	ds	2
   241  000064                     _stateA1:
   242                           	callstack 0
   243  000064                     	ds	2
   244  000066                     _prevA3:
   245                           	callstack 0
   246  000066                     	ds	2
   247  000068                     _prevA2:
   248                           	callstack 0
   249  000068                     	ds	2
   250  00006A                     _prevA1:
   251                           	callstack 0
   252  00006A                     	ds	2
   253  00006C                     _prevA0:
   254                           	callstack 0
   255  00006C                     	ds	2
   256  00006E                     _prevB:
   257                           	callstack 0
   258  00006E                     	ds	2
   259                           
   260                           	psect	cstackBANK0
   261  000070                     __pcstackBANK0:
   262                           	callstack 0
   263  000070                     Find@res:
   264                           	callstack 0
   265  000070                     UpdateLeft@leftdigit:
   266                           	callstack 0
   267                           
   268                           ; 2 bytes @ 0x0
   269  000070                     	ds	2
   270  000072                     Find@first:
   271                           	callstack 0
   272                           
   273                           ; 2 bytes @ 0x2
   274  000072                     	ds	2
   275  000074                     Find@second:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x4
   279  000074                     	ds	2
   280  000076                     Find@first_290:
   281                           	callstack 0
   282                           
   283                           ; 2 bytes @ 0x6
   284  000076                     	ds	2
   285  000078                     Find@second_291:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0x8
   289  000078                     	ds	2
   290                           
   291                           	psect	cstackCOMRAM
   292  000043                     __pcstackCOMRAM:
   293                           	callstack 0
   294  000043                     ?i2___awdiv:
   295                           	callstack 0
   296  000043                     ?i2___awmod:
   297                           	callstack 0
   298  000043                     i2___awdiv@dividend:
   299                           	callstack 0
   300  000043                     i2___awmod@dividend:
   301                           	callstack 0
   302                           
   303                           ; 2 bytes @ 0x0
   304  000043                     	ds	2
   305  000045                     i2___awdiv@divisor:
   306                           	callstack 0
   307  000045                     i2___awmod@divisor:
   308                           	callstack 0
   309                           
   310                           ; 2 bytes @ 0x2
   311  000045                     	ds	2
   312  000047                     i2___awdiv@counter:
   313                           	callstack 0
   314  000047                     i2___awmod@counter:
   315                           	callstack 0
   316                           
   317                           ; 1 bytes @ 0x4
   318  000047                     	ds	1
   319  000048                     i2___awdiv@sign:
   320                           	callstack 0
   321  000048                     i2___awmod@sign:
   322                           	callstack 0
   323                           
   324                           ; 1 bytes @ 0x5
   325  000048                     	ds	1
   326  000049                     i2UpdateRight@rdigit:
   327                           	callstack 0
   328  000049                     i2___awdiv@quotient:
   329                           	callstack 0
   330                           
   331                           ; 2 bytes @ 0x6
   332  000049                     	ds	2
   333  00004B                     i2UpdateLeft@leftdigit:
   334                           	callstack 0
   335                           
   336                           ; 2 bytes @ 0x8
   337  00004B                     	ds	2
   338  00004D                     ??_Rotate:
   339  00004D                     ??_MovA0:
   340  00004D                     ??_MovA1:
   341  00004D                     ??_MovA2:
   342  00004D                     ??_MovA3:
   343  00004D                     ?_Find:
   344                           	callstack 0
   345  00004D                     ?___awdiv:
   346                           	callstack 0
   347  00004D                     ?___awmod:
   348                           	callstack 0
   349  00004D                     WaitForOneSec@i:
   350                           	callstack 0
   351  00004D                     Find@col:
   352                           	callstack 0
   353  00004D                     ___awdiv@dividend:
   354                           	callstack 0
   355  00004D                     ___awmod@dividend:
   356                           	callstack 0
   357                           
   358                           ; 2 bytes @ 0xA
   359  00004D                     	ds	2
   360  00004F                     ??_Find:
   361  00004F                     WaitForOneSec@j:
   362                           	callstack 0
   363  00004F                     ___awdiv@divisor:
   364                           	callstack 0
   365  00004F                     ___awmod@divisor:
   366                           	callstack 0
   367                           
   368                           ; 2 bytes @ 0xC
   369  00004F                     	ds	2
   370  000051                     ___awdiv@counter:
   371                           	callstack 0
   372  000051                     ___awmod@counter:
   373                           	callstack 0
   374  000051                     WaitForOneSec@k:
   375                           	callstack 0
   376                           
   377                           ; 2 bytes @ 0xE
   378  000051                     	ds	1
   379  000052                     ?_Is_Collide:
   380                           	callstack 0
   381  000052                     ___awdiv@sign:
   382                           	callstack 0
   383  000052                     ___awmod@sign:
   384                           	callstack 0
   385                           
   386                           ; 1 bytes @ 0xF
   387  000052                     	ds	1
   388  000053                     UpdateRight@rdigit:
   389                           	callstack 0
   390  000053                     ___awdiv@quotient:
   391                           	callstack 0
   392                           
   393                           ; 2 bytes @ 0x10
   394  000053                     	ds	1
   395  000054                     
   396                           ; 1 bytes @ 0x11
   397  000054                     	ds	1
   398  000055                     
   399                           ; 1 bytes @ 0x12
   400 ;;
   401 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   402 ;;
   403 ;; *************** function _main *****************
   404 ;; Defined at:
   405 ;;		line 717 in file "main.c"
   406 ;; Parameters:    Size  Location     Type
   407 ;;		None
   408 ;; Auto vars:     Size  Location     Type
   409 ;;		None
   410 ;; Return value:  Size  Location     Type
   411 ;;                  1    wreg      void 
   412 ;; Registers used:
   413 ;;		wreg, status,2, status,0, cstack
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   423 ;;Total ram usage:        0 bytes
   424 ;; Hardware stack levels required when called:    7
   425 ;; This function calls:
   426 ;;		_Arrange_Interrupts
   427 ;;		_Blink
   428 ;;		_CreateNewShape
   429 ;;		_Fall_Each_Two_Sec
   430 ;;		_Init
   431 ;;		_MovA0
   432 ;;		_MovA1
   433 ;;		_MovA2
   434 ;;		_MovA3
   435 ;;		_MoveA0
   436 ;;		_MoveA1
   437 ;;		_MoveA2
   438 ;;		_MoveA3
   439 ;;		_Rotate
   440 ;;		_Submit
   441 ;;		_UpdateSS
   442 ;;		_WaitForOneSec
   443 ;;		_setInterruptFlag
   444 ;; This function is called by:
   445 ;;		Startup code after reset
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           	psect	text0
   450  000F4E                     __ptext0:
   451                           	callstack 0
   452  000F4E                     _main:
   453                           	callstack 24
   454                           
   455                           ;main.c: 719:     Init();
   456                           
   457                           ;incstack = 0
   458  000F4E  EC5A  F001         	call	_Init	;wreg free
   459                           
   460                           ;main.c: 720:     Arrange_Interrupts();
   461  000F52  EC11  F009         	call	_Arrange_Interrupts	;wreg free
   462                           
   463                           ; BSR set to: 0
   464                           ;main.c: 721:     WaitForOneSec();
   465  000F56  EC60  F008         	call	_WaitForOneSec	;wreg free
   466                           
   467                           ; BSR set to: 0
   468                           ;main.c: 724:     CreateNewShape();
   469  000F5A  EC3A  F005         	call	_CreateNewShape	;wreg free
   470                           
   471                           ;main.c: 726:     INTCONbits.GIE = 1;
   472  000F5E  8EF2               	bsf	242,7,c	;volatile
   473                           
   474                           ;main.c: 727:     while(SubmittedBlock < 32){
   475  000F60  D01C               	goto	l2939
   476  000F62                     l2937:
   477                           
   478                           ;main.c: 728:         Rotate();
   479  000F62  ECED  F001         	call	_Rotate	;wreg free
   480                           
   481                           ;main.c: 729:         Fall_Each_Two_Sec();
   482  000F66  EC65  F009         	call	_Fall_Each_Two_Sec	;wreg free
   483                           
   484                           ;main.c: 731:         Submit();
   485  000F6A  ECC7  F000         	call	_Submit	;wreg free
   486                           
   487                           ;main.c: 732:         MovA0();
   488  000F6E  EC0B  F004         	call	_MovA0	;wreg free
   489                           
   490                           ;main.c: 733:         MoveA0();
   491  000F72  EC72  F007         	call	_MoveA0	;wreg free
   492                           
   493                           ;main.c: 734:         MovA1();
   494  000F76  EC3B  F003         	call	_MovA1	;wreg free
   495                           
   496                           ;main.c: 735:         MoveA1();
   497  000F7A  EC06  F008         	call	_MoveA1	;wreg free
   498                           
   499                           ;main.c: 736:         MovA2();
   500  000F7E  ECD0  F002         	call	_MovA2	;wreg free
   501                           
   502                           ;main.c: 737:         MoveA2();
   503  000F82  EC3D  F007         	call	_MoveA2	;wreg free
   504                           
   505                           ;main.c: 738:         MovA3();
   506  000F86  EC65  F002         	call	_MovA3	;wreg free
   507                           
   508                           ;main.c: 739:         MoveA3();
   509  000F8A  ECD9  F007         	call	_MoveA3	;wreg free
   510                           
   511                           ;main.c: 740:         UpdateSS();
   512  000F8E  EC71  F009         	call	_UpdateSS	;wreg free
   513                           
   514                           ;main.c: 741:         setInterruptFlag();
   515  000F92  ECB3  F008         	call	_setInterruptFlag	;wreg free
   516                           
   517                           ;main.c: 742:         Blink();
   518  000F96  EC70  F004         	call	_Blink	;wreg free
   519  000F9A                     l2939:
   520                           
   521                           ;main.c: 727:     while(SubmittedBlock < 32){
   522  000F9A  BE30               	btfsc	(_SubmittedBlock+1)^0,7,c
   523  000F9C  D7E2               	goto	l2937
   524  000F9E  5030               	movf	(_SubmittedBlock+1)^0,w,c
   525  000FA0  E106               	bnz	u3150
   526  000FA2  0E20               	movlw	32
   527  000FA4  5C2F               	subwf	_SubmittedBlock^0,w,c
   528  000FA6  B0D8               	btfsc	status,0,c
   529  000FA8  EF07  F000         	goto	start
   530  000FAC  D7DA               	goto	l2937
   531  000FAE                     u3150:
   532  000FAE  EF07  F000         	goto	start
   533  000FB2                     __end_of_main:
   534                           	callstack 0
   535                           
   536 ;; *************** function _setInterruptFlag *****************
   537 ;; Defined at:
   538 ;;		line 655 in file "main.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;		None
   541 ;; Auto vars:     Size  Location     Type
   542 ;;		None
   543 ;; Return value:  Size  Location     Type
   544 ;;                  1    wreg      void 
   545 ;; Registers used:
   546 ;;		wreg, status,2, status,0
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   556 ;;Total ram usage:        0 bytes
   557 ;; Hardware stack levels used:    1
   558 ;; Hardware stack levels required when called:    4
   559 ;; This function calls:
   560 ;;		Nothing
   561 ;; This function is called by:
   562 ;;		_main
   563 ;; This function uses a non-reentrant model
   564 ;;
   565                           
   566                           	psect	text1
   567  001166                     __ptext1:
   568                           	callstack 0
   569  001166                     _setInterruptFlag:
   570                           	callstack 26
   571                           
   572                           ;main.c: 656:     if (bInterruptFired) {
   573                           
   574                           ;incstack = 0
   575  001166  5037               	movf	_bInterruptFired^0,w,c	;volatile
   576  001168  1038               	iorwf	(_bInterruptFired+1)^0,w,c	;volatile
   577  00116A  B4D8               	btfsc	status,2,c
   578  00116C  0012               	return	
   579                           
   580                           ;main.c: 657:         debounceTimer--;
   581  00116E  0639               	decf	_debounceTimer^0,f,c	;volatile
   582  001170  A0D8               	btfss	status,0,c
   583  001172  063A               	decf	(_debounceTimer+1)^0,f,c	;volatile
   584                           
   585                           ;main.c: 658:         if(debounceTimer) return;
   586  001174  5039               	movf	_debounceTimer^0,w,c	;volatile
   587  001176  103A               	iorwf	(_debounceTimer+1)^0,w,c	;volatile
   588  001178  A4D8               	btfss	status,2,c
   589  00117A  0012               	return	
   590                           
   591                           ;main.c: 663:          curB = PORTB;
   592  00117C  CF81 F041          	movff	3969,_curB	;volatile
   593  001180  6A42               	clrf	(_curB+1)^0,c
   594                           
   595                           ;main.c: 665:         if((curB & 0x20) ){
   596  001182  AA41               	btfss	_curB^0,5,c
   597  001184  D004               	goto	l2527
   598                           
   599                           ;main.c: 666:             rotate = 1;
   600  001186  0E00               	movlw	0
   601  001188  6E3C               	movwf	(_rotate+1)^0,c	;volatile
   602  00118A  0E01               	movlw	1
   603  00118C  6E3B               	movwf	_rotate^0,c	;volatile
   604  00118E                     l2527:
   605                           
   606                           ;main.c: 668:         if((curB & 0x40)){
   607  00118E  AC41               	btfss	_curB^0,6,c
   608  001190  D004               	goto	l2531
   609                           
   610                           ;main.c: 669:             submit = 1;
   611  001192  0E00               	movlw	0
   612  001194  6E3E               	movwf	(_submit+1)^0,c	;volatile
   613  001196  0E01               	movlw	1
   614  001198  6E3D               	movwf	_submit^0,c	;volatile
   615  00119A                     l2531:
   616                           
   617                           ;main.c: 672:         prevB = curB;
   618  00119A  C041  F06E         	movff	_curB,_prevB
   619  00119E  C042  F06F         	movff	_curB+1,_prevB+1
   620                           
   621                           ;main.c: 673:         bInterruptFired = 0;
   622  0011A2  0E00               	movlw	0
   623  0011A4  6E38               	movwf	(_bInterruptFired+1)^0,c	;volatile
   624  0011A6  0E00               	movlw	0
   625  0011A8  6E37               	movwf	_bInterruptFired^0,c	;volatile
   626  0011AA  0012               	return		;funcret
   627  0011AC                     __end_of_setInterruptFlag:
   628                           	callstack 0
   629                           
   630 ;; *************** function _WaitForOneSec *****************
   631 ;; Defined at:
   632 ;;		line 108 in file "main.c"
   633 ;; Parameters:    Size  Location     Type
   634 ;;		None
   635 ;; Auto vars:     Size  Location     Type
   636 ;;  k               2   14[COMRAM] int 
   637 ;;  j               2   12[COMRAM] int 
   638 ;;  i               2   10[COMRAM] int 
   639 ;; Return value:  Size  Location     Type
   640 ;;                  1    wreg      void 
   641 ;; Registers used:
   642 ;;		wreg, status,2, status,0
   643 ;; Tracked objects:
   644 ;;		On entry : 3F/0
   645 ;;		On exit  : 3F/0
   646 ;;		Unchanged: 3F/0
   647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   649 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   651 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   652 ;;Total ram usage:        6 bytes
   653 ;; Hardware stack levels used:    1
   654 ;; Hardware stack levels required when called:    4
   655 ;; This function calls:
   656 ;;		Nothing
   657 ;; This function is called by:
   658 ;;		_main
   659 ;; This function uses a non-reentrant model
   660 ;;
   661                           
   662                           	psect	text2
   663  0010C0                     __ptext2:
   664                           	callstack 0
   665  0010C0                     _WaitForOneSec:
   666                           	callstack 26
   667                           
   668                           ; BSR set to: 0
   669                           ;main.c: 109:     for(int i = 0; i < 0xFF; i++){
   670                           
   671                           ;incstack = 0
   672  0010C0  0E00               	movlw	0
   673  0010C2  6E4E               	movwf	(WaitForOneSec@i+1)^0,c
   674  0010C4  0E00               	movlw	0
   675  0010C6  6E4D               	movwf	WaitForOneSec@i^0,c
   676  0010C8                     l1513:
   677                           
   678                           ; BSR set to: 0
   679                           ;main.c: 110:         for(int j = 0; j < 0xA5 ; j++){
   680  0010C8  0E00               	movlw	0
   681  0010CA  6E50               	movwf	(WaitForOneSec@j+1)^0,c
   682  0010CC  0E00               	movlw	0
   683  0010CE  6E4F               	movwf	WaitForOneSec@j^0,c
   684  0010D0                     l1519:
   685                           
   686                           ; BSR set to: 0
   687                           ;main.c: 111:             for(int k = 0; k < 0x10 ; k++);
   688  0010D0  0E00               	movlw	0
   689  0010D2  6E52               	movwf	(WaitForOneSec@k+1)^0,c
   690  0010D4  0E00               	movlw	0
   691  0010D6  6E51               	movwf	WaitForOneSec@k^0,c
   692  0010D8                     l1525:
   693                           
   694                           ; BSR set to: 0
   695  0010D8  4A51               	infsnz	WaitForOneSec@k^0,f,c
   696  0010DA  2A52               	incf	(WaitForOneSec@k+1)^0,f,c
   697                           
   698                           ; BSR set to: 0
   699  0010DC  BE52               	btfsc	(WaitForOneSec@k+1)^0,7,c
   700  0010DE  D7FC               	goto	l1525
   701  0010E0  5052               	movf	(WaitForOneSec@k+1)^0,w,c
   702  0010E2  E104               	bnz	u830
   703  0010E4  0E10               	movlw	16
   704  0010E6  5C51               	subwf	WaitForOneSec@k^0,w,c
   705  0010E8  A0D8               	btfss	status,0,c
   706  0010EA  D7F6               	goto	l1525
   707  0010EC                     u830:
   708                           
   709                           ; BSR set to: 0
   710                           ;main.c: 112:         }
   711  0010EC  4A4F               	infsnz	WaitForOneSec@j^0,f,c
   712  0010EE  2A50               	incf	(WaitForOneSec@j+1)^0,f,c
   713                           
   714                           ; BSR set to: 0
   715  0010F0  BE50               	btfsc	(WaitForOneSec@j+1)^0,7,c
   716  0010F2  D7EE               	goto	l1519
   717  0010F4  5050               	movf	(WaitForOneSec@j+1)^0,w,c
   718  0010F6  E104               	bnz	u840
   719  0010F8  0EA5               	movlw	165
   720  0010FA  5C4F               	subwf	WaitForOneSec@j^0,w,c
   721  0010FC  A0D8               	btfss	status,0,c
   722  0010FE  D7E8               	goto	l1519
   723  001100                     u840:
   724                           
   725                           ; BSR set to: 0
   726                           ;main.c: 113:     }
   727  001100  4A4D               	infsnz	WaitForOneSec@i^0,f,c
   728  001102  2A4E               	incf	(WaitForOneSec@i+1)^0,f,c
   729                           
   730                           ; BSR set to: 0
   731  001104  BE4E               	btfsc	(WaitForOneSec@i+1)^0,7,c
   732  001106  D7E0               	goto	l1513
   733  001108  504E               	movf	(WaitForOneSec@i+1)^0,w,c
   734  00110A  E104               	bnz	u850
   735  00110C  284D               	incf	WaitForOneSec@i^0,w,c
   736  00110E  B0D8               	btfsc	status,0,c
   737  001110  0012               	return	
   738  001112  D7DA               	goto	l1513
   739  001114                     u850:
   740                           
   741                           ; BSR set to: 0
   742  001114  0012               	return		;funcret
   743  001116                     __end_of_WaitForOneSec:
   744                           	callstack 0
   745                           
   746 ;; *************** function _UpdateSS *****************
   747 ;; Defined at:
   748 ;;		line 467 in file "main.c"
   749 ;; Parameters:    Size  Location     Type
   750 ;;		None
   751 ;; Auto vars:     Size  Location     Type
   752 ;;		None
   753 ;; Return value:  Size  Location     Type
   754 ;;                  1    wreg      void 
   755 ;; Registers used:
   756 ;;		wreg, status,2, status,0, cstack
   757 ;; Tracked objects:
   758 ;;		On entry : 0/0
   759 ;;		On exit  : 0/0
   760 ;;		Unchanged: 0/0
   761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   766 ;;Total ram usage:        0 bytes
   767 ;; Hardware stack levels used:    1
   768 ;; Hardware stack levels required when called:    6
   769 ;; This function calls:
   770 ;;		_MakeThirdZero
   771 ;;		_UpdateLeft
   772 ;;		_UpdateRight
   773 ;; This function is called by:
   774 ;;		_main
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           	psect	text3
   779  0012E2                     __ptext3:
   780                           	callstack 0
   781  0012E2                     _UpdateSS:
   782                           	callstack 24
   783                           
   784                           ;main.c: 471:             UpdateRight();
   785                           
   786                           ; BSR set to: 0
   787                           ;incstack = 0
   788  0012E2  ECA6  F003         	call	_UpdateRight	;wreg free
   789                           
   790                           ;main.c: 474:             UpdateLeft();
   791  0012E6  EC56  F006         	call	_UpdateLeft	;wreg free
   792                           
   793                           ;main.c: 477:             MakeThirdZero();
   794  0012EA  EC2A  F009         	call	_MakeThirdZero	;wreg free
   795  0012EE  0012               	return		;funcret
   796  0012F0                     __end_of_UpdateSS:
   797                           	callstack 0
   798                           
   799 ;; *************** function _UpdateRight *****************
   800 ;; Defined at:
   801 ;;		line 411 in file "main.c"
   802 ;; Parameters:    Size  Location     Type
   803 ;;		None
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  rdigit          2   16[COMRAM] int 
   806 ;; Return value:  Size  Location     Type
   807 ;;                  1    wreg      void 
   808 ;; Registers used:
   809 ;;		wreg, status,2, status,0, cstack
   810 ;; Tracked objects:
   811 ;;		On entry : 0/0
   812 ;;		On exit  : 0/0
   813 ;;		Unchanged: 0/0
   814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   816 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   819 ;;Total ram usage:        2 bytes
   820 ;; Hardware stack levels used:    1
   821 ;; Hardware stack levels required when called:    5
   822 ;; This function calls:
   823 ;;		___awmod
   824 ;; This function is called by:
   825 ;;		_UpdateSS
   826 ;; This function uses a non-reentrant model
   827 ;;
   828                           
   829                           	psect	text4
   830  00074C                     __ptext4:
   831                           	callstack 0
   832  00074C                     _UpdateRight:
   833                           	callstack 24
   834                           
   835                           ;main.c: 413:     int rdigit = SubmittedBlock % 10;
   836                           
   837                           ;incstack = 0
   838  00074C  C02F  F04D         	movff	_SubmittedBlock,___awmod@dividend
   839  000750  C030  F04E         	movff	_SubmittedBlock+1,___awmod@dividend+1
   840  000754  0E00               	movlw	0
   841  000756  6E50               	movwf	(___awmod@divisor+1)^0,c
   842  000758  0E0A               	movlw	10
   843  00075A  6E4F               	movwf	___awmod@divisor^0,c
   844  00075C  ECCD  F006         	call	___awmod	;wreg free
   845  000760  C04D  F053         	movff	?___awmod,UpdateRight@rdigit
   846  000764  C04E  F054         	movff	?___awmod+1,UpdateRight@rdigit+1
   847                           
   848                           ;main.c: 415:     if(rdigit == 0){
   849  000768  5053               	movf	UpdateRight@rdigit^0,w,c
   850  00076A  1054               	iorwf	(UpdateRight@rdigit+1)^0,w,c
   851  00076C  A4D8               	btfss	status,2,c
   852  00076E  D002               	goto	l2831
   853                           
   854                           ;main.c: 416:         LATJ = 0x3F;
   855  000770  0E3F               	movlw	63
   856  000772  D03D               	goto	L9
   857  000774                     l2831:
   858  000774  0453               	decf	UpdateRight@rdigit^0,w,c
   859  000776  1054               	iorwf	(UpdateRight@rdigit+1)^0,w,c
   860  000778  A4D8               	btfss	status,2,c
   861  00077A  D002               	goto	l2835
   862                           
   863                           ;main.c: 419:         LATJ = 0x06;
   864  00077C  0E06               	movlw	6
   865  00077E  D037               	goto	L9
   866  000780                     l2835:
   867  000780  0E02               	movlw	2
   868  000782  1853               	xorwf	UpdateRight@rdigit^0,w,c
   869  000784  1054               	iorwf	(UpdateRight@rdigit+1)^0,w,c
   870  000786  A4D8               	btfss	status,2,c
   871  000788  D002               	goto	l2839
   872                           
   873                           ;main.c: 422:         LATJ = 0x5B;
   874  00078A  0E5B               	movlw	91
   875  00078C  D030               	goto	L9
   876  00078E                     l2839:
   877  00078E  0E03               	movlw	3
   878  000790  1853               	xorwf	UpdateRight@rdigit^0,w,c
   879  000792  1054               	iorwf	(UpdateRight@rdigit+1)^0,w,c
   880  000794  A4D8               	btfss	status,2,c
   881  000796  D002               	goto	l2843
   882                           
   883                           ;main.c: 425:         LATJ = 0x4F;
   884  000798  0E4F               	movlw	79
   885  00079A  D029               	goto	L9
   886  00079C                     l2843:
   887  00079C  0E04               	movlw	4
   888  00079E  1853               	xorwf	UpdateRight@rdigit^0,w,c
   889  0007A0  1054               	iorwf	(UpdateRight@rdigit+1)^0,w,c
   890  0007A2  A4D8               	btfss	status,2,c
   891  0007A4  D002               	goto	l2847
   892                           
   893                           ;main.c: 428:         LATJ = 0x66;
   894  0007A6  0E66               	movlw	102
   895  0007A8  D022               	goto	L9
   896  0007AA                     l2847:
   897  0007AA  0E05               	movlw	5
   898  0007AC  1853               	xorwf	UpdateRight@rdigit^0,w,c
   899  0007AE  1054               	iorwf	(UpdateRight@rdigit+1)^0,w,c
   900  0007B0  A4D8               	btfss	status,2,c
   901  0007B2  D002               	goto	l2851
   902                           
   903                           ;main.c: 431:         LATJ = 0x6D;
   904  0007B4  0E6D               	movlw	109
   905  0007B6  D01B               	goto	L9
   906  0007B8                     l2851:
   907  0007B8  0E06               	movlw	6
   908  0007BA  1853               	xorwf	UpdateRight@rdigit^0,w,c
   909  0007BC  1054               	iorwf	(UpdateRight@rdigit+1)^0,w,c
   910  0007BE  A4D8               	btfss	status,2,c
   911  0007C0  D002               	goto	l2855
   912                           
   913                           ;main.c: 434:         LATJ = 0x7D;
   914  0007C2  0E7D               	movlw	125
   915  0007C4  D014               	goto	L9
   916  0007C6                     l2855:
   917  0007C6  0E07               	movlw	7
   918  0007C8  1853               	xorwf	UpdateRight@rdigit^0,w,c
   919  0007CA  1054               	iorwf	(UpdateRight@rdigit+1)^0,w,c
   920  0007CC  A4D8               	btfss	status,2,c
   921  0007CE  D002               	goto	l2859
   922                           
   923                           ;main.c: 437:         LATJ = 0x07;
   924  0007D0  0E07               	movlw	7
   925  0007D2  D00D               	goto	L9
   926  0007D4                     l2859:
   927  0007D4  0E08               	movlw	8
   928  0007D6  1853               	xorwf	UpdateRight@rdigit^0,w,c
   929  0007D8  1054               	iorwf	(UpdateRight@rdigit+1)^0,w,c
   930  0007DA  A4D8               	btfss	status,2,c
   931  0007DC  D002               	goto	l2863
   932                           
   933                           ;main.c: 440:         LATJ = 0x7F;
   934  0007DE  0E7F               	movlw	127
   935  0007E0  D006               	goto	L9
   936  0007E2                     l2863:
   937  0007E2  0E09               	movlw	9
   938  0007E4  1853               	xorwf	UpdateRight@rdigit^0,w,c
   939  0007E6  1054               	iorwf	(UpdateRight@rdigit+1)^0,w,c
   940  0007E8  A4D8               	btfss	status,2,c
   941  0007EA  D002               	goto	l300
   942                           
   943                           ;main.c: 443:         LATJ = 0x6F;
   944  0007EC  0E6F               	movlw	111
   945  0007EE                     L9:
   946  0007EE  6E91               	movwf	145,c	;volatile
   947  0007F0                     l300:
   948                           
   949                           ;main.c: 445:      LATH = 0x08;
   950  0007F0  0E08               	movlw	8
   951  0007F2  6E90               	movwf	144,c	;volatile
   952                           
   953                           ;main.c: 447:     digitNo = (digitNo + 1) % 3;
   954  0007F4  0E01               	movlw	1
   955  0007F6  2425               	addwf	_digitNo^0,w,c
   956  0007F8  6E4D               	movwf	___awmod@dividend^0,c
   957  0007FA  0E00               	movlw	0
   958  0007FC  2026               	addwfc	(_digitNo+1)^0,w,c
   959  0007FE  6E4E               	movwf	(___awmod@dividend+1)^0,c
   960  000800  0E00               	movlw	0
   961  000802  6E50               	movwf	(___awmod@divisor+1)^0,c
   962  000804  0E03               	movlw	3
   963  000806  6E4F               	movwf	___awmod@divisor^0,c
   964  000808  ECCD  F006         	call	___awmod	;wreg free
   965  00080C  C04D  F025         	movff	?___awmod,_digitNo
   966  000810  C04E  F026         	movff	?___awmod+1,_digitNo+1
   967  000814  0012               	return		;funcret
   968  000816                     __end_of_UpdateRight:
   969                           	callstack 0
   970                           
   971 ;; *************** function _UpdateLeft *****************
   972 ;; Defined at:
   973 ;;		line 392 in file "main.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;		None
   976 ;; Auto vars:     Size  Location     Type
   977 ;;  leftdigit       2    0[BANK0 ] int 
   978 ;; Return value:  Size  Location     Type
   979 ;;                  1    wreg      void 
   980 ;; Registers used:
   981 ;;		wreg, status,2, status,0, cstack
   982 ;; Tracked objects:
   983 ;;		On entry : 0/0
   984 ;;		On exit  : 0/0
   985 ;;		Unchanged: 0/0
   986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   991 ;;Total ram usage:        2 bytes
   992 ;; Hardware stack levels used:    1
   993 ;; Hardware stack levels required when called:    5
   994 ;; This function calls:
   995 ;;		___awdiv
   996 ;;		___awmod
   997 ;; This function is called by:
   998 ;;		_UpdateSS
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text5
  1003  000CAC                     __ptext5:
  1004                           	callstack 0
  1005  000CAC                     _UpdateLeft:
  1006                           	callstack 24
  1007                           
  1008                           ;main.c: 394:     int leftdigit = SubmittedBlock / 10;
  1009                           
  1010                           ;incstack = 0
  1011  000CAC  C02F  F04D         	movff	_SubmittedBlock,___awdiv@dividend
  1012  000CB0  C030  F04E         	movff	_SubmittedBlock+1,___awdiv@dividend+1
  1013  000CB4  0E00               	movlw	0
  1014  000CB6  6E50               	movwf	(___awdiv@divisor+1)^0,c
  1015  000CB8  0E0A               	movlw	10
  1016  000CBA  6E4F               	movwf	___awdiv@divisor^0,c
  1017  000CBC  EC90  F005         	call	___awdiv	;wreg free
  1018  000CC0  C04D  F070         	movff	?___awdiv,UpdateLeft@leftdigit
  1019  000CC4  C04E  F071         	movff	?___awdiv+1,UpdateLeft@leftdigit+1
  1020                           
  1021                           ;main.c: 395:     if(leftdigit == 0){
  1022  000CC8  0100               	movlb	0	; () banked
  1023  000CCA  5170               	movf	UpdateLeft@leftdigit& (0+255),w,b
  1024  000CCC  1171               	iorwf	(UpdateLeft@leftdigit+1)& (0+255),w,b
  1025  000CCE  A4D8               	btfss	status,2,c
  1026  000CD0  D002               	goto	l2811
  1027                           
  1028                           ; BSR set to: 0
  1029                           ;main.c: 396:         LATJ = 0x3F;
  1030  000CD2  0E3F               	movlw	63
  1031  000CD4  D013               	goto	L10
  1032  000CD6                     l2811:
  1033                           
  1034                           ; BSR set to: 0
  1035  000CD6  0570               	decf	UpdateLeft@leftdigit& (0+255),w,b
  1036  000CD8  1171               	iorwf	(UpdateLeft@leftdigit+1)& (0+255),w,b
  1037  000CDA  A4D8               	btfss	status,2,c
  1038  000CDC  D002               	goto	l2815
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;main.c: 399:         LATJ = 0x06;
  1042  000CDE  0E06               	movlw	6
  1043  000CE0  D00D               	goto	L10
  1044  000CE2                     l2815:
  1045                           
  1046                           ; BSR set to: 0
  1047  000CE2  0E02               	movlw	2
  1048  000CE4  1970               	xorwf	UpdateLeft@leftdigit& (0+255),w,b
  1049  000CE6  1171               	iorwf	(UpdateLeft@leftdigit+1)& (0+255),w,b
  1050  000CE8  A4D8               	btfss	status,2,c
  1051  000CEA  D002               	goto	l2819
  1052                           
  1053                           ; BSR set to: 0
  1054                           ;main.c: 402:         LATJ = 0x5B;
  1055  000CEC  0E5B               	movlw	91
  1056  000CEE  D006               	goto	L10
  1057  000CF0                     l2819:
  1058                           
  1059                           ; BSR set to: 0
  1060  000CF0  0E03               	movlw	3
  1061  000CF2  1970               	xorwf	UpdateLeft@leftdigit& (0+255),w,b
  1062  000CF4  1171               	iorwf	(UpdateLeft@leftdigit+1)& (0+255),w,b
  1063  000CF6  A4D8               	btfss	status,2,c
  1064  000CF8  D002               	goto	l278
  1065                           
  1066                           ; BSR set to: 0
  1067                           ;main.c: 405:         LATJ = 0x4F;
  1068  000CFA  0E4F               	movlw	79
  1069  000CFC                     L10:
  1070  000CFC  6E91               	movwf	145,c	;volatile
  1071  000CFE                     l278:
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;main.c: 407:     LATH = 0x04;
  1075  000CFE  0E04               	movlw	4
  1076  000D00  6E90               	movwf	144,c	;volatile
  1077                           
  1078                           ; BSR set to: 0
  1079                           ;main.c: 408:      digitNo = (digitNo + 1) % 3;
  1080  000D02  0E01               	movlw	1
  1081  000D04  2425               	addwf	_digitNo^0,w,c
  1082  000D06  6E4D               	movwf	___awmod@dividend^0,c
  1083  000D08  0E00               	movlw	0
  1084  000D0A  2026               	addwfc	(_digitNo+1)^0,w,c
  1085  000D0C  6E4E               	movwf	(___awmod@dividend+1)^0,c
  1086  000D0E  0E00               	movlw	0
  1087  000D10  6E50               	movwf	(___awmod@divisor+1)^0,c
  1088  000D12  0E03               	movlw	3
  1089  000D14  6E4F               	movwf	___awmod@divisor^0,c
  1090  000D16  ECCD  F006         	call	___awmod	;wreg free
  1091  000D1A  C04D  F025         	movff	?___awmod,_digitNo
  1092  000D1E  C04E  F026         	movff	?___awmod+1,_digitNo+1
  1093  000D22  0012               	return		;funcret
  1094  000D24                     __end_of_UpdateLeft:
  1095                           	callstack 0
  1096                           
  1097 ;; *************** function ___awdiv *****************
  1098 ;; Defined at:
  1099 ;;		line 7 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/awdiv.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  dividend        2   10[COMRAM] int 
  1102 ;;  divisor         2   12[COMRAM] int 
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  quotient        2   16[COMRAM] int 
  1105 ;;  sign            1   15[COMRAM] unsigned char 
  1106 ;;  counter         1   14[COMRAM] unsigned char 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  2   10[COMRAM] int 
  1109 ;; Registers used:
  1110 ;;		wreg, status,2, status,0
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1116 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1117 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1119 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1120 ;;Total ram usage:        8 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    4
  1123 ;; This function calls:
  1124 ;;		Nothing
  1125 ;; This function is called by:
  1126 ;;		_UpdateLeft
  1127 ;; This function uses a non-reentrant model
  1128 ;;
  1129                           
  1130                           	psect	text6
  1131  000B20                     __ptext6:
  1132                           	callstack 0
  1133  000B20                     ___awdiv:
  1134                           	callstack 24
  1135                           
  1136                           ;incstack = 0
  1137  000B20  0E00               	movlw	0
  1138  000B22  6E52               	movwf	___awdiv@sign^0,c
  1139  000B24  AE50               	btfss	(___awdiv@divisor+1)^0,7,c
  1140  000B26  D006               	goto	l2705
  1141  000B28  6C4F               	negf	___awdiv@divisor^0,c
  1142  000B2A  1E50               	comf	(___awdiv@divisor+1)^0,f,c
  1143  000B2C  B0D8               	btfsc	status,0,c
  1144  000B2E  2A50               	incf	(___awdiv@divisor+1)^0,f,c
  1145  000B30  0E01               	movlw	1
  1146  000B32  6E52               	movwf	___awdiv@sign^0,c
  1147  000B34                     l2705:
  1148  000B34  AE4E               	btfss	(___awdiv@dividend+1)^0,7,c
  1149  000B36  D006               	goto	l2711
  1150  000B38  6C4D               	negf	___awdiv@dividend^0,c
  1151  000B3A  1E4E               	comf	(___awdiv@dividend+1)^0,f,c
  1152  000B3C  B0D8               	btfsc	status,0,c
  1153  000B3E  2A4E               	incf	(___awdiv@dividend+1)^0,f,c
  1154  000B40  0E01               	movlw	1
  1155  000B42  1A52               	xorwf	___awdiv@sign^0,f,c
  1156  000B44                     l2711:
  1157  000B44  0E00               	movlw	0
  1158  000B46  6E54               	movwf	(___awdiv@quotient+1)^0,c
  1159  000B48  0E00               	movlw	0
  1160  000B4A  6E53               	movwf	___awdiv@quotient^0,c
  1161  000B4C  504F               	movf	___awdiv@divisor^0,w,c
  1162  000B4E  1050               	iorwf	(___awdiv@divisor+1)^0,w,c
  1163  000B50  B4D8               	btfsc	status,2,c
  1164  000B52  D01C               	goto	l2733
  1165  000B54  0E01               	movlw	1
  1166  000B56  6E51               	movwf	___awdiv@counter^0,c
  1167  000B58  D004               	goto	l2719
  1168  000B5A                     l2717:
  1169  000B5A  90D8               	bcf	status,0,c
  1170  000B5C  364F               	rlcf	___awdiv@divisor^0,f,c
  1171  000B5E  3650               	rlcf	(___awdiv@divisor+1)^0,f,c
  1172  000B60  2A51               	incf	___awdiv@counter^0,f,c
  1173  000B62                     l2719:
  1174  000B62  AE50               	btfss	(___awdiv@divisor+1)^0,7,c
  1175  000B64  D7FA               	goto	l2717
  1176  000B66                     u2830:
  1177  000B66  90D8               	bcf	status,0,c
  1178  000B68  3653               	rlcf	___awdiv@quotient^0,f,c
  1179  000B6A  3654               	rlcf	(___awdiv@quotient+1)^0,f,c
  1180  000B6C  504F               	movf	___awdiv@divisor^0,w,c
  1181  000B6E  5C4D               	subwf	___awdiv@dividend^0,w,c
  1182  000B70  5050               	movf	(___awdiv@divisor+1)^0,w,c
  1183  000B72  584E               	subwfb	(___awdiv@dividend+1)^0,w,c
  1184  000B74  A0D8               	btfss	status,0,c
  1185  000B76  D005               	goto	l2729
  1186  000B78  504F               	movf	___awdiv@divisor^0,w,c
  1187  000B7A  5E4D               	subwf	___awdiv@dividend^0,f,c
  1188  000B7C  5050               	movf	(___awdiv@divisor+1)^0,w,c
  1189  000B7E  5A4E               	subwfb	(___awdiv@dividend+1)^0,f,c
  1190  000B80  8053               	bsf	___awdiv@quotient^0,0,c
  1191  000B82                     l2729:
  1192  000B82  90D8               	bcf	status,0,c
  1193  000B84  3250               	rrcf	(___awdiv@divisor+1)^0,f,c
  1194  000B86  324F               	rrcf	___awdiv@divisor^0,f,c
  1195  000B88  2E51               	decfsz	___awdiv@counter^0,f,c
  1196  000B8A  D7ED               	goto	u2830
  1197  000B8C                     l2733:
  1198  000B8C  5052               	movf	___awdiv@sign^0,w,c
  1199  000B8E  B4D8               	btfsc	status,2,c
  1200  000B90  D004               	goto	l2737
  1201  000B92  6C53               	negf	___awdiv@quotient^0,c
  1202  000B94  1E54               	comf	(___awdiv@quotient+1)^0,f,c
  1203  000B96  B0D8               	btfsc	status,0,c
  1204  000B98  2A54               	incf	(___awdiv@quotient+1)^0,f,c
  1205  000B9A                     l2737:
  1206  000B9A  C053  F04D         	movff	___awdiv@quotient,?___awdiv
  1207  000B9E  C054  F04E         	movff	___awdiv@quotient+1,?___awdiv+1
  1208  000BA2  0012               	return		;funcret
  1209  000BA4                     __end_of___awdiv:
  1210                           	callstack 0
  1211                           
  1212 ;; *************** function _MakeThirdZero *****************
  1213 ;; Defined at:
  1214 ;;		line 451 in file "main.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;		None
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;		None
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, status,2, status,0, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1232 ;;Total ram usage:        0 bytes
  1233 ;; Hardware stack levels used:    1
  1234 ;; Hardware stack levels required when called:    5
  1235 ;; This function calls:
  1236 ;;		___awmod
  1237 ;; This function is called by:
  1238 ;;		_UpdateSS
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           	psect	text7
  1243  001254                     __ptext7:
  1244                           	callstack 0
  1245  001254                     _MakeThirdZero:
  1246                           	callstack 24
  1247                           
  1248                           ;main.c: 453:     LATJ = 0x3F;
  1249                           
  1250                           ;incstack = 0
  1251  001254  0E3F               	movlw	63
  1252  001256  6E91               	movwf	145,c	;volatile
  1253                           
  1254                           ;main.c: 454:     LATH = 0x03;
  1255  001258  0E03               	movlw	3
  1256  00125A  6E90               	movwf	144,c	;volatile
  1257                           
  1258                           ;main.c: 455:     digitNo = (digitNo + 1) % 3;
  1259  00125C  0E01               	movlw	1
  1260  00125E  2425               	addwf	_digitNo^0,w,c
  1261  001260  6E4D               	movwf	___awmod@dividend^0,c
  1262  001262  0E00               	movlw	0
  1263  001264  2026               	addwfc	(_digitNo+1)^0,w,c
  1264  001266  6E4E               	movwf	(___awmod@dividend+1)^0,c
  1265  001268  0E00               	movlw	0
  1266  00126A  6E50               	movwf	(___awmod@divisor+1)^0,c
  1267  00126C  0E03               	movlw	3
  1268  00126E  6E4F               	movwf	___awmod@divisor^0,c
  1269  001270  ECCD  F006         	call	___awmod	;wreg free
  1270  001274  C04D  F025         	movff	?___awmod,_digitNo
  1271  001278  C04E  F026         	movff	?___awmod+1,_digitNo+1
  1272  00127C  0012               	return		;funcret
  1273  00127E                     __end_of_MakeThirdZero:
  1274                           	callstack 0
  1275                           
  1276 ;; *************** function _Submit *****************
  1277 ;; Defined at:
  1278 ;;		line 325 in file "main.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2, status,0, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;Total ram usage:        0 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    6
  1299 ;; This function calls:
  1300 ;;		_CreateNewShape
  1301 ;;		_Find
  1302 ;;		_Is_Collide
  1303 ;;		_SaveSevenSeg
  1304 ;;		___awmod
  1305 ;; This function is called by:
  1306 ;;		_main
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310                           	psect	text8
  1311  00018E                     __ptext8:
  1312                           	callstack 0
  1313  00018E                     _Submit:
  1314                           	callstack 24
  1315                           
  1316                           ;main.c: 326:      INTCONbits.GIE = 0;
  1317                           
  1318                           ;incstack = 0
  1319  00018E  9EF2               	bcf	242,7,c	;volatile
  1320                           
  1321                           ;main.c: 327:      if(submit == 1){
  1322  000190  043D               	decf	_submit^0,w,c	;volatile
  1323  000192  103E               	iorwf	(_submit+1)^0,w,c	;volatile
  1324  000194  A4D8               	btfss	status,2,c
  1325  000196  D08C               	goto	l2925
  1326                           
  1327                           ;main.c: 328:          if(Is_Collide() ){
  1328  000198  ECD2  F005         	call	_Is_Collide	;wreg free
  1329  00019C  5052               	movf	?_Is_Collide^0,w,c
  1330  00019E  1053               	iorwf	(?_Is_Collide+1)^0,w,c
  1331  0001A0  B4D8               	btfsc	status,2,c
  1332  0001A2  D006               	goto	l2901
  1333                           
  1334                           ; BSR set to: 0
  1335                           ;main.c: 329:              INTCONbits.GIE = 1;
  1336  0001A4  8EF2               	bsf	242,7,c	;volatile
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;main.c: 330:              submit = 0;
  1340  0001A6  0E00               	movlw	0
  1341  0001A8  6E3E               	movwf	(_submit+1)^0,c	;volatile
  1342  0001AA  0E00               	movlw	0
  1343  0001AC  6E3D               	movwf	_submit^0,c	;volatile
  1344  0001AE  0012               	return	
  1345  0001B0                     l2901:
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 333:          leftMov = 0; rightMov = 0; upMov = 0; downMov = 0;
  1349  0001B0  0E00               	movlw	0
  1350  0001B2  6E2E               	movwf	(_leftMov+1)^0,c
  1351  0001B4  0E00               	movlw	0
  1352  0001B6  6E2D               	movwf	_leftMov^0,c
  1353  0001B8  0E00               	movlw	0
  1354  0001BA  6E2C               	movwf	(_rightMov+1)^0,c
  1355  0001BC  0E00               	movlw	0
  1356  0001BE  6E2B               	movwf	_rightMov^0,c
  1357  0001C0  0E00               	movlw	0
  1358  0001C2  6E2A               	movwf	(_upMov+1)^0,c
  1359  0001C4  0E00               	movlw	0
  1360  0001C6  6E29               	movwf	_upMov^0,c
  1361  0001C8  0E00               	movlw	0
  1362  0001CA  6E28               	movwf	(_downMov+1)^0,c
  1363  0001CC  0E00               	movlw	0
  1364  0001CE  6E27               	movwf	_downMov^0,c
  1365                           
  1366                           ;main.c: 334:          stateA0 = countA0 = 0;
  1367  0001D0  0E00               	movlw	0
  1368  0001D2  6E24               	movwf	(_countA0+1)^0,c
  1369  0001D4  0E00               	movlw	0
  1370  0001D6  6E23               	movwf	_countA0^0,c
  1371  0001D8  C023  F021         	movff	_countA0,_stateA0
  1372  0001DC  C024  F022         	movff	_countA0+1,_stateA0+1
  1373                           
  1374                           ;main.c: 335:          stateA1 = countA1 = 0;
  1375  0001E0  0E00               	movlw	0
  1376  0001E2  6E20               	movwf	(_countA1+1)^0,c
  1377  0001E4  0E00               	movlw	0
  1378  0001E6  6E1F               	movwf	_countA1^0,c
  1379  0001E8  C01F  F064         	movff	_countA1,_stateA1
  1380  0001EC  C020  F065         	movff	_countA1+1,_stateA1+1
  1381                           
  1382                           ;main.c: 336:          stateA2 = countA2 = 0;
  1383  0001F0  0E00               	movlw	0
  1384  0001F2  6E1E               	movwf	(_countA2+1)^0,c
  1385  0001F4  0E00               	movlw	0
  1386  0001F6  6E1D               	movwf	_countA2^0,c
  1387  0001F8  C01D  F062         	movff	_countA2,_stateA2
  1388  0001FC  C01E  F063         	movff	_countA2+1,_stateA2+1
  1389                           
  1390                           ;main.c: 337:          stateA3 = countA3 = 0;
  1391  000200  0E00               	movlw	0
  1392  000202  6E1C               	movwf	(_countA3+1)^0,c
  1393  000204  0E00               	movlw	0
  1394  000206  6E1B               	movwf	_countA3^0,c
  1395  000208  C01B  F060         	movff	_countA3,_stateA3
  1396  00020C  C01C  F061         	movff	_countA3+1,_stateA3+1
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 339:          grid.c = grid.c | Find(1);
  1400  000210  0E00               	movlw	0
  1401  000212  6E4E               	movwf	(Find@col+1)^0,c
  1402  000214  0E01               	movlw	1
  1403  000216  6E4D               	movwf	Find@col^0,c
  1404  000218  EC09  F000         	call	_Find	;wreg free
  1405  00021C  5011               	movf	_grid^0,w,c
  1406  00021E  104D               	iorwf	?_Find^0,w,c
  1407  000220  6E11               	movwf	_grid^0,c
  1408  000222  5012               	movf	(_grid+1)^0,w,c
  1409  000224  104E               	iorwf	(?_Find+1)^0,w,c
  1410  000226  6E12               	movwf	(_grid+1)^0,c
  1411                           
  1412                           ; BSR set to: 0
  1413                           ;main.c: 340:          grid.d = grid.d | Find(2);
  1414  000228  0E00               	movlw	0
  1415  00022A  6E4E               	movwf	(Find@col+1)^0,c
  1416  00022C  0E02               	movlw	2
  1417  00022E  6E4D               	movwf	Find@col^0,c
  1418  000230  EC09  F000         	call	_Find	;wreg free
  1419  000234  5013               	movf	(_grid+2)^0,w,c
  1420  000236  104D               	iorwf	?_Find^0,w,c
  1421  000238  6E13               	movwf	(_grid+2)^0,c
  1422  00023A  5014               	movf	(_grid+3)^0,w,c
  1423  00023C  104E               	iorwf	(?_Find+1)^0,w,c
  1424  00023E  6E14               	movwf	(_grid+3)^0,c
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;main.c: 341:          grid.e = grid.e | Find(3);
  1428  000240  0E00               	movlw	0
  1429  000242  6E4E               	movwf	(Find@col+1)^0,c
  1430  000244  0E03               	movlw	3
  1431  000246  6E4D               	movwf	Find@col^0,c
  1432  000248  EC09  F000         	call	_Find	;wreg free
  1433  00024C  5015               	movf	(_grid+4)^0,w,c
  1434  00024E  104D               	iorwf	?_Find^0,w,c
  1435  000250  6E15               	movwf	(_grid+4)^0,c
  1436  000252  5016               	movf	(_grid+5)^0,w,c
  1437  000254  104E               	iorwf	(?_Find+1)^0,w,c
  1438  000256  6E16               	movwf	(_grid+5)^0,c
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;main.c: 342:          grid.f = grid.f | Find(4);
  1442  000258  0E00               	movlw	0
  1443  00025A  6E4E               	movwf	(Find@col+1)^0,c
  1444  00025C  0E04               	movlw	4
  1445  00025E  6E4D               	movwf	Find@col^0,c
  1446  000260  EC09  F000         	call	_Find	;wreg free
  1447  000264  5017               	movf	(_grid+6)^0,w,c
  1448  000266  104D               	iorwf	?_Find^0,w,c
  1449  000268  6E17               	movwf	(_grid+6)^0,c
  1450  00026A  5018               	movf	(_grid+7)^0,w,c
  1451  00026C  104E               	iorwf	(?_Find+1)^0,w,c
  1452  00026E  6E18               	movwf	(_grid+7)^0,c
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;main.c: 344:          SaveSevenSeg();
  1456  000270  ECF7  F008         	call	_SaveSevenSeg	;wreg free
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;main.c: 346:          CurShape = (CurShape + 1) % 3;
  1460  000274  0E01               	movlw	1
  1461  000276  2431               	addwf	_CurShape^0,w,c
  1462  000278  6E4D               	movwf	___awmod@dividend^0,c
  1463  00027A  0E00               	movlw	0
  1464  00027C  2032               	addwfc	(_CurShape+1)^0,w,c
  1465  00027E  6E4E               	movwf	(___awmod@dividend+1)^0,c
  1466  000280  0E00               	movlw	0
  1467  000282  6E50               	movwf	(___awmod@divisor+1)^0,c
  1468  000284  0E03               	movlw	3
  1469  000286  6E4F               	movwf	___awmod@divisor^0,c
  1470  000288  ECCD  F006         	call	___awmod	;wreg free
  1471  00028C  C04D  F031         	movff	?___awmod,_CurShape
  1472  000290  C04E  F032         	movff	?___awmod+1,_CurShape+1
  1473                           
  1474                           ;main.c: 347:          CreateNewShape();
  1475  000294  EC3A  F005         	call	_CreateNewShape	;wreg free
  1476                           
  1477                           ;main.c: 348:         TMR0H = 0x67;
  1478  000298  0E67               	movlw	103
  1479  00029A  6ED7               	movwf	215,c	;volatile
  1480                           
  1481                           ;main.c: 349:         TMR0L = 0x69;
  1482  00029C  0E69               	movlw	105
  1483  00029E  6ED6               	movwf	214,c	;volatile
  1484                           
  1485                           ;main.c: 351:         submit = 0;
  1486  0002A0  0E00               	movlw	0
  1487  0002A2  6E3E               	movwf	(_submit+1)^0,c	;volatile
  1488  0002A4  0E00               	movlw	0
  1489  0002A6  6E3D               	movwf	_submit^0,c	;volatile
  1490                           
  1491                           ;main.c: 352:         count = 0;
  1492  0002A8  0E00               	movlw	0
  1493  0002AA  6E40               	movwf	(_count+1)^0,c	;volatile
  1494  0002AC  0E00               	movlw	0
  1495  0002AE  6E3F               	movwf	_count^0,c	;volatile
  1496  0002B0                     l2925:
  1497                           
  1498                           ;main.c: 354:      INTCONbits.GIE = 1;
  1499  0002B0  8EF2               	bsf	242,7,c	;volatile
  1500  0002B2  0012               	return		;funcret
  1501  0002B4                     __end_of_Submit:
  1502                           	callstack 0
  1503                           
  1504 ;; *************** function ___awmod *****************
  1505 ;; Defined at:
  1506 ;;		line 7 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/awmod.c"
  1507 ;; Parameters:    Size  Location     Type
  1508 ;;  dividend        2   10[COMRAM] int 
  1509 ;;  divisor         2   12[COMRAM] int 
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;  sign            1   15[COMRAM] unsigned char 
  1512 ;;  counter         1   14[COMRAM] unsigned char 
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  2   10[COMRAM] int 
  1515 ;; Registers used:
  1516 ;;		wreg, status,2, status,0
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1522 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;Total ram usage:        6 bytes
  1527 ;; Hardware stack levels used:    1
  1528 ;; Hardware stack levels required when called:    4
  1529 ;; This function calls:
  1530 ;;		Nothing
  1531 ;; This function is called by:
  1532 ;;		_Submit
  1533 ;;		_UpdateLeft
  1534 ;;		_UpdateRight
  1535 ;;		_MakeThirdZero
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           	psect	text9
  1540  000D9A                     __ptext9:
  1541                           	callstack 0
  1542  000D9A                     ___awmod:
  1543                           	callstack 24
  1544                           
  1545                           ;incstack = 0
  1546  000D9A  0E00               	movlw	0
  1547  000D9C  6E52               	movwf	___awmod@sign^0,c
  1548  000D9E  AE4E               	btfss	(___awmod@dividend+1)^0,7,c
  1549  000DA0  D006               	goto	l2749
  1550  000DA2  6C4D               	negf	___awmod@dividend^0,c
  1551  000DA4  1E4E               	comf	(___awmod@dividend+1)^0,f,c
  1552  000DA6  B0D8               	btfsc	status,0,c
  1553  000DA8  2A4E               	incf	(___awmod@dividend+1)^0,f,c
  1554  000DAA  0E01               	movlw	1
  1555  000DAC  6E52               	movwf	___awmod@sign^0,c
  1556  000DAE                     l2749:
  1557  000DAE  AE50               	btfss	(___awmod@divisor+1)^0,7,c
  1558  000DB0  D004               	goto	l2753
  1559  000DB2  6C4F               	negf	___awmod@divisor^0,c
  1560  000DB4  1E50               	comf	(___awmod@divisor+1)^0,f,c
  1561  000DB6  B0D8               	btfsc	status,0,c
  1562  000DB8  2A50               	incf	(___awmod@divisor+1)^0,f,c
  1563  000DBA                     l2753:
  1564  000DBA  504F               	movf	___awmod@divisor^0,w,c
  1565  000DBC  1050               	iorwf	(___awmod@divisor+1)^0,w,c
  1566  000DBE  B4D8               	btfsc	status,2,c
  1567  000DC0  D018               	goto	l2769
  1568  000DC2  0E01               	movlw	1
  1569  000DC4  6E51               	movwf	___awmod@counter^0,c
  1570  000DC6  D004               	goto	l2759
  1571  000DC8                     l2757:
  1572  000DC8  90D8               	bcf	status,0,c
  1573  000DCA  364F               	rlcf	___awmod@divisor^0,f,c
  1574  000DCC  3650               	rlcf	(___awmod@divisor+1)^0,f,c
  1575  000DCE  2A51               	incf	___awmod@counter^0,f,c
  1576  000DD0                     l2759:
  1577  000DD0  AE50               	btfss	(___awmod@divisor+1)^0,7,c
  1578  000DD2  D7FA               	goto	l2757
  1579  000DD4                     u2890:
  1580  000DD4  504F               	movf	___awmod@divisor^0,w,c
  1581  000DD6  5C4D               	subwf	___awmod@dividend^0,w,c
  1582  000DD8  5050               	movf	(___awmod@divisor+1)^0,w,c
  1583  000DDA  584E               	subwfb	(___awmod@dividend+1)^0,w,c
  1584  000DDC  A0D8               	btfss	status,0,c
  1585  000DDE  D004               	goto	l2765
  1586  000DE0  504F               	movf	___awmod@divisor^0,w,c
  1587  000DE2  5E4D               	subwf	___awmod@dividend^0,f,c
  1588  000DE4  5050               	movf	(___awmod@divisor+1)^0,w,c
  1589  000DE6  5A4E               	subwfb	(___awmod@dividend+1)^0,f,c
  1590  000DE8                     l2765:
  1591  000DE8  90D8               	bcf	status,0,c
  1592  000DEA  3250               	rrcf	(___awmod@divisor+1)^0,f,c
  1593  000DEC  324F               	rrcf	___awmod@divisor^0,f,c
  1594  000DEE  2E51               	decfsz	___awmod@counter^0,f,c
  1595  000DF0  D7F1               	goto	u2890
  1596  000DF2                     l2769:
  1597  000DF2  5052               	movf	___awmod@sign^0,w,c
  1598  000DF4  B4D8               	btfsc	status,2,c
  1599  000DF6  D004               	goto	l2773
  1600  000DF8  6C4D               	negf	___awmod@dividend^0,c
  1601  000DFA  1E4E               	comf	(___awmod@dividend+1)^0,f,c
  1602  000DFC  B0D8               	btfsc	status,0,c
  1603  000DFE  2A4E               	incf	(___awmod@dividend+1)^0,f,c
  1604  000E00                     l2773:
  1605  000E00  C04D  F04D         	movff	___awmod@dividend,?___awmod
  1606  000E04  C04E  F04E         	movff	___awmod@dividend+1,?___awmod+1
  1607  000E08  0012               	return		;funcret
  1608  000E0A                     __end_of___awmod:
  1609                           	callstack 0
  1610                           
  1611 ;; *************** function _SaveSevenSeg *****************
  1612 ;; Defined at:
  1613 ;;		line 313 in file "main.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;		None
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;		None
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      void 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0
  1622 ;; Tracked objects:
  1623 ;;		On entry : 3F/0
  1624 ;;		On exit  : 3F/0
  1625 ;;		Unchanged: 3F/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1631 ;;Total ram usage:        0 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    4
  1634 ;; This function calls:
  1635 ;;		Nothing
  1636 ;; This function is called by:
  1637 ;;		_Submit
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           	psect	text10
  1642  0011EE                     __ptext10:
  1643                           	callstack 0
  1644  0011EE                     _SaveSevenSeg:
  1645                           	callstack 25
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;main.c: 314:      if(CurShape == DOT){
  1649                           
  1650                           ;incstack = 0
  1651  0011EE  5031               	movf	_CurShape^0,w,c
  1652  0011F0  1032               	iorwf	(_CurShape+1)^0,w,c
  1653  0011F2  A4D8               	btfss	status,2,c
  1654  0011F4  D003               	goto	l2223
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;main.c: 315:          SubmittedBlock += 1;
  1658  0011F6  4A2F               	infsnz	_SubmittedBlock^0,f,c
  1659  0011F8  2A30               	incf	(_SubmittedBlock+1)^0,f,c
  1660                           
  1661                           ;main.c: 316:      }
  1662  0011FA  0012               	return	
  1663  0011FC                     l2223:
  1664                           
  1665                           ; BSR set to: 0
  1666  0011FC  0431               	decf	_CurShape^0,w,c
  1667  0011FE  1032               	iorwf	(_CurShape+1)^0,w,c
  1668  001200  A4D8               	btfss	status,2,c
  1669  001202  D005               	goto	l2227
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;main.c: 318:          SubmittedBlock += 4;
  1673  001204  0E04               	movlw	4
  1674  001206  262F               	addwf	_SubmittedBlock^0,f,c
  1675  001208  0E00               	movlw	0
  1676  00120A  2230               	addwfc	(_SubmittedBlock+1)^0,f,c
  1677                           
  1678                           ;main.c: 319:      }
  1679  00120C  0012               	return	
  1680  00120E                     l2227:
  1681                           
  1682                           ; BSR set to: 0
  1683  00120E  0E02               	movlw	2
  1684  001210  1831               	xorwf	_CurShape^0,w,c
  1685  001212  1032               	iorwf	(_CurShape+1)^0,w,c
  1686  001214  A4D8               	btfss	status,2,c
  1687  001216  0012               	return	
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 321:          SubmittedBlock += 3;
  1691  001218  0E03               	movlw	3
  1692  00121A  262F               	addwf	_SubmittedBlock^0,f,c
  1693  00121C  0E00               	movlw	0
  1694  00121E  2230               	addwfc	(_SubmittedBlock+1)^0,f,c
  1695                           
  1696                           ; BSR set to: 0
  1697  001220  0012               	return		;funcret
  1698  001222                     __end_of_SaveSevenSeg:
  1699                           	callstack 0
  1700                           
  1701 ;; *************** function _Is_Collide *****************
  1702 ;; Defined at:
  1703 ;;		line 305 in file "main.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;		None
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;		None
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  2   15[COMRAM] int 
  1710 ;; Registers used:
  1711 ;;		wreg, status,2, status,0, cstack
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 3F/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1717 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;Total ram usage:        2 bytes
  1722 ;; Hardware stack levels used:    1
  1723 ;; Hardware stack levels required when called:    5
  1724 ;; This function calls:
  1725 ;;		_Find
  1726 ;; This function is called by:
  1727 ;;		_Submit
  1728 ;; This function uses a non-reentrant model
  1729 ;;
  1730                           
  1731                           	psect	text11
  1732  000BA4                     __ptext11:
  1733                           	callstack 0
  1734  000BA4                     _Is_Collide:
  1735                           	callstack 24
  1736                           
  1737                           ;main.c: 306:      if(grid.c & Find(1) ) return 1;
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;incstack = 0
  1741  000BA4  0E00               	movlw	0
  1742  000BA6  6E4E               	movwf	(Find@col+1)^0,c
  1743  000BA8  0E01               	movlw	1
  1744  000BAA  6E4D               	movwf	Find@col^0,c
  1745  000BAC  EC09  F000         	call	_Find	;wreg free
  1746  000BB0  5011               	movf	_grid^0,w,c
  1747  000BB2  164D               	andwf	?_Find^0,f,c
  1748  000BB4  5012               	movf	(_grid+1)^0,w,c
  1749  000BB6  164E               	andwf	(?_Find+1)^0,f,c
  1750  000BB8  504D               	movf	?_Find^0,w,c
  1751  000BBA  104E               	iorwf	(?_Find+1)^0,w,c
  1752  000BBC  B4D8               	btfsc	status,2,c
  1753  000BBE  D005               	goto	l2783
  1754  000BC0                     u2920:
  1755                           
  1756                           ; BSR set to: 0
  1757  000BC0  0E00               	movlw	0
  1758  000BC2  6E53               	movwf	(?_Is_Collide+1)^0,c
  1759  000BC4  0E01               	movlw	1
  1760  000BC6  6E52               	movwf	?_Is_Collide^0,c
  1761  000BC8  0012               	return	
  1762  000BCA                     l2783:
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;main.c: 307:      if(grid.d & Find(2) ) return 1;
  1766  000BCA  0E00               	movlw	0
  1767  000BCC  6E4E               	movwf	(Find@col+1)^0,c
  1768  000BCE  0E02               	movlw	2
  1769  000BD0  6E4D               	movwf	Find@col^0,c
  1770  000BD2  EC09  F000         	call	_Find	;wreg free
  1771  000BD6  5013               	movf	(_grid+2)^0,w,c
  1772  000BD8  164D               	andwf	?_Find^0,f,c
  1773  000BDA  5014               	movf	(_grid+3)^0,w,c
  1774  000BDC  164E               	andwf	(?_Find+1)^0,f,c
  1775  000BDE  504D               	movf	?_Find^0,w,c
  1776  000BE0  104E               	iorwf	(?_Find+1)^0,w,c
  1777  000BE2  A4D8               	btfss	status,2,c
  1778  000BE4  D7ED               	goto	u2920
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;main.c: 308:      if(grid.e & Find(3) ) return 1;
  1782  000BE6  0E00               	movlw	0
  1783  000BE8  6E4E               	movwf	(Find@col+1)^0,c
  1784  000BEA  0E03               	movlw	3
  1785  000BEC  6E4D               	movwf	Find@col^0,c
  1786  000BEE  EC09  F000         	call	_Find	;wreg free
  1787  000BF2  5015               	movf	(_grid+4)^0,w,c
  1788  000BF4  164D               	andwf	?_Find^0,f,c
  1789  000BF6  5016               	movf	(_grid+5)^0,w,c
  1790  000BF8  164E               	andwf	(?_Find+1)^0,f,c
  1791  000BFA  504D               	movf	?_Find^0,w,c
  1792  000BFC  104E               	iorwf	(?_Find+1)^0,w,c
  1793  000BFE  A4D8               	btfss	status,2,c
  1794  000C00  D7DF               	goto	u2920
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;main.c: 309:      if(grid.f & Find(4) ) return 1;
  1798  000C02  0E00               	movlw	0
  1799  000C04  6E4E               	movwf	(Find@col+1)^0,c
  1800  000C06  0E04               	movlw	4
  1801  000C08  6E4D               	movwf	Find@col^0,c
  1802  000C0A  EC09  F000         	call	_Find	;wreg free
  1803  000C0E  5017               	movf	(_grid+6)^0,w,c
  1804  000C10  164D               	andwf	?_Find^0,f,c
  1805  000C12  5018               	movf	(_grid+7)^0,w,c
  1806  000C14  164E               	andwf	(?_Find+1)^0,f,c
  1807  000C16  504D               	movf	?_Find^0,w,c
  1808  000C18  104E               	iorwf	(?_Find+1)^0,w,c
  1809  000C1A  A4D8               	btfss	status,2,c
  1810  000C1C  D7D1               	goto	u2920
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;main.c: 310:      return 0;
  1814  000C1E  0E00               	movlw	0
  1815  000C20  6E53               	movwf	(?_Is_Collide+1)^0,c
  1816  000C22  0E00               	movlw	0
  1817  000C24  6E52               	movwf	?_Is_Collide^0,c
  1818                           
  1819                           ; BSR set to: 0
  1820  000C26  0012               	return		;funcret
  1821  000C28                     __end_of_Is_Collide:
  1822                           	callstack 0
  1823                           
  1824 ;; *************** function _CreateNewShape *****************
  1825 ;; Defined at:
  1826 ;;		line 280 in file "main.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    5
  1847 ;; This function calls:
  1848 ;;		_Clear_Shape
  1849 ;; This function is called by:
  1850 ;;		_Submit
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text12
  1856  000A74                     __ptext12:
  1857                           	callstack 0
  1858  000A74                     _CreateNewShape:
  1859                           	callstack 24
  1860                           
  1861                           ;main.c: 282:      RotationOrder = 0;
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;incstack = 0
  1865  000A74  0E00               	movlw	0
  1866  000A76  6E1A               	movwf	(_RotationOrder+1)^0,c
  1867  000A78  0E00               	movlw	0
  1868  000A7A  6E19               	movwf	_RotationOrder^0,c
  1869                           
  1870                           ;main.c: 283:      Clear_Shape();
  1871  000A7C  ECD6  F008         	call	_Clear_Shape	;wreg free
  1872                           
  1873                           ;main.c: 285:      if(CurShape == DOT){
  1874  000A80  5031               	movf	_CurShape^0,w,c
  1875  000A82  1032               	iorwf	(_CurShape+1)^0,w,c
  1876  000A84  A4D8               	btfss	status,2,c
  1877  000A86  D009               	goto	l2183
  1878                           
  1879                           ;main.c: 286:          shape.lux = 1;
  1880  000A88  0E00               	movlw	0
  1881  000A8A  6E02               	movwf	(_shape+1)^0,c
  1882  000A8C  0E01               	movlw	1
  1883  000A8E  6E01               	movwf	_shape^0,c
  1884                           
  1885                           ;main.c: 287:          shape.luy = 1;
  1886  000A90  0E00               	movlw	0
  1887  000A92  6E0A               	movwf	(_shape+9)^0,c
  1888  000A94  0E01               	movlw	1
  1889  000A96  6E09               	movwf	(_shape+8)^0,c
  1890                           
  1891                           ;main.c: 288:      }
  1892  000A98  0012               	return	
  1893  000A9A                     l2183:
  1894  000A9A  0431               	decf	_CurShape^0,w,c
  1895  000A9C  1032               	iorwf	(_CurShape+1)^0,w,c
  1896  000A9E  A4D8               	btfss	status,2,c
  1897  000AA0  D021               	goto	l2187
  1898                           
  1899                           ;main.c: 290:          shape.lux = shape.luy = 1;
  1900  000AA2  0E00               	movlw	0
  1901  000AA4  6E0A               	movwf	(_shape+9)^0,c
  1902  000AA6  0E01               	movlw	1
  1903  000AA8  6E09               	movwf	(_shape+8)^0,c
  1904  000AAA  C009  F001         	movff	_shape+8,_shape
  1905  000AAE  C00A  F002         	movff	_shape+9,_shape+1
  1906                           
  1907                           ;main.c: 291:          shape.rux = 2; shape.ruy = 1;
  1908  000AB2  0E00               	movlw	0
  1909  000AB4  6E04               	movwf	(_shape+3)^0,c
  1910  000AB6  0E02               	movlw	2
  1911  000AB8  6E03               	movwf	(_shape+2)^0,c
  1912  000ABA  0E00               	movlw	0
  1913  000ABC  6E0C               	movwf	(_shape+11)^0,c
  1914  000ABE  0E01               	movlw	1
  1915  000AC0  6E0B               	movwf	(_shape+10)^0,c
  1916                           
  1917                           ;main.c: 292:          shape.llx = 1; shape.lly = 2;
  1918  000AC2  0E00               	movlw	0
  1919  000AC4  6E06               	movwf	(_shape+5)^0,c
  1920  000AC6  0E01               	movlw	1
  1921  000AC8  6E05               	movwf	(_shape+4)^0,c
  1922  000ACA  0E00               	movlw	0
  1923  000ACC  6E0E               	movwf	(_shape+13)^0,c
  1924  000ACE  0E02               	movlw	2
  1925  000AD0  6E0D               	movwf	(_shape+12)^0,c
  1926                           
  1927                           ;main.c: 293:          shape.rlx = shape.rly = 2;
  1928  000AD2  0E00               	movlw	0
  1929  000AD4  6E10               	movwf	(_shape+15)^0,c
  1930  000AD6  0E02               	movlw	2
  1931  000AD8  6E0F               	movwf	(_shape+14)^0,c
  1932  000ADA  C00F  F007         	movff	_shape+14,_shape+6
  1933  000ADE  C010  F008         	movff	_shape+15,_shape+7
  1934                           
  1935                           ;main.c: 294:      }
  1936  000AE2  0012               	return	
  1937  000AE4                     l2187:
  1938  000AE4  0E02               	movlw	2
  1939  000AE6  1831               	xorwf	_CurShape^0,w,c
  1940  000AE8  1032               	iorwf	(_CurShape+1)^0,w,c
  1941  000AEA  A4D8               	btfss	status,2,c
  1942  000AEC  0012               	return	
  1943                           
  1944                           ;main.c: 296:          shape.lux = shape.luy = 1;
  1945  000AEE  0E00               	movlw	0
  1946  000AF0  6E0A               	movwf	(_shape+9)^0,c
  1947  000AF2  0E01               	movlw	1
  1948  000AF4  6E09               	movwf	(_shape+8)^0,c
  1949  000AF6  C009  F001         	movff	_shape+8,_shape
  1950  000AFA  C00A  F002         	movff	_shape+9,_shape+1
  1951                           
  1952                           ;main.c: 297:          shape.rux = 2; shape.ruy = 1;
  1953  000AFE  0E00               	movlw	0
  1954  000B00  6E04               	movwf	(_shape+3)^0,c
  1955  000B02  0E02               	movlw	2
  1956  000B04  6E03               	movwf	(_shape+2)^0,c
  1957  000B06  0E00               	movlw	0
  1958  000B08  6E0C               	movwf	(_shape+11)^0,c
  1959  000B0A  0E01               	movlw	1
  1960  000B0C  6E0B               	movwf	(_shape+10)^0,c
  1961                           
  1962                           ;main.c: 298:          shape.rlx = shape.rly = 2;
  1963  000B0E  0E00               	movlw	0
  1964  000B10  6E10               	movwf	(_shape+15)^0,c
  1965  000B12  0E02               	movlw	2
  1966  000B14  6E0F               	movwf	(_shape+14)^0,c
  1967  000B16  C00F  F007         	movff	_shape+14,_shape+6
  1968  000B1A  C010  F008         	movff	_shape+15,_shape+7
  1969  000B1E  0012               	return		;funcret
  1970  000B20                     __end_of_CreateNewShape:
  1971                           	callstack 0
  1972                           
  1973 ;; *************** function _Clear_Shape *****************
  1974 ;; Defined at:
  1975 ;;		line 276 in file "main.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;		None
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, status,2
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;Total ram usage:        0 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    4
  1996 ;; This function calls:
  1997 ;;		Nothing
  1998 ;; This function is called by:
  1999 ;;		_CreateNewShape
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text13
  2004  0011AC                     __ptext13:
  2005                           	callstack 0
  2006  0011AC                     _Clear_Shape:
  2007                           	callstack 24
  2008                           
  2009                           ;incstack = 0
  2010  0011AC  0E00               	movlw	0
  2011  0011AE  6E10               	movwf	(_shape+15)^0,c
  2012  0011B0  0E00               	movlw	0
  2013  0011B2  6E0F               	movwf	(_shape+14)^0,c
  2014  0011B4  0E00               	movlw	0
  2015  0011B6  6E0E               	movwf	(_shape+13)^0,c
  2016  0011B8  0E00               	movlw	0
  2017  0011BA  6E0D               	movwf	(_shape+12)^0,c
  2018                           
  2019                           ;main.c: 277:      shape.lux = shape.rux = shape.llx = shape.rlx = shape.luy = shape.ruy
      +                           = shape.lly = shape.rly = 0;
  2020  0011BC  0E00               	movlw	0
  2021  0011BE  6E0C               	movwf	(_shape+11)^0,c
  2022  0011C0  0E00               	movlw	0
  2023  0011C2  6E0B               	movwf	(_shape+10)^0,c
  2024  0011C4  C00B  F009         	movff	_shape+10,_shape+8
  2025  0011C8  C00C  F00A         	movff	_shape+11,_shape+9
  2026  0011CC  C009  F007         	movff	_shape+8,_shape+6
  2027  0011D0  C00A  F008         	movff	_shape+9,_shape+7
  2028  0011D4  C007  F005         	movff	_shape+6,_shape+4
  2029  0011D8  C008  F006         	movff	_shape+7,_shape+5
  2030  0011DC  C005  F003         	movff	_shape+4,_shape+2
  2031  0011E0  C006  F004         	movff	_shape+5,_shape+3
  2032  0011E4  C003  F001         	movff	_shape+2,_shape
  2033  0011E8  C004  F002         	movff	_shape+3,_shape+1
  2034  0011EC  0012               	return		;funcret
  2035  0011EE                     __end_of_Clear_Shape:
  2036                           	callstack 0
  2037                           
  2038 ;; *************** function _Rotate *****************
  2039 ;; Defined at:
  2040 ;;		line 357 in file "main.c"
  2041 ;; Parameters:    Size  Location     Type
  2042 ;;		None
  2043 ;; Auto vars:     Size  Location     Type
  2044 ;;		None
  2045 ;; Return value:  Size  Location     Type
  2046 ;;                  1    wreg      void 
  2047 ;; Registers used:
  2048 ;;		wreg, status,2, status,0
  2049 ;; Tracked objects:
  2050 ;;		On entry : 0/0
  2051 ;;		On exit  : 0/0
  2052 ;;		Unchanged: 0/0
  2053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2056 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2058 ;;Total ram usage:        2 bytes
  2059 ;; Hardware stack levels used:    1
  2060 ;; Hardware stack levels required when called:    4
  2061 ;; This function calls:
  2062 ;;		Nothing
  2063 ;; This function is called by:
  2064 ;;		_main
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068                           	psect	text14
  2069  0003DA                     __ptext14:
  2070                           	callstack 0
  2071  0003DA                     _Rotate:
  2072                           	callstack 26
  2073                           
  2074                           ;main.c: 359:      if(!rotate) return;
  2075                           
  2076                           ;incstack = 0
  2077  0003DA  503B               	movf	_rotate^0,w,c	;volatile
  2078  0003DC  103C               	iorwf	(_rotate+1)^0,w,c	;volatile
  2079  0003DE  B4D8               	btfsc	status,2,c
  2080  0003E0  0012               	return	
  2081                           
  2082                           ;main.c: 360:      if(CurShape == DOT || CurShape == SQUARE) return;
  2083  0003E2  5031               	movf	_CurShape^0,w,c
  2084  0003E4  1032               	iorwf	(_CurShape+1)^0,w,c
  2085  0003E6  B4D8               	btfsc	status,2,c
  2086  0003E8  0012               	return	
  2087  0003EA  0431               	decf	_CurShape^0,w,c
  2088  0003EC  1032               	iorwf	(_CurShape+1)^0,w,c
  2089  0003EE  B4D8               	btfsc	status,2,c
  2090  0003F0  0012               	return	
  2091                           
  2092                           ;main.c: 361:      if(RotationOrder == 0){
  2093  0003F2  5019               	movf	_RotationOrder^0,w,c
  2094  0003F4  101A               	iorwf	(_RotationOrder+1)^0,w,c
  2095  0003F6  A4D8               	btfss	status,2,c
  2096  0003F8  D013               	goto	l1741
  2097                           
  2098                           ;main.c: 362:          shape.lly = shape.luy + 1;
  2099  0003FA  0E01               	movlw	1
  2100  0003FC  2409               	addwf	(_shape+8)^0,w,c
  2101  0003FE  6E0D               	movwf	(_shape+12)^0,c
  2102  000400  0E00               	movlw	0
  2103  000402  200A               	addwfc	(_shape+9)^0,w,c
  2104  000404  6E0E               	movwf	(_shape+13)^0,c
  2105                           
  2106                           ;main.c: 363:          shape.llx = shape.lux;
  2107  000406  C001  F005         	movff	_shape,_shape+4
  2108  00040A  C002  F006         	movff	_shape+1,_shape+5
  2109                           
  2110                           ;main.c: 364:          shape.luy = 0;
  2111  00040E  0E00               	movlw	0
  2112  000410  6E0A               	movwf	(_shape+9)^0,c
  2113  000412  0E00               	movlw	0
  2114  000414  6E09               	movwf	(_shape+8)^0,c
  2115                           
  2116                           ;main.c: 365:          shape.lux = 0;
  2117  000416  0E00               	movlw	0
  2118  000418  6E02               	movwf	(_shape+1)^0,c
  2119  00041A  0E00               	movlw	0
  2120  00041C  6E01               	movwf	_shape^0,c
  2121                           
  2122                           ;main.c: 366:      }
  2123  00041E  D046               	goto	l271
  2124  000420                     l1741:
  2125  000420  0419               	decf	_RotationOrder^0,w,c
  2126  000422  101A               	iorwf	(_RotationOrder+1)^0,w,c
  2127  000424  A4D8               	btfss	status,2,c
  2128  000426  D013               	goto	l1751
  2129                           
  2130                           ;main.c: 368:          shape.lux = shape.rux - 1;
  2131  000428  0EFF               	movlw	255
  2132  00042A  2403               	addwf	(_shape+2)^0,w,c
  2133  00042C  6E01               	movwf	_shape^0,c
  2134  00042E  0EFF               	movlw	255
  2135  000430  2004               	addwfc	(_shape+3)^0,w,c
  2136  000432  6E02               	movwf	(_shape+1)^0,c
  2137                           
  2138                           ;main.c: 369:          shape.luy = shape.ruy;
  2139  000434  C00B  F009         	movff	_shape+10,_shape+8
  2140  000438  C00C  F00A         	movff	_shape+11,_shape+9
  2141                           
  2142                           ;main.c: 370:          shape.rux = 0;
  2143  00043C  0E00               	movlw	0
  2144  00043E  6E04               	movwf	(_shape+3)^0,c
  2145  000440  0E00               	movlw	0
  2146  000442  6E03               	movwf	(_shape+2)^0,c
  2147                           
  2148                           ;main.c: 371:          shape.ruy = 0;
  2149  000444  0E00               	movlw	0
  2150  000446  6E0C               	movwf	(_shape+11)^0,c
  2151  000448  0E00               	movlw	0
  2152  00044A  6E0B               	movwf	(_shape+10)^0,c
  2153                           
  2154                           ;main.c: 372:      }
  2155  00044C  D02F               	goto	l271
  2156  00044E                     l1751:
  2157  00044E  0E02               	movlw	2
  2158  000450  1819               	xorwf	_RotationOrder^0,w,c
  2159  000452  101A               	iorwf	(_RotationOrder+1)^0,w,c
  2160  000454  A4D8               	btfss	status,2,c
  2161  000456  D013               	goto	l1761
  2162                           
  2163                           ;main.c: 374:          shape.ruy = shape.rly-1;
  2164  000458  0EFF               	movlw	255
  2165  00045A  240F               	addwf	(_shape+14)^0,w,c
  2166  00045C  6E0B               	movwf	(_shape+10)^0,c
  2167  00045E  0EFF               	movlw	255
  2168  000460  2010               	addwfc	(_shape+15)^0,w,c
  2169  000462  6E0C               	movwf	(_shape+11)^0,c
  2170                           
  2171                           ;main.c: 375:          shape.rux = shape.rlx;
  2172  000464  C007  F003         	movff	_shape+6,_shape+2
  2173  000468  C008  F004         	movff	_shape+7,_shape+3
  2174                           
  2175                           ;main.c: 376:          shape.rly = 0;
  2176  00046C  0E00               	movlw	0
  2177  00046E  6E10               	movwf	(_shape+15)^0,c
  2178  000470  0E00               	movlw	0
  2179  000472  6E0F               	movwf	(_shape+14)^0,c
  2180                           
  2181                           ;main.c: 377:          shape.rlx = 0;
  2182  000474  0E00               	movlw	0
  2183  000476  6E08               	movwf	(_shape+7)^0,c
  2184  000478  0E00               	movlw	0
  2185  00047A  6E07               	movwf	(_shape+6)^0,c
  2186                           
  2187                           ;main.c: 378:      }
  2188  00047C  D017               	goto	l271
  2189  00047E                     l1761:
  2190  00047E  0E03               	movlw	3
  2191  000480  1819               	xorwf	_RotationOrder^0,w,c
  2192  000482  101A               	iorwf	(_RotationOrder+1)^0,w,c
  2193  000484  A4D8               	btfss	status,2,c
  2194  000486  D012               	goto	l271
  2195                           
  2196                           ;main.c: 380:          shape.rly = shape.lly;
  2197  000488  C00D  F00F         	movff	_shape+12,_shape+14
  2198  00048C  C00E  F010         	movff	_shape+13,_shape+15
  2199                           
  2200                           ;main.c: 381:          shape.rlx = shape.llx + 1;
  2201  000490  0E01               	movlw	1
  2202  000492  2405               	addwf	(_shape+4)^0,w,c
  2203  000494  6E07               	movwf	(_shape+6)^0,c
  2204  000496  0E00               	movlw	0
  2205  000498  2006               	addwfc	(_shape+5)^0,w,c
  2206  00049A  6E08               	movwf	(_shape+7)^0,c
  2207                           
  2208                           ;main.c: 382:          shape.llx = 0;
  2209  00049C  0E00               	movlw	0
  2210  00049E  6E06               	movwf	(_shape+5)^0,c
  2211  0004A0  0E00               	movlw	0
  2212  0004A2  6E05               	movwf	(_shape+4)^0,c
  2213                           
  2214                           ;main.c: 383:          shape.lly = 0;
  2215  0004A4  0E00               	movlw	0
  2216  0004A6  6E0E               	movwf	(_shape+13)^0,c
  2217  0004A8  0E00               	movlw	0
  2218  0004AA  6E0D               	movwf	(_shape+12)^0,c
  2219  0004AC                     l271:
  2220                           
  2221                           ;main.c: 387:      rotate = 0;
  2222  0004AC  0E00               	movlw	0
  2223  0004AE  6E3C               	movwf	(_rotate+1)^0,c	;volatile
  2224  0004B0  0E00               	movlw	0
  2225  0004B2  6E3B               	movwf	_rotate^0,c	;volatile
  2226                           
  2227                           ;main.c: 388:      RotationOrder = (RotationOrder + 1) % 4;
  2228  0004B4  0E01               	movlw	1
  2229  0004B6  2419               	addwf	_RotationOrder^0,w,c
  2230  0004B8  6E4D               	movwf	??_Rotate^0,c
  2231  0004BA  0E00               	movlw	0
  2232  0004BC  201A               	addwfc	(_RotationOrder+1)^0,w,c
  2233  0004BE  6E4E               	movwf	(??_Rotate+1)^0,c
  2234  0004C0  0E03               	movlw	3
  2235  0004C2  144D               	andwf	??_Rotate^0,w,c
  2236  0004C4  6E19               	movwf	_RotationOrder^0,c
  2237  0004C6  6A1A               	clrf	(_RotationOrder+1)^0,c
  2238  0004C8  0012               	return		;funcret
  2239  0004CA                     __end_of_Rotate:
  2240                           	callstack 0
  2241                           
  2242 ;; *************** function _MoveA3 *****************
  2243 ;; Defined at:
  2244 ;;		line 235 in file "main.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		wreg, status,2, status,0
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;Total ram usage:        0 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    4
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_main
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text15
  2273  000FB2                     __ptext15:
  2274                           	callstack 0
  2275  000FB2                     _MoveA3:
  2276                           	callstack 26
  2277                           
  2278                           ;main.c: 237:      if(leftMov){
  2279                           
  2280                           ;incstack = 0
  2281  000FB2  502D               	movf	_leftMov^0,w,c
  2282  000FB4  102E               	iorwf	(_leftMov+1)^0,w,c
  2283  000FB6  B4D8               	btfsc	status,2,c
  2284  000FB8  0012               	return	
  2285                           
  2286                           ;main.c: 238:          if(shape.lux == 1 || shape.llx == 1) return;
  2287  000FBA  0401               	decf	_shape^0,w,c
  2288  000FBC  1002               	iorwf	(_shape+1)^0,w,c
  2289  000FBE  B4D8               	btfsc	status,2,c
  2290  000FC0  0012               	return	
  2291  000FC2  0405               	decf	(_shape+4)^0,w,c
  2292  000FC4  1006               	iorwf	(_shape+5)^0,w,c
  2293  000FC6  B4D8               	btfsc	status,2,c
  2294  000FC8  0012               	return	
  2295                           
  2296                           ;main.c: 239:          if(shape.lux) shape.lux--;
  2297  000FCA  5001               	movf	_shape^0,w,c
  2298  000FCC  1002               	iorwf	(_shape+1)^0,w,c
  2299  000FCE  B4D8               	btfsc	status,2,c
  2300  000FD0  D003               	goto	l1655
  2301  000FD2  0601               	decf	_shape^0,f,c
  2302  000FD4  A0D8               	btfss	status,0,c
  2303  000FD6  0602               	decf	(_shape+1)^0,f,c
  2304  000FD8                     l1655:
  2305                           
  2306                           ;main.c: 240:          if(shape.llx) shape.llx--;
  2307  000FD8  5005               	movf	(_shape+4)^0,w,c
  2308  000FDA  1006               	iorwf	(_shape+5)^0,w,c
  2309  000FDC  B4D8               	btfsc	status,2,c
  2310  000FDE  D003               	goto	l1659
  2311  000FE0  0605               	decf	(_shape+4)^0,f,c
  2312  000FE2  A0D8               	btfss	status,0,c
  2313  000FE4  0606               	decf	(_shape+5)^0,f,c
  2314  000FE6                     l1659:
  2315                           
  2316                           ;main.c: 241:          if(shape.rux) shape.rux--;
  2317  000FE6  5003               	movf	(_shape+2)^0,w,c
  2318  000FE8  1004               	iorwf	(_shape+3)^0,w,c
  2319  000FEA  B4D8               	btfsc	status,2,c
  2320  000FEC  D003               	goto	l1663
  2321  000FEE  0603               	decf	(_shape+2)^0,f,c
  2322  000FF0  A0D8               	btfss	status,0,c
  2323  000FF2  0604               	decf	(_shape+3)^0,f,c
  2324  000FF4                     l1663:
  2325                           
  2326                           ;main.c: 242:          if(shape.rlx) shape.rlx--;
  2327  000FF4  5007               	movf	(_shape+6)^0,w,c
  2328  000FF6  1008               	iorwf	(_shape+7)^0,w,c
  2329  000FF8  B4D8               	btfsc	status,2,c
  2330  000FFA  D003               	goto	l1667
  2331  000FFC  0607               	decf	(_shape+6)^0,f,c
  2332  000FFE  A0D8               	btfss	status,0,c
  2333  001000  0608               	decf	(_shape+7)^0,f,c
  2334  001002                     l1667:
  2335                           
  2336                           ;main.c: 243:          leftMov = 0;
  2337  001002  0E00               	movlw	0
  2338  001004  6E2E               	movwf	(_leftMov+1)^0,c
  2339  001006  0E00               	movlw	0
  2340  001008  6E2D               	movwf	_leftMov^0,c
  2341  00100A  0012               	return		;funcret
  2342  00100C                     __end_of_MoveA3:
  2343                           	callstack 0
  2344                           
  2345 ;; *************** function _MoveA2 *****************
  2346 ;; Defined at:
  2347 ;;		line 209 in file "main.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, status,2, status,0
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2365 ;;Total ram usage:        0 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    4
  2368 ;; This function calls:
  2369 ;;		Nothing
  2370 ;; This function is called by:
  2371 ;;		_main
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text16
  2376  000E7A                     __ptext16:
  2377                           	callstack 0
  2378  000E7A                     _MoveA2:
  2379                           	callstack 26
  2380                           
  2381                           ;main.c: 211:      if(downMov){
  2382                           
  2383                           ;incstack = 0
  2384  000E7A  5027               	movf	_downMov^0,w,c
  2385  000E7C  1028               	iorwf	(_downMov+1)^0,w,c
  2386  000E7E  B4D8               	btfsc	status,2,c
  2387  000E80  0012               	return	
  2388                           
  2389                           ;main.c: 212:          if(shape.luy == 8 || shape.ruy == 8 || shape.lly == 8 || shape.rl
      +                          y == 8) return;
  2390  000E82  0E08               	movlw	8
  2391  000E84  1809               	xorwf	(_shape+8)^0,w,c
  2392  000E86  100A               	iorwf	(_shape+9)^0,w,c
  2393  000E88  B4D8               	btfsc	status,2,c
  2394  000E8A  0012               	return	
  2395  000E8C  0E08               	movlw	8
  2396  000E8E  180B               	xorwf	(_shape+10)^0,w,c
  2397  000E90  100C               	iorwf	(_shape+11)^0,w,c
  2398  000E92  B4D8               	btfsc	status,2,c
  2399  000E94  0012               	return	
  2400  000E96  0E08               	movlw	8
  2401  000E98  180D               	xorwf	(_shape+12)^0,w,c
  2402  000E9A  100E               	iorwf	(_shape+13)^0,w,c
  2403  000E9C  B4D8               	btfsc	status,2,c
  2404  000E9E  0012               	return	
  2405  000EA0  0E08               	movlw	8
  2406  000EA2  180F               	xorwf	(_shape+14)^0,w,c
  2407  000EA4  1010               	iorwf	(_shape+15)^0,w,c
  2408  000EA6  B4D8               	btfsc	status,2,c
  2409  000EA8  0012               	return	
  2410                           
  2411                           ;main.c: 213:           if(shape.luy) shape.luy++;
  2412  000EAA  5009               	movf	(_shape+8)^0,w,c
  2413  000EAC  100A               	iorwf	(_shape+9)^0,w,c
  2414  000EAE  B4D8               	btfsc	status,2,c
  2415  000EB0  D002               	goto	l1607
  2416  000EB2  4A09               	infsnz	(_shape+8)^0,f,c
  2417  000EB4  2A0A               	incf	(_shape+9)^0,f,c
  2418  000EB6                     l1607:
  2419                           
  2420                           ;main.c: 214:          if(shape.lly) shape.lly++;
  2421  000EB6  500D               	movf	(_shape+12)^0,w,c
  2422  000EB8  100E               	iorwf	(_shape+13)^0,w,c
  2423  000EBA  B4D8               	btfsc	status,2,c
  2424  000EBC  D002               	goto	l1611
  2425  000EBE  4A0D               	infsnz	(_shape+12)^0,f,c
  2426  000EC0  2A0E               	incf	(_shape+13)^0,f,c
  2427  000EC2                     l1611:
  2428                           
  2429                           ;main.c: 215:          if(shape.ruy) shape.ruy++;
  2430  000EC2  500B               	movf	(_shape+10)^0,w,c
  2431  000EC4  100C               	iorwf	(_shape+11)^0,w,c
  2432  000EC6  B4D8               	btfsc	status,2,c
  2433  000EC8  D002               	goto	l1615
  2434  000ECA  4A0B               	infsnz	(_shape+10)^0,f,c
  2435  000ECC  2A0C               	incf	(_shape+11)^0,f,c
  2436  000ECE                     l1615:
  2437                           
  2438                           ;main.c: 216:          if(shape.rly) shape.rly++;
  2439  000ECE  500F               	movf	(_shape+14)^0,w,c
  2440  000ED0  1010               	iorwf	(_shape+15)^0,w,c
  2441  000ED2  B4D8               	btfsc	status,2,c
  2442  000ED4  D002               	goto	l1619
  2443  000ED6  4A0F               	infsnz	(_shape+14)^0,f,c
  2444  000ED8  2A10               	incf	(_shape+15)^0,f,c
  2445  000EDA                     l1619:
  2446                           
  2447                           ;main.c: 217:          downMov = 0;
  2448  000EDA  0E00               	movlw	0
  2449  000EDC  6E28               	movwf	(_downMov+1)^0,c
  2450  000EDE  0E00               	movlw	0
  2451  000EE0  6E27               	movwf	_downMov^0,c
  2452  000EE2  0012               	return		;funcret
  2453  000EE4                     __end_of_MoveA2:
  2454                           	callstack 0
  2455                           
  2456 ;; *************** function _MoveA1 *****************
  2457 ;; Defined at:
  2458 ;;		line 222 in file "main.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;		None
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;		None
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  1    wreg      void 
  2465 ;; Registers used:
  2466 ;;		wreg, status,2, status,0
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;Total ram usage:        0 bytes
  2477 ;; Hardware stack levels used:    1
  2478 ;; Hardware stack levels required when called:    4
  2479 ;; This function calls:
  2480 ;;		Nothing
  2481 ;; This function is called by:
  2482 ;;		_main
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text17
  2487  00100C                     __ptext17:
  2488                           	callstack 0
  2489  00100C                     _MoveA1:
  2490                           	callstack 26
  2491                           
  2492                           ;main.c: 224:      if(upMov){
  2493                           
  2494                           ;incstack = 0
  2495  00100C  5029               	movf	_upMov^0,w,c
  2496  00100E  102A               	iorwf	(_upMov+1)^0,w,c
  2497  001010  B4D8               	btfsc	status,2,c
  2498  001012  0012               	return	
  2499                           
  2500                           ;main.c: 225:          if(shape.luy == 1 || shape.ruy == 1) return;
  2501  001014  0409               	decf	(_shape+8)^0,w,c
  2502  001016  100A               	iorwf	(_shape+9)^0,w,c
  2503  001018  B4D8               	btfsc	status,2,c
  2504  00101A  0012               	return	
  2505  00101C  040B               	decf	(_shape+10)^0,w,c
  2506  00101E  100C               	iorwf	(_shape+11)^0,w,c
  2507  001020  B4D8               	btfsc	status,2,c
  2508  001022  0012               	return	
  2509                           
  2510                           ;main.c: 226:          if(shape.luy) shape.luy--;
  2511  001024  5009               	movf	(_shape+8)^0,w,c
  2512  001026  100A               	iorwf	(_shape+9)^0,w,c
  2513  001028  B4D8               	btfsc	status,2,c
  2514  00102A  D003               	goto	l1631
  2515  00102C  0609               	decf	(_shape+8)^0,f,c
  2516  00102E  A0D8               	btfss	status,0,c
  2517  001030  060A               	decf	(_shape+9)^0,f,c
  2518  001032                     l1631:
  2519                           
  2520                           ;main.c: 227:          if(shape.lly) shape.lly--;
  2521  001032  500D               	movf	(_shape+12)^0,w,c
  2522  001034  100E               	iorwf	(_shape+13)^0,w,c
  2523  001036  B4D8               	btfsc	status,2,c
  2524  001038  D003               	goto	l1635
  2525  00103A  060D               	decf	(_shape+12)^0,f,c
  2526  00103C  A0D8               	btfss	status,0,c
  2527  00103E  060E               	decf	(_shape+13)^0,f,c
  2528  001040                     l1635:
  2529                           
  2530                           ;main.c: 228:          if(shape.ruy) shape.ruy--;
  2531  001040  500B               	movf	(_shape+10)^0,w,c
  2532  001042  100C               	iorwf	(_shape+11)^0,w,c
  2533  001044  B4D8               	btfsc	status,2,c
  2534  001046  D003               	goto	l1639
  2535  001048  060B               	decf	(_shape+10)^0,f,c
  2536  00104A  A0D8               	btfss	status,0,c
  2537  00104C  060C               	decf	(_shape+11)^0,f,c
  2538  00104E                     l1639:
  2539                           
  2540                           ;main.c: 229:          if(shape.rly) shape.rly--;
  2541  00104E  500F               	movf	(_shape+14)^0,w,c
  2542  001050  1010               	iorwf	(_shape+15)^0,w,c
  2543  001052  B4D8               	btfsc	status,2,c
  2544  001054  D003               	goto	l1643
  2545  001056  060F               	decf	(_shape+14)^0,f,c
  2546  001058  A0D8               	btfss	status,0,c
  2547  00105A  0610               	decf	(_shape+15)^0,f,c
  2548  00105C                     l1643:
  2549                           
  2550                           ;main.c: 230:          upMov = 0;
  2551  00105C  0E00               	movlw	0
  2552  00105E  6E2A               	movwf	(_upMov+1)^0,c
  2553  001060  0E00               	movlw	0
  2554  001062  6E29               	movwf	_upMov^0,c
  2555  001064  0012               	return		;funcret
  2556  001066                     __end_of_MoveA1:
  2557                           	callstack 0
  2558                           
  2559 ;; *************** function _MoveA0 *****************
  2560 ;; Defined at:
  2561 ;;		line 193 in file "main.c"
  2562 ;; Parameters:    Size  Location     Type
  2563 ;;		None
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;		None
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  1    wreg      void 
  2568 ;; Registers used:
  2569 ;;		wreg, status,2, status,0
  2570 ;; Tracked objects:
  2571 ;;		On entry : 0/0
  2572 ;;		On exit  : 0/0
  2573 ;;		Unchanged: 0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2579 ;;Total ram usage:        0 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    4
  2582 ;; This function calls:
  2583 ;;		Nothing
  2584 ;; This function is called by:
  2585 ;;		_main
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	text18
  2590  000EE4                     __ptext18:
  2591                           	callstack 0
  2592  000EE4                     _MoveA0:
  2593                           	callstack 26
  2594                           
  2595                           ;main.c: 197:      if(rightMov){
  2596                           
  2597                           ;incstack = 0
  2598  000EE4  502B               	movf	_rightMov^0,w,c
  2599  000EE6  102C               	iorwf	(_rightMov+1)^0,w,c
  2600  000EE8  B4D8               	btfsc	status,2,c
  2601  000EEA  0012               	return	
  2602                           
  2603                           ;main.c: 198:          if(shape.lux == 4 || shape.llx == 4 || shape.rlx == 4 || shape.ru
      +                          x == 4) return;
  2604  000EEC  0E04               	movlw	4
  2605  000EEE  1801               	xorwf	_shape^0,w,c
  2606  000EF0  1002               	iorwf	(_shape+1)^0,w,c
  2607  000EF2  B4D8               	btfsc	status,2,c
  2608  000EF4  0012               	return	
  2609  000EF6  0E04               	movlw	4
  2610  000EF8  1805               	xorwf	(_shape+4)^0,w,c
  2611  000EFA  1006               	iorwf	(_shape+5)^0,w,c
  2612  000EFC  B4D8               	btfsc	status,2,c
  2613  000EFE  0012               	return	
  2614  000F00  0E04               	movlw	4
  2615  000F02  1807               	xorwf	(_shape+6)^0,w,c
  2616  000F04  1008               	iorwf	(_shape+7)^0,w,c
  2617  000F06  B4D8               	btfsc	status,2,c
  2618  000F08  0012               	return	
  2619  000F0A  0E04               	movlw	4
  2620  000F0C  1803               	xorwf	(_shape+2)^0,w,c
  2621  000F0E  1004               	iorwf	(_shape+3)^0,w,c
  2622  000F10  B4D8               	btfsc	status,2,c
  2623  000F12  0012               	return	
  2624                           
  2625                           ;main.c: 199:          if(shape.lux) shape.lux++;
  2626  000F14  5001               	movf	_shape^0,w,c
  2627  000F16  1002               	iorwf	(_shape+1)^0,w,c
  2628  000F18  B4D8               	btfsc	status,2,c
  2629  000F1A  D002               	goto	l1579
  2630  000F1C  4A01               	infsnz	_shape^0,f,c
  2631  000F1E  2A02               	incf	(_shape+1)^0,f,c
  2632  000F20                     l1579:
  2633                           
  2634                           ;main.c: 200:          if(shape.llx) shape.llx++;
  2635  000F20  5005               	movf	(_shape+4)^0,w,c
  2636  000F22  1006               	iorwf	(_shape+5)^0,w,c
  2637  000F24  B4D8               	btfsc	status,2,c
  2638  000F26  D002               	goto	l1583
  2639  000F28  4A05               	infsnz	(_shape+4)^0,f,c
  2640  000F2A  2A06               	incf	(_shape+5)^0,f,c
  2641  000F2C                     l1583:
  2642                           
  2643                           ;main.c: 201:          if(shape.rux) shape.rux++;
  2644  000F2C  5003               	movf	(_shape+2)^0,w,c
  2645  000F2E  1004               	iorwf	(_shape+3)^0,w,c
  2646  000F30  B4D8               	btfsc	status,2,c
  2647  000F32  D002               	goto	l1587
  2648  000F34  4A03               	infsnz	(_shape+2)^0,f,c
  2649  000F36  2A04               	incf	(_shape+3)^0,f,c
  2650  000F38                     l1587:
  2651                           
  2652                           ;main.c: 202:          if(shape.rlx) shape.rlx++;
  2653  000F38  5007               	movf	(_shape+6)^0,w,c
  2654  000F3A  1008               	iorwf	(_shape+7)^0,w,c
  2655  000F3C  B4D8               	btfsc	status,2,c
  2656  000F3E  D002               	goto	l1591
  2657  000F40  4A07               	infsnz	(_shape+6)^0,f,c
  2658  000F42  2A08               	incf	(_shape+7)^0,f,c
  2659  000F44                     l1591:
  2660                           
  2661                           ;main.c: 204:          rightMov = 0;
  2662  000F44  0E00               	movlw	0
  2663  000F46  6E2C               	movwf	(_rightMov+1)^0,c
  2664  000F48  0E00               	movlw	0
  2665  000F4A  6E2B               	movwf	_rightMov^0,c
  2666  000F4C  0012               	return		;funcret
  2667  000F4E                     __end_of_MoveA0:
  2668                           	callstack 0
  2669                           
  2670 ;; *************** function _MovA3 *****************
  2671 ;; Defined at:
  2672 ;;		line 612 in file "main.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;		None
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2690 ;;Total ram usage:        2 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    4
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_main
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text19
  2701  0004CA                     __ptext19:
  2702                           	callstack 0
  2703  0004CA                     _MovA3:
  2704                           	callstack 26
  2705                           
  2706                           ;main.c: 613:     switch(stateA3){
  2707                           
  2708                           ;incstack = 0
  2709  0004CA  D054               	goto	l2511
  2710  0004CC                     l367:
  2711                           
  2712                           ;main.c: 615:             if(PORTA & 0x08){
  2713  0004CC  A680               	btfss	128,3,c	;volatile
  2714  0004CE  0012               	return	
  2715                           
  2716                           ;main.c: 616:                 stateA3 = 1;
  2717  0004D0  0E00               	movlw	0
  2718  0004D2  0100               	movlb	0	; () banked
  2719  0004D4  6F61               	movwf	(_stateA3+1)& (0+255),b
  2720  0004D6  0E01               	movlw	1
  2721  0004D8  6F60               	movwf	_stateA3& (0+255),b
  2722  0004DA  0012               	return	
  2723  0004DC                     l370:
  2724                           
  2725                           ;main.c: 620:             if(PORTA & 0x08){
  2726  0004DC  A680               	btfss	128,3,c	;volatile
  2727  0004DE  D003               	goto	l2493
  2728                           
  2729                           ;main.c: 621:                 countA3++;
  2730  0004E0  4A1B               	infsnz	_countA3^0,f,c
  2731  0004E2  2A1C               	incf	(_countA3+1)^0,f,c
  2732                           
  2733                           ;main.c: 622:             }
  2734  0004E4  D009               	goto	l2495
  2735  0004E6                     l2493:
  2736                           
  2737                           ;main.c: 624:                 countA3 = 0;
  2738  0004E6  0E00               	movlw	0
  2739  0004E8  6E1C               	movwf	(_countA3+1)^0,c
  2740  0004EA  0E00               	movlw	0
  2741  0004EC  6E1B               	movwf	_countA3^0,c
  2742                           
  2743                           ;main.c: 625:                 stateA3 = 0;
  2744  0004EE  0E00               	movlw	0
  2745  0004F0  0100               	movlb	0	; () banked
  2746  0004F2  6F61               	movwf	(_stateA3+1)& (0+255),b
  2747  0004F4  0E00               	movlw	0
  2748  0004F6  6F60               	movwf	_stateA3& (0+255),b
  2749  0004F8                     l2495:
  2750                           
  2751                           ;main.c: 627:             if(countA3 > 150){
  2752  0004F8  BE1C               	btfsc	(_countA3+1)^0,7,c
  2753  0004FA  0012               	return	
  2754  0004FC  501C               	movf	(_countA3+1)^0,w,c
  2755  0004FE  E104               	bnz	u2560
  2756  000500  0E97               	movlw	151
  2757  000502  5C1B               	subwf	_countA3^0,w,c
  2758  000504  A0D8               	btfss	status,0,c
  2759  000506  0012               	return	
  2760  000508                     u2560:
  2761                           
  2762                           ;main.c: 628:                 stateA3 = 2;
  2763  000508  0E00               	movlw	0
  2764  00050A  0100               	movlb	0	; () banked
  2765  00050C  6F61               	movwf	(_stateA3+1)& (0+255),b
  2766  00050E  0E02               	movlw	2
  2767  000510  6F60               	movwf	_stateA3& (0+255),b
  2768                           
  2769                           ;main.c: 629:                 countA3 = 0;
  2770  000512  0E00               	movlw	0
  2771  000514  6E1C               	movwf	(_countA3+1)^0,c
  2772  000516  0E00               	movlw	0
  2773  000518  6E1B               	movwf	_countA3^0,c
  2774                           
  2775                           ;main.c: 630:                 leftMov = 1;
  2776  00051A  0E00               	movlw	0
  2777  00051C  6E2E               	movwf	(_leftMov+1)^0,c
  2778  00051E  0E01               	movlw	1
  2779  000520  6E2D               	movwf	_leftMov^0,c
  2780  000522  0012               	return	
  2781  000524                     l374:
  2782                           
  2783                           ;main.c: 634:             if(!(PORTA & 0x08)){
  2784  000524  B680               	btfsc	128,3,c	;volatile
  2785  000526  0012               	return	
  2786                           
  2787                           ;main.c: 635:                 stateA3 = 3;
  2788  000528  0E00               	movlw	0
  2789  00052A  0100               	movlb	0	; () banked
  2790  00052C  6F61               	movwf	(_stateA3+1)& (0+255),b
  2791  00052E  0E03               	movlw	3
  2792  000530  6F60               	movwf	_stateA3& (0+255),b
  2793  000532  0012               	return	
  2794  000534                     l376:
  2795                           
  2796                           ;main.c: 639:             if(!(PORTA & 0x08)){
  2797  000534  B680               	btfsc	128,3,c	;volatile
  2798  000536  D003               	goto	l2503
  2799                           
  2800                           ;main.c: 640:                 countA3++;
  2801  000538  4A1B               	infsnz	_countA3^0,f,c
  2802  00053A  2A1C               	incf	(_countA3+1)^0,f,c
  2803                           
  2804                           ;main.c: 641:             }
  2805  00053C  D009               	goto	l2505
  2806  00053E                     l2503:
  2807                           
  2808                           ;main.c: 643:                 countA3 = 0;
  2809  00053E  0E00               	movlw	0
  2810  000540  6E1C               	movwf	(_countA3+1)^0,c
  2811  000542  0E00               	movlw	0
  2812  000544  6E1B               	movwf	_countA3^0,c
  2813                           
  2814                           ;main.c: 644:                 stateA3 = 2;
  2815  000546  0E00               	movlw	0
  2816  000548  0100               	movlb	0	; () banked
  2817  00054A  6F61               	movwf	(_stateA3+1)& (0+255),b
  2818  00054C  0E02               	movlw	2
  2819  00054E  6F60               	movwf	_stateA3& (0+255),b
  2820  000550                     l2505:
  2821                           
  2822                           ;main.c: 646:             if(countA3 > 150){
  2823  000550  BE1C               	btfsc	(_countA3+1)^0,7,c
  2824  000552  0012               	return	
  2825  000554  501C               	movf	(_countA3+1)^0,w,c
  2826  000556  E104               	bnz	u2590
  2827  000558  0E97               	movlw	151
  2828  00055A  5C1B               	subwf	_countA3^0,w,c
  2829  00055C  A0D8               	btfss	status,0,c
  2830  00055E  0012               	return	
  2831  000560                     u2590:
  2832                           
  2833                           ;main.c: 647:                 stateA3 = 0;
  2834  000560  0E00               	movlw	0
  2835  000562  0100               	movlb	0	; () banked
  2836  000564  6F61               	movwf	(_stateA3+1)& (0+255),b
  2837  000566  0E00               	movlw	0
  2838  000568  6F60               	movwf	_stateA3& (0+255),b
  2839                           
  2840                           ;main.c: 648:                 countA3 = 0;
  2841  00056A  0E00               	movlw	0
  2842  00056C  6E1C               	movwf	(_countA3+1)^0,c
  2843  00056E  0E00               	movlw	0
  2844  000570  6E1B               	movwf	_countA3^0,c
  2845  000572  0012               	return	
  2846  000574                     l2511:
  2847  000574  C060  F04D         	movff	_stateA3,??_MovA3
  2848  000578  C061  F04E         	movff	_stateA3+1,??_MovA3+1
  2849                           
  2850                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2851                           ; Switch size 1, requested type "simple"
  2852                           ; Number of cases is 1, Range of values is 0 to 0
  2853                           ; switch strategies available:
  2854                           ; Name         Instructions Cycles
  2855                           ; simple_byte            4     3 (average)
  2856                           ;	Chosen strategy is simple_byte
  2857  00057C  504E               	movf	(??_MovA3+1)^0,w,c
  2858  00057E  0A00               	xorlw	0	; case 0
  2859  000580  A4D8               	btfss	status,2,c
  2860  000582  0012               	return	
  2861                           
  2862                           ; Switch size 1, requested type "simple"
  2863                           ; Number of cases is 4, Range of values is 0 to 3
  2864                           ; switch strategies available:
  2865                           ; Name         Instructions Cycles
  2866                           ; simple_byte           13     7 (average)
  2867                           ;	Chosen strategy is simple_byte
  2868  000584  504D               	movf	??_MovA3^0,w,c
  2869  000586  0A00               	xorlw	0	; case 0
  2870  000588  B4D8               	btfsc	status,2,c
  2871  00058A  D7A0               	goto	l367
  2872  00058C  0A01               	xorlw	1	; case 1
  2873  00058E  B4D8               	btfsc	status,2,c
  2874  000590  D7A5               	goto	l370
  2875  000592  0A03               	xorlw	3	; case 2
  2876  000594  B4D8               	btfsc	status,2,c
  2877  000596  D7C6               	goto	l374
  2878  000598  0A01               	xorlw	1	; case 3
  2879  00059A  A4D8               	btfss	status,2,c
  2880  00059C  0012               	return	
  2881  00059E  D7CA               	goto	l376
  2882  0005A0                     __end_of_MovA3:
  2883                           	callstack 0
  2884                           
  2885 ;; *************** function _MovA2 *****************
  2886 ;; Defined at:
  2887 ;;		line 570 in file "main.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;		None
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;		None
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  1    wreg      void 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;Total ram usage:        2 bytes
  2906 ;; Hardware stack levels used:    1
  2907 ;; Hardware stack levels required when called:    4
  2908 ;; This function calls:
  2909 ;;		Nothing
  2910 ;; This function is called by:
  2911 ;;		_main
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text20
  2916  0005A0                     __ptext20:
  2917                           	callstack 0
  2918  0005A0                     _MovA2:
  2919                           	callstack 26
  2920                           
  2921                           ;main.c: 571:     switch(stateA2){
  2922                           
  2923                           ;incstack = 0
  2924  0005A0  D054               	goto	l2481
  2925  0005A2                     l350:
  2926                           
  2927                           ;main.c: 573:             if(PORTA & 0x04){
  2928  0005A2  A480               	btfss	128,2,c	;volatile
  2929  0005A4  0012               	return	
  2930                           
  2931                           ;main.c: 574:                 stateA2 = 1;
  2932  0005A6  0E00               	movlw	0
  2933  0005A8  0100               	movlb	0	; () banked
  2934  0005AA  6F63               	movwf	(_stateA2+1)& (0+255),b
  2935  0005AC  0E01               	movlw	1
  2936  0005AE  6F62               	movwf	_stateA2& (0+255),b
  2937  0005B0  0012               	return	
  2938  0005B2                     l353:
  2939                           
  2940                           ;main.c: 578:             if(PORTA & 0x04){
  2941  0005B2  A480               	btfss	128,2,c	;volatile
  2942  0005B4  D003               	goto	l2463
  2943                           
  2944                           ;main.c: 579:                 countA2++;
  2945  0005B6  4A1D               	infsnz	_countA2^0,f,c
  2946  0005B8  2A1E               	incf	(_countA2+1)^0,f,c
  2947                           
  2948                           ;main.c: 580:             }
  2949  0005BA  D009               	goto	l2465
  2950  0005BC                     l2463:
  2951                           
  2952                           ;main.c: 582:                 countA2 = 0;
  2953  0005BC  0E00               	movlw	0
  2954  0005BE  6E1E               	movwf	(_countA2+1)^0,c
  2955  0005C0  0E00               	movlw	0
  2956  0005C2  6E1D               	movwf	_countA2^0,c
  2957                           
  2958                           ;main.c: 583:                 stateA2 = 0;
  2959  0005C4  0E00               	movlw	0
  2960  0005C6  0100               	movlb	0	; () banked
  2961  0005C8  6F63               	movwf	(_stateA2+1)& (0+255),b
  2962  0005CA  0E00               	movlw	0
  2963  0005CC  6F62               	movwf	_stateA2& (0+255),b
  2964  0005CE                     l2465:
  2965                           
  2966                           ;main.c: 585:             if(countA2 > 150){
  2967  0005CE  BE1E               	btfsc	(_countA2+1)^0,7,c
  2968  0005D0  0012               	return	
  2969  0005D2  501E               	movf	(_countA2+1)^0,w,c
  2970  0005D4  E104               	bnz	u2500
  2971  0005D6  0E97               	movlw	151
  2972  0005D8  5C1D               	subwf	_countA2^0,w,c
  2973  0005DA  A0D8               	btfss	status,0,c
  2974  0005DC  0012               	return	
  2975  0005DE                     u2500:
  2976                           
  2977                           ;main.c: 586:                 stateA2 = 2;
  2978  0005DE  0E00               	movlw	0
  2979  0005E0  0100               	movlb	0	; () banked
  2980  0005E2  6F63               	movwf	(_stateA2+1)& (0+255),b
  2981  0005E4  0E02               	movlw	2
  2982  0005E6  6F62               	movwf	_stateA2& (0+255),b
  2983                           
  2984                           ;main.c: 587:                 countA2 = 0;
  2985  0005E8  0E00               	movlw	0
  2986  0005EA  6E1E               	movwf	(_countA2+1)^0,c
  2987  0005EC  0E00               	movlw	0
  2988  0005EE  6E1D               	movwf	_countA2^0,c
  2989                           
  2990                           ;main.c: 588:                 downMov = 1;
  2991  0005F0  0E00               	movlw	0
  2992  0005F2  6E28               	movwf	(_downMov+1)^0,c
  2993  0005F4  0E01               	movlw	1
  2994  0005F6  6E27               	movwf	_downMov^0,c
  2995  0005F8  0012               	return	
  2996  0005FA                     l357:
  2997                           
  2998                           ;main.c: 592:             if(!(PORTA & 0x04)){
  2999  0005FA  B480               	btfsc	128,2,c	;volatile
  3000  0005FC  0012               	return	
  3001                           
  3002                           ;main.c: 593:                 stateA2 = 3;
  3003  0005FE  0E00               	movlw	0
  3004  000600  0100               	movlb	0	; () banked
  3005  000602  6F63               	movwf	(_stateA2+1)& (0+255),b
  3006  000604  0E03               	movlw	3
  3007  000606  6F62               	movwf	_stateA2& (0+255),b
  3008  000608  0012               	return	
  3009  00060A                     l359:
  3010                           
  3011                           ;main.c: 597:             if(!(PORTA & 0x04)){
  3012  00060A  B480               	btfsc	128,2,c	;volatile
  3013  00060C  D003               	goto	l2473
  3014                           
  3015                           ;main.c: 598:                 countA2++;
  3016  00060E  4A1D               	infsnz	_countA2^0,f,c
  3017  000610  2A1E               	incf	(_countA2+1)^0,f,c
  3018                           
  3019                           ;main.c: 599:             }
  3020  000612  D009               	goto	l2475
  3021  000614                     l2473:
  3022                           
  3023                           ;main.c: 601:                 countA2 = 0;
  3024  000614  0E00               	movlw	0
  3025  000616  6E1E               	movwf	(_countA2+1)^0,c
  3026  000618  0E00               	movlw	0
  3027  00061A  6E1D               	movwf	_countA2^0,c
  3028                           
  3029                           ;main.c: 602:                 stateA2 = 2;
  3030  00061C  0E00               	movlw	0
  3031  00061E  0100               	movlb	0	; () banked
  3032  000620  6F63               	movwf	(_stateA2+1)& (0+255),b
  3033  000622  0E02               	movlw	2
  3034  000624  6F62               	movwf	_stateA2& (0+255),b
  3035  000626                     l2475:
  3036                           
  3037                           ;main.c: 604:             if(countA2 > 150){
  3038  000626  BE1E               	btfsc	(_countA2+1)^0,7,c
  3039  000628  0012               	return	
  3040  00062A  501E               	movf	(_countA2+1)^0,w,c
  3041  00062C  E104               	bnz	u2530
  3042  00062E  0E97               	movlw	151
  3043  000630  5C1D               	subwf	_countA2^0,w,c
  3044  000632  A0D8               	btfss	status,0,c
  3045  000634  0012               	return	
  3046  000636                     u2530:
  3047                           
  3048                           ;main.c: 605:                 stateA2 = 0;
  3049  000636  0E00               	movlw	0
  3050  000638  0100               	movlb	0	; () banked
  3051  00063A  6F63               	movwf	(_stateA2+1)& (0+255),b
  3052  00063C  0E00               	movlw	0
  3053  00063E  6F62               	movwf	_stateA2& (0+255),b
  3054                           
  3055                           ;main.c: 606:                 countA2 = 0;
  3056  000640  0E00               	movlw	0
  3057  000642  6E1E               	movwf	(_countA2+1)^0,c
  3058  000644  0E00               	movlw	0
  3059  000646  6E1D               	movwf	_countA2^0,c
  3060  000648  0012               	return	
  3061  00064A                     l2481:
  3062  00064A  C062  F04D         	movff	_stateA2,??_MovA2
  3063  00064E  C063  F04E         	movff	_stateA2+1,??_MovA2+1
  3064                           
  3065                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3066                           ; Switch size 1, requested type "simple"
  3067                           ; Number of cases is 1, Range of values is 0 to 0
  3068                           ; switch strategies available:
  3069                           ; Name         Instructions Cycles
  3070                           ; simple_byte            4     3 (average)
  3071                           ;	Chosen strategy is simple_byte
  3072  000652  504E               	movf	(??_MovA2+1)^0,w,c
  3073  000654  0A00               	xorlw	0	; case 0
  3074  000656  A4D8               	btfss	status,2,c
  3075  000658  0012               	return	
  3076                           
  3077                           ; Switch size 1, requested type "simple"
  3078                           ; Number of cases is 4, Range of values is 0 to 3
  3079                           ; switch strategies available:
  3080                           ; Name         Instructions Cycles
  3081                           ; simple_byte           13     7 (average)
  3082                           ;	Chosen strategy is simple_byte
  3083  00065A  504D               	movf	??_MovA2^0,w,c
  3084  00065C  0A00               	xorlw	0	; case 0
  3085  00065E  B4D8               	btfsc	status,2,c
  3086  000660  D7A0               	goto	l350
  3087  000662  0A01               	xorlw	1	; case 1
  3088  000664  B4D8               	btfsc	status,2,c
  3089  000666  D7A5               	goto	l353
  3090  000668  0A03               	xorlw	3	; case 2
  3091  00066A  B4D8               	btfsc	status,2,c
  3092  00066C  D7C6               	goto	l357
  3093  00066E  0A01               	xorlw	1	; case 3
  3094  000670  A4D8               	btfss	status,2,c
  3095  000672  0012               	return	
  3096  000674  D7CA               	goto	l359
  3097  000676                     __end_of_MovA2:
  3098                           	callstack 0
  3099                           
  3100 ;; *************** function _MovA1 *****************
  3101 ;; Defined at:
  3102 ;;		line 527 in file "main.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;		None
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      void 
  3109 ;; Registers used:
  3110 ;;		wreg, status,2, status,0
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;Total ram usage:        2 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    4
  3123 ;; This function calls:
  3124 ;;		Nothing
  3125 ;; This function is called by:
  3126 ;;		_main
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text21
  3131  000676                     __ptext21:
  3132                           	callstack 0
  3133  000676                     _MovA1:
  3134                           	callstack 26
  3135                           
  3136                           ;main.c: 528:     switch(stateA1){
  3137                           
  3138                           ;incstack = 0
  3139  000676  D054               	goto	l2451
  3140  000678                     l333:
  3141                           
  3142                           ;main.c: 530:             if(PORTA & 0x02){
  3143  000678  A280               	btfss	128,1,c	;volatile
  3144  00067A  0012               	return	
  3145                           
  3146                           ;main.c: 531:                 stateA1 = 1;
  3147  00067C  0E00               	movlw	0
  3148  00067E  0100               	movlb	0	; () banked
  3149  000680  6F65               	movwf	(_stateA1+1)& (0+255),b
  3150  000682  0E01               	movlw	1
  3151  000684  6F64               	movwf	_stateA1& (0+255),b
  3152  000686  0012               	return	
  3153  000688                     l336:
  3154                           
  3155                           ;main.c: 535:             if(PORTA & 0x02){
  3156  000688  A280               	btfss	128,1,c	;volatile
  3157  00068A  D003               	goto	l2433
  3158                           
  3159                           ;main.c: 536:                 countA1++;
  3160  00068C  4A1F               	infsnz	_countA1^0,f,c
  3161  00068E  2A20               	incf	(_countA1+1)^0,f,c
  3162                           
  3163                           ;main.c: 537:             }
  3164  000690  D009               	goto	l2435
  3165  000692                     l2433:
  3166                           
  3167                           ;main.c: 539:                 countA1 = 0;
  3168  000692  0E00               	movlw	0
  3169  000694  6E20               	movwf	(_countA1+1)^0,c
  3170  000696  0E00               	movlw	0
  3171  000698  6E1F               	movwf	_countA1^0,c
  3172                           
  3173                           ;main.c: 540:                 stateA1 = 0;
  3174  00069A  0E00               	movlw	0
  3175  00069C  0100               	movlb	0	; () banked
  3176  00069E  6F65               	movwf	(_stateA1+1)& (0+255),b
  3177  0006A0  0E00               	movlw	0
  3178  0006A2  6F64               	movwf	_stateA1& (0+255),b
  3179  0006A4                     l2435:
  3180                           
  3181                           ;main.c: 542:             if(countA1 > 150){
  3182  0006A4  BE20               	btfsc	(_countA1+1)^0,7,c
  3183  0006A6  0012               	return	
  3184  0006A8  5020               	movf	(_countA1+1)^0,w,c
  3185  0006AA  E104               	bnz	u2440
  3186  0006AC  0E97               	movlw	151
  3187  0006AE  5C1F               	subwf	_countA1^0,w,c
  3188  0006B0  A0D8               	btfss	status,0,c
  3189  0006B2  0012               	return	
  3190  0006B4                     u2440:
  3191                           
  3192                           ;main.c: 543:                 stateA1 = 2;
  3193  0006B4  0E00               	movlw	0
  3194  0006B6  0100               	movlb	0	; () banked
  3195  0006B8  6F65               	movwf	(_stateA1+1)& (0+255),b
  3196  0006BA  0E02               	movlw	2
  3197  0006BC  6F64               	movwf	_stateA1& (0+255),b
  3198                           
  3199                           ;main.c: 544:                 countA1 = 0;
  3200  0006BE  0E00               	movlw	0
  3201  0006C0  6E20               	movwf	(_countA1+1)^0,c
  3202  0006C2  0E00               	movlw	0
  3203  0006C4  6E1F               	movwf	_countA1^0,c
  3204                           
  3205                           ;main.c: 545:                 upMov = 1;
  3206  0006C6  0E00               	movlw	0
  3207  0006C8  6E2A               	movwf	(_upMov+1)^0,c
  3208  0006CA  0E01               	movlw	1
  3209  0006CC  6E29               	movwf	_upMov^0,c
  3210  0006CE  0012               	return	
  3211  0006D0                     l340:
  3212                           
  3213                           ;main.c: 549:             if(!(PORTA & 0x02)){
  3214  0006D0  B280               	btfsc	128,1,c	;volatile
  3215  0006D2  0012               	return	
  3216                           
  3217                           ;main.c: 550:                 stateA1 = 3;
  3218  0006D4  0E00               	movlw	0
  3219  0006D6  0100               	movlb	0	; () banked
  3220  0006D8  6F65               	movwf	(_stateA1+1)& (0+255),b
  3221  0006DA  0E03               	movlw	3
  3222  0006DC  6F64               	movwf	_stateA1& (0+255),b
  3223  0006DE  0012               	return	
  3224  0006E0                     l342:
  3225                           
  3226                           ;main.c: 554:             if(!(PORTA & 0x02)){
  3227  0006E0  B280               	btfsc	128,1,c	;volatile
  3228  0006E2  D003               	goto	l2443
  3229                           
  3230                           ;main.c: 555:                 countA1++;
  3231  0006E4  4A1F               	infsnz	_countA1^0,f,c
  3232  0006E6  2A20               	incf	(_countA1+1)^0,f,c
  3233                           
  3234                           ;main.c: 556:             }
  3235  0006E8  D009               	goto	l2445
  3236  0006EA                     l2443:
  3237                           
  3238                           ;main.c: 558:                 countA1 = 0;
  3239  0006EA  0E00               	movlw	0
  3240  0006EC  6E20               	movwf	(_countA1+1)^0,c
  3241  0006EE  0E00               	movlw	0
  3242  0006F0  6E1F               	movwf	_countA1^0,c
  3243                           
  3244                           ;main.c: 559:                 stateA1 = 2;
  3245  0006F2  0E00               	movlw	0
  3246  0006F4  0100               	movlb	0	; () banked
  3247  0006F6  6F65               	movwf	(_stateA1+1)& (0+255),b
  3248  0006F8  0E02               	movlw	2
  3249  0006FA  6F64               	movwf	_stateA1& (0+255),b
  3250  0006FC                     l2445:
  3251                           
  3252                           ;main.c: 561:             if(countA1 > 150){
  3253  0006FC  BE20               	btfsc	(_countA1+1)^0,7,c
  3254  0006FE  0012               	return	
  3255  000700  5020               	movf	(_countA1+1)^0,w,c
  3256  000702  E104               	bnz	u2470
  3257  000704  0E97               	movlw	151
  3258  000706  5C1F               	subwf	_countA1^0,w,c
  3259  000708  A0D8               	btfss	status,0,c
  3260  00070A  0012               	return	
  3261  00070C                     u2470:
  3262                           
  3263                           ;main.c: 562:                 stateA1 = 0;
  3264  00070C  0E00               	movlw	0
  3265  00070E  0100               	movlb	0	; () banked
  3266  000710  6F65               	movwf	(_stateA1+1)& (0+255),b
  3267  000712  0E00               	movlw	0
  3268  000714  6F64               	movwf	_stateA1& (0+255),b
  3269                           
  3270                           ;main.c: 563:                 countA1 = 0;
  3271  000716  0E00               	movlw	0
  3272  000718  6E20               	movwf	(_countA1+1)^0,c
  3273  00071A  0E00               	movlw	0
  3274  00071C  6E1F               	movwf	_countA1^0,c
  3275  00071E  0012               	return	
  3276  000720                     l2451:
  3277  000720  C064  F04D         	movff	_stateA1,??_MovA1
  3278  000724  C065  F04E         	movff	_stateA1+1,??_MovA1+1
  3279                           
  3280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3281                           ; Switch size 1, requested type "simple"
  3282                           ; Number of cases is 1, Range of values is 0 to 0
  3283                           ; switch strategies available:
  3284                           ; Name         Instructions Cycles
  3285                           ; simple_byte            4     3 (average)
  3286                           ;	Chosen strategy is simple_byte
  3287  000728  504E               	movf	(??_MovA1+1)^0,w,c
  3288  00072A  0A00               	xorlw	0	; case 0
  3289  00072C  A4D8               	btfss	status,2,c
  3290  00072E  0012               	return	
  3291                           
  3292                           ; Switch size 1, requested type "simple"
  3293                           ; Number of cases is 4, Range of values is 0 to 3
  3294                           ; switch strategies available:
  3295                           ; Name         Instructions Cycles
  3296                           ; simple_byte           13     7 (average)
  3297                           ;	Chosen strategy is simple_byte
  3298  000730  504D               	movf	??_MovA1^0,w,c
  3299  000732  0A00               	xorlw	0	; case 0
  3300  000734  B4D8               	btfsc	status,2,c
  3301  000736  D7A0               	goto	l333
  3302  000738  0A01               	xorlw	1	; case 1
  3303  00073A  B4D8               	btfsc	status,2,c
  3304  00073C  D7A5               	goto	l336
  3305  00073E  0A03               	xorlw	3	; case 2
  3306  000740  B4D8               	btfsc	status,2,c
  3307  000742  D7C6               	goto	l340
  3308  000744  0A01               	xorlw	1	; case 3
  3309  000746  A4D8               	btfss	status,2,c
  3310  000748  0012               	return	
  3311  00074A  D7CA               	goto	l342
  3312  00074C                     __end_of_MovA1:
  3313                           	callstack 0
  3314                           
  3315 ;; *************** function _MovA0 *****************
  3316 ;; Defined at:
  3317 ;;		line 484 in file "main.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;Total ram usage:        2 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    4
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_main
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           	psect	text22
  3346  000816                     __ptext22:
  3347                           	callstack 0
  3348  000816                     _MovA0:
  3349                           	callstack 26
  3350                           
  3351                           ;main.c: 485:     switch(stateA0){
  3352                           
  3353                           ;incstack = 0
  3354  000816  D04E               	goto	l1801
  3355  000818                     l316:
  3356                           
  3357                           ;main.c: 487:             if(PORTA & 0x01){
  3358  000818  A080               	btfss	128,0,c	;volatile
  3359  00081A  0012               	return	
  3360                           
  3361                           ;main.c: 488:                 stateA0 = 1;
  3362  00081C  0E00               	movlw	0
  3363  00081E  6E22               	movwf	(_stateA0+1)^0,c
  3364  000820  0E01               	movlw	1
  3365  000822  6E21               	movwf	_stateA0^0,c
  3366  000824  0012               	return	
  3367  000826                     l319:
  3368                           
  3369                           ;main.c: 492:             if(PORTA & 0x01){
  3370  000826  A080               	btfss	128,0,c	;volatile
  3371  000828  D003               	goto	l1783
  3372                           
  3373                           ;main.c: 493:                 countA0++;
  3374  00082A  4A23               	infsnz	_countA0^0,f,c
  3375  00082C  2A24               	incf	(_countA0+1)^0,f,c
  3376                           
  3377                           ;main.c: 494:             }
  3378  00082E  D008               	goto	l1785
  3379  000830                     l1783:
  3380                           
  3381                           ;main.c: 496:                 countA0 = 0;
  3382  000830  0E00               	movlw	0
  3383  000832  6E24               	movwf	(_countA0+1)^0,c
  3384  000834  0E00               	movlw	0
  3385  000836  6E23               	movwf	_countA0^0,c
  3386                           
  3387                           ;main.c: 497:                 stateA0 = 0;
  3388  000838  0E00               	movlw	0
  3389  00083A  6E22               	movwf	(_stateA0+1)^0,c
  3390  00083C  0E00               	movlw	0
  3391  00083E  6E21               	movwf	_stateA0^0,c
  3392  000840                     l1785:
  3393                           
  3394                           ;main.c: 499:             if(countA0 > 150){
  3395  000840  BE24               	btfsc	(_countA0+1)^0,7,c
  3396  000842  0012               	return	
  3397  000844  5024               	movf	(_countA0+1)^0,w,c
  3398  000846  E104               	bnz	u1330
  3399  000848  0E97               	movlw	151
  3400  00084A  5C23               	subwf	_countA0^0,w,c
  3401  00084C  A0D8               	btfss	status,0,c
  3402  00084E  0012               	return	
  3403  000850                     u1330:
  3404                           
  3405                           ;main.c: 500:                 stateA0 = 2;
  3406  000850  0E00               	movlw	0
  3407  000852  6E22               	movwf	(_stateA0+1)^0,c
  3408  000854  0E02               	movlw	2
  3409  000856  6E21               	movwf	_stateA0^0,c
  3410                           
  3411                           ;main.c: 501:                 countA0 = 0;
  3412  000858  0E00               	movlw	0
  3413  00085A  6E24               	movwf	(_countA0+1)^0,c
  3414  00085C  0E00               	movlw	0
  3415  00085E  6E23               	movwf	_countA0^0,c
  3416                           
  3417                           ;main.c: 502:                 rightMov = 1;
  3418  000860  0E00               	movlw	0
  3419  000862  6E2C               	movwf	(_rightMov+1)^0,c
  3420  000864  0E01               	movlw	1
  3421  000866  6E2B               	movwf	_rightMov^0,c
  3422  000868  0012               	return	
  3423  00086A                     l323:
  3424                           
  3425                           ;main.c: 506:             if(!(PORTA & 0x01)){
  3426  00086A  B080               	btfsc	128,0,c	;volatile
  3427  00086C  0012               	return	
  3428                           
  3429                           ;main.c: 507:                 stateA0 = 3;
  3430  00086E  0E00               	movlw	0
  3431  000870  6E22               	movwf	(_stateA0+1)^0,c
  3432  000872  0E03               	movlw	3
  3433  000874  6E21               	movwf	_stateA0^0,c
  3434  000876  0012               	return	
  3435  000878                     l325:
  3436                           
  3437                           ;main.c: 511:             if(!(PORTA & 0x01)){
  3438  000878  B080               	btfsc	128,0,c	;volatile
  3439  00087A  D003               	goto	l1793
  3440                           
  3441                           ;main.c: 512:                 countA0++;
  3442  00087C  4A23               	infsnz	_countA0^0,f,c
  3443  00087E  2A24               	incf	(_countA0+1)^0,f,c
  3444                           
  3445                           ;main.c: 513:             }
  3446  000880  D008               	goto	l1795
  3447  000882                     l1793:
  3448                           
  3449                           ;main.c: 515:                 countA0 = 0;
  3450  000882  0E00               	movlw	0
  3451  000884  6E24               	movwf	(_countA0+1)^0,c
  3452  000886  0E00               	movlw	0
  3453  000888  6E23               	movwf	_countA0^0,c
  3454                           
  3455                           ;main.c: 516:                 stateA0 = 2;
  3456  00088A  0E00               	movlw	0
  3457  00088C  6E22               	movwf	(_stateA0+1)^0,c
  3458  00088E  0E02               	movlw	2
  3459  000890  6E21               	movwf	_stateA0^0,c
  3460  000892                     l1795:
  3461                           
  3462                           ;main.c: 518:             if(countA0 > 150){
  3463  000892  BE24               	btfsc	(_countA0+1)^0,7,c
  3464  000894  0012               	return	
  3465  000896  5024               	movf	(_countA0+1)^0,w,c
  3466  000898  E104               	bnz	u1360
  3467  00089A  0E97               	movlw	151
  3468  00089C  5C23               	subwf	_countA0^0,w,c
  3469  00089E  A0D8               	btfss	status,0,c
  3470  0008A0  0012               	return	
  3471  0008A2                     u1360:
  3472                           
  3473                           ;main.c: 519:                 stateA0 = 0;
  3474  0008A2  0E00               	movlw	0
  3475  0008A4  6E22               	movwf	(_stateA0+1)^0,c
  3476  0008A6  0E00               	movlw	0
  3477  0008A8  6E21               	movwf	_stateA0^0,c
  3478                           
  3479                           ;main.c: 520:                 countA0 = 0;
  3480  0008AA  0E00               	movlw	0
  3481  0008AC  6E24               	movwf	(_countA0+1)^0,c
  3482  0008AE  0E00               	movlw	0
  3483  0008B0  6E23               	movwf	_countA0^0,c
  3484  0008B2  0012               	return	
  3485  0008B4                     l1801:
  3486  0008B4  C021  F04D         	movff	_stateA0,??_MovA0
  3487  0008B8  C022  F04E         	movff	_stateA0+1,??_MovA0+1
  3488                           
  3489                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3490                           ; Switch size 1, requested type "simple"
  3491                           ; Number of cases is 1, Range of values is 0 to 0
  3492                           ; switch strategies available:
  3493                           ; Name         Instructions Cycles
  3494                           ; simple_byte            4     3 (average)
  3495                           ;	Chosen strategy is simple_byte
  3496  0008BC  504E               	movf	(??_MovA0+1)^0,w,c
  3497  0008BE  0A00               	xorlw	0	; case 0
  3498  0008C0  A4D8               	btfss	status,2,c
  3499  0008C2  0012               	return	
  3500                           
  3501                           ; Switch size 1, requested type "simple"
  3502                           ; Number of cases is 4, Range of values is 0 to 3
  3503                           ; switch strategies available:
  3504                           ; Name         Instructions Cycles
  3505                           ; simple_byte           13     7 (average)
  3506                           ;	Chosen strategy is simple_byte
  3507  0008C4  504D               	movf	??_MovA0^0,w,c
  3508  0008C6  0A00               	xorlw	0	; case 0
  3509  0008C8  B4D8               	btfsc	status,2,c
  3510  0008CA  D7A6               	goto	l316
  3511  0008CC  0A01               	xorlw	1	; case 1
  3512  0008CE  B4D8               	btfsc	status,2,c
  3513  0008D0  D7AA               	goto	l319
  3514  0008D2  0A03               	xorlw	3	; case 2
  3515  0008D4  B4D8               	btfsc	status,2,c
  3516  0008D6  D7C9               	goto	l323
  3517  0008D8  0A01               	xorlw	1	; case 3
  3518  0008DA  A4D8               	btfss	status,2,c
  3519  0008DC  0012               	return	
  3520  0008DE  D7CC               	goto	l325
  3521  0008E0                     __end_of_MovA0:
  3522                           	callstack 0
  3523                           
  3524 ;; *************** function _Init *****************
  3525 ;; Defined at:
  3526 ;;		line 86 in file "main.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;		None
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;		None
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, status,2
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 3F/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;Total ram usage:        0 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    4
  3547 ;; This function calls:
  3548 ;;		Nothing
  3549 ;; This function is called by:
  3550 ;;		_main
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text23
  3555  0002B4                     __ptext23:
  3556                           	callstack 0
  3557  0002B4                     _Init:
  3558                           	callstack 26
  3559                           
  3560                           ;incstack = 0
  3561  0002B4  0E00               	movlw	0
  3562  0002B6  0100               	movlb	0	; () banked
  3563  0002B8  6F67               	movwf	(_prevA3+1)& (0+255),b
  3564  0002BA  0E00               	movlw	0
  3565  0002BC  6F66               	movwf	_prevA3& (0+255),b
  3566  0002BE  0E00               	movlw	0
  3567  0002C0  6F69               	movwf	(_prevA2+1)& (0+255),b
  3568  0002C2  0E00               	movlw	0
  3569  0002C4  6F68               	movwf	_prevA2& (0+255),b
  3570  0002C6  0E00               	movlw	0
  3571  0002C8  6F6B               	movwf	(_prevA1+1)& (0+255),b
  3572  0002CA  0E00               	movlw	0
  3573  0002CC  6F6A               	movwf	_prevA1& (0+255),b
  3574  0002CE  0E00               	movlw	0
  3575  0002D0  6F6D               	movwf	(_prevA0+1)& (0+255),b
  3576  0002D2  0E00               	movlw	0
  3577  0002D4  6F6C               	movwf	_prevA0& (0+255),b
  3578  0002D6  0E00               	movlw	0
  3579  0002D8  6E1A               	movwf	(_RotationOrder+1)^0,c
  3580  0002DA  0E00               	movlw	0
  3581  0002DC  6E19               	movwf	_RotationOrder^0,c
  3582  0002DE  0E00               	movlw	0
  3583  0002E0  6E26               	movwf	(_digitNo+1)^0,c
  3584  0002E2  0E00               	movlw	0
  3585  0002E4  6E25               	movwf	_digitNo^0,c
  3586  0002E6  0E00               	movlw	0
  3587  0002E8  6E28               	movwf	(_downMov+1)^0,c
  3588  0002EA  0E00               	movlw	0
  3589  0002EC  6E27               	movwf	_downMov^0,c
  3590  0002EE  0E00               	movlw	0
  3591  0002F0  6E2A               	movwf	(_upMov+1)^0,c
  3592  0002F2  0E00               	movlw	0
  3593  0002F4  6E29               	movwf	_upMov^0,c
  3594  0002F6  0E00               	movlw	0
  3595  0002F8  6E2C               	movwf	(_rightMov+1)^0,c
  3596  0002FA  0E00               	movlw	0
  3597  0002FC  6E2B               	movwf	_rightMov^0,c
  3598  0002FE  0E00               	movlw	0
  3599  000300  6E2E               	movwf	(_leftMov+1)^0,c
  3600  000302  0E00               	movlw	0
  3601  000304  6E2D               	movwf	_leftMov^0,c
  3602  000306  0E00               	movlw	0
  3603  000308  6E30               	movwf	(_SubmittedBlock+1)^0,c
  3604  00030A  0E00               	movlw	0
  3605  00030C  6E2F               	movwf	_SubmittedBlock^0,c
  3606  00030E  0E00               	movlw	0
  3607  000310  6E32               	movwf	(_CurShape+1)^0,c
  3608  000312  0E00               	movlw	0
  3609  000314  6E31               	movwf	_CurShape^0,c
  3610                           
  3611                           ;main.c: 87:     prevB = count = submit = rotate = blink = on = CurShape = SubmittedBloc
      +                          k = leftMov = rightMov = upMov = downMov = digitNo = RotationOrder = prevA0 = prevA1 = p
      +                          revA2 = prevA3 = 0;
  3612  000316  0E00               	movlw	0
  3613  000318  6E34               	movwf	(_on+1)^0,c
  3614  00031A  0E00               	movlw	0
  3615  00031C  6E33               	movwf	_on^0,c
  3616  00031E  C033  F035         	movff	_on,_blink
  3617  000322  C034  F036         	movff	_on+1,_blink+1
  3618  000326  C035  F03B         	movff	_blink,_rotate	;volatile
  3619  00032A  C036  F03C         	movff	_blink+1,_rotate+1	;volatile
  3620  00032E  C03B  F03D         	movff	_rotate,_submit	;volatile
  3621  000332  C03C  F03E         	movff	_rotate+1,_submit+1	;volatile
  3622  000336  C03D  F03F         	movff	_submit,_count	;volatile
  3623  00033A  C03E  F040         	movff	_submit+1,_count+1	;volatile
  3624  00033E  C03F  F06E         	movff	_count,_prevB	;volatile
  3625  000342  C040  F06F         	movff	_count+1,_prevB+1	;volatile
  3626                           
  3627                           ;main.c: 91:     ADCON1 = 0x0F;
  3628  000346  0E0F               	movlw	15
  3629  000348  6EC1               	movwf	193,c	;volatile
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;main.c: 92:     INTCONbits.GIE = 0;
  3633  00034A  9EF2               	bcf	242,7,c	;volatile
  3634                           
  3635                           ;main.c: 93:     LATA = 0x00; LATB = 0x00; LATC = 0x00; LATD = 0x00; LATE = 0x00; LATF =
      +                           0x00;
  3636  00034C  0E00               	movlw	0
  3637  00034E  6E89               	movwf	137,c	;volatile
  3638  000350  0E00               	movlw	0
  3639  000352  6E8A               	movwf	138,c	;volatile
  3640  000354  0E00               	movlw	0
  3641  000356  6E8B               	movwf	139,c	;volatile
  3642  000358  0E00               	movlw	0
  3643  00035A  6E8C               	movwf	140,c	;volatile
  3644  00035C  0E00               	movlw	0
  3645  00035E  6E8D               	movwf	141,c	;volatile
  3646  000360  0E00               	movlw	0
  3647  000362  6E8E               	movwf	142,c	;volatile
  3648                           
  3649                           ;main.c: 94:     PORTA = 0x00; PORTB = 0x00; PORTC = 0x00; PORTD = 0x00; PORTE = 0x00; P
      +                          ORTF = 0x00;
  3650  000364  0E00               	movlw	0
  3651  000366  6E80               	movwf	128,c	;volatile
  3652  000368  0E00               	movlw	0
  3653  00036A  6E81               	movwf	129,c	;volatile
  3654  00036C  0E00               	movlw	0
  3655  00036E  6E82               	movwf	130,c	;volatile
  3656  000370  0E00               	movlw	0
  3657  000372  6E83               	movwf	131,c	;volatile
  3658  000374  0E00               	movlw	0
  3659  000376  6E84               	movwf	132,c	;volatile
  3660  000378  0E00               	movlw	0
  3661  00037A  6E85               	movwf	133,c	;volatile
  3662                           
  3663                           ;main.c: 95:     TRISA = 0x0F; TRISB = 0x60; TRISC = 0x00; TRISD = 0x00; TRISE = 0x00; T
      +                          RISF = 0x00;
  3664  00037C  0E0F               	movlw	15
  3665  00037E  6E92               	movwf	146,c	;volatile
  3666  000380  0E60               	movlw	96
  3667  000382  6E93               	movwf	147,c	;volatile
  3668  000384  0E00               	movlw	0
  3669  000386  6E94               	movwf	148,c	;volatile
  3670  000388  0E00               	movlw	0
  3671  00038A  6E95               	movwf	149,c	;volatile
  3672  00038C  0E00               	movlw	0
  3673  00038E  6E96               	movwf	150,c	;volatile
  3674  000390  0E00               	movlw	0
  3675  000392  6E97               	movwf	151,c	;volatile
  3676                           
  3677                           ;main.c: 96:     LATG = 0x00; PORTG = 0x00; TRISG = 0x00;
  3678  000394  0E00               	movlw	0
  3679  000396  6E8F               	movwf	143,c	;volatile
  3680  000398  0E00               	movlw	0
  3681  00039A  6E86               	movwf	134,c	;volatile
  3682  00039C  0E00               	movlw	0
  3683  00039E  6E98               	movwf	152,c	;volatile
  3684                           
  3685                           ;main.c: 98:     LATH = 0x00; PORTH = 0x00; TRISH = 0x00;
  3686  0003A0  0E00               	movlw	0
  3687  0003A2  6E90               	movwf	144,c	;volatile
  3688  0003A4  0E00               	movlw	0
  3689  0003A6  6E87               	movwf	135,c	;volatile
  3690  0003A8  0E00               	movlw	0
  3691  0003AA  6E99               	movwf	153,c	;volatile
  3692                           
  3693                           ;main.c: 100:     TRISJ = 0x00; LATJ = 0x3F;
  3694  0003AC  0E00               	movlw	0
  3695  0003AE  6E9A               	movwf	154,c	;volatile
  3696  0003B0  0E3F               	movlw	63
  3697  0003B2  6E91               	movwf	145,c	;volatile
  3698                           
  3699                           ;main.c: 102:     PORTH = 0x0F;
  3700  0003B4  0E0F               	movlw	15
  3701  0003B6  6E87               	movwf	135,c	;volatile
  3702                           
  3703                           ;main.c: 104:     grid.c = grid.d = grid.e = grid.f = 0;
  3704  0003B8  0E00               	movlw	0
  3705  0003BA  6E18               	movwf	(_grid+7)^0,c
  3706  0003BC  0E00               	movlw	0
  3707  0003BE  6E17               	movwf	(_grid+6)^0,c
  3708  0003C0  C017  F015         	movff	_grid+6,_grid+4
  3709  0003C4  C018  F016         	movff	_grid+7,_grid+5
  3710  0003C8  C015  F013         	movff	_grid+4,_grid+2
  3711  0003CC  C016  F014         	movff	_grid+5,_grid+3
  3712  0003D0  C013  F011         	movff	_grid+2,_grid
  3713  0003D4  C014  F012         	movff	_grid+3,_grid+1
  3714                           
  3715                           ; BSR set to: 0
  3716  0003D8  0012               	return		;funcret
  3717  0003DA                     __end_of_Init:
  3718                           	callstack 0
  3719                           
  3720 ;; *************** function _Fall_Each_Two_Sec *****************
  3721 ;; Defined at:
  3722 ;;		line 152 in file "main.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;Total ram usage:        0 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    5
  3743 ;; This function calls:
  3744 ;;		_Fall_Down
  3745 ;; This function is called by:
  3746 ;;		_main
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text24
  3751  0012CA                     __ptext24:
  3752                           	callstack 0
  3753  0012CA                     _Fall_Each_Two_Sec:
  3754                           	callstack 25
  3755                           
  3756                           ;main.c: 154:      if(count == 8){
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;incstack = 0
  3760  0012CA  0E08               	movlw	8
  3761  0012CC  183F               	xorwf	_count^0,w,c	;volatile
  3762  0012CE  1040               	iorwf	(_count+1)^0,w,c	;volatile
  3763  0012D0  A4D8               	btfss	status,2,c
  3764  0012D2  0012               	return	
  3765                           
  3766                           ;main.c: 156:         Fall_Down();
  3767  0012D4  EC33  F008         	call	_Fall_Down	;wreg free
  3768                           
  3769                           ;main.c: 158:         count = 0;
  3770  0012D8  0E00               	movlw	0
  3771  0012DA  6E40               	movwf	(_count+1)^0,c	;volatile
  3772  0012DC  0E00               	movlw	0
  3773  0012DE  6E3F               	movwf	_count^0,c	;volatile
  3774  0012E0  0012               	return		;funcret
  3775  0012E2                     __end_of_Fall_Each_Two_Sec:
  3776                           	callstack 0
  3777                           
  3778 ;; *************** function _Fall_Down *****************
  3779 ;; Defined at:
  3780 ;;		line 143 in file "main.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;Total ram usage:        0 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    4
  3801 ;; This function calls:
  3802 ;;		Nothing
  3803 ;; This function is called by:
  3804 ;;		_Fall_Each_Two_Sec
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text25
  3809  001066                     __ptext25:
  3810                           	callstack 0
  3811  001066                     _Fall_Down:
  3812                           	callstack 25
  3813                           
  3814                           ;main.c: 144:     if(shape.luy == 8 || shape.ruy == 8 || shape.lly == 8 || shape.rly == 
      +                          8) return;
  3815                           
  3816                           ;incstack = 0
  3817  001066  0E08               	movlw	8
  3818  001068  1809               	xorwf	(_shape+8)^0,w,c
  3819  00106A  100A               	iorwf	(_shape+9)^0,w,c
  3820  00106C  B4D8               	btfsc	status,2,c
  3821  00106E  0012               	return	
  3822  001070  0E08               	movlw	8
  3823  001072  180B               	xorwf	(_shape+10)^0,w,c
  3824  001074  100C               	iorwf	(_shape+11)^0,w,c
  3825  001076  B4D8               	btfsc	status,2,c
  3826  001078  0012               	return	
  3827  00107A  0E08               	movlw	8
  3828  00107C  180D               	xorwf	(_shape+12)^0,w,c
  3829  00107E  100E               	iorwf	(_shape+13)^0,w,c
  3830  001080  B4D8               	btfsc	status,2,c
  3831  001082  0012               	return	
  3832  001084  0E08               	movlw	8
  3833  001086  180F               	xorwf	(_shape+14)^0,w,c
  3834  001088  1010               	iorwf	(_shape+15)^0,w,c
  3835  00108A  B4D8               	btfsc	status,2,c
  3836  00108C  0012               	return	
  3837                           
  3838                           ;main.c: 145:     if(shape.luy) shape.luy++;
  3839  00108E  5009               	movf	(_shape+8)^0,w,c
  3840  001090  100A               	iorwf	(_shape+9)^0,w,c
  3841  001092  B4D8               	btfsc	status,2,c
  3842  001094  D002               	goto	l1299
  3843  001096  4A09               	infsnz	(_shape+8)^0,f,c
  3844  001098  2A0A               	incf	(_shape+9)^0,f,c
  3845  00109A                     l1299:
  3846                           
  3847                           ;main.c: 146:     if(shape.ruy) shape.ruy++;
  3848  00109A  500B               	movf	(_shape+10)^0,w,c
  3849  00109C  100C               	iorwf	(_shape+11)^0,w,c
  3850  00109E  B4D8               	btfsc	status,2,c
  3851  0010A0  D002               	goto	l1303
  3852  0010A2  4A0B               	infsnz	(_shape+10)^0,f,c
  3853  0010A4  2A0C               	incf	(_shape+11)^0,f,c
  3854  0010A6                     l1303:
  3855                           
  3856                           ;main.c: 147:     if(shape.lly) shape.lly++;
  3857  0010A6  500D               	movf	(_shape+12)^0,w,c
  3858  0010A8  100E               	iorwf	(_shape+13)^0,w,c
  3859  0010AA  B4D8               	btfsc	status,2,c
  3860  0010AC  D002               	goto	l1307
  3861  0010AE  4A0D               	infsnz	(_shape+12)^0,f,c
  3862  0010B0  2A0E               	incf	(_shape+13)^0,f,c
  3863  0010B2                     l1307:
  3864                           
  3865                           ;main.c: 148:     if(shape.rly) shape.rly++;
  3866  0010B2  500F               	movf	(_shape+14)^0,w,c
  3867  0010B4  1010               	iorwf	(_shape+15)^0,w,c
  3868  0010B6  B4D8               	btfsc	status,2,c
  3869  0010B8  0012               	return	
  3870  0010BA  4A0F               	infsnz	(_shape+14)^0,f,c
  3871  0010BC  2A10               	incf	(_shape+15)^0,f,c
  3872  0010BE  0012               	return		;funcret
  3873  0010C0                     __end_of_Fall_Down:
  3874                           	callstack 0
  3875                           
  3876 ;; *************** function _Blink *****************
  3877 ;; Defined at:
  3878 ;;		line 250 in file "main.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;		None
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;		None
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      void 
  3885 ;; Registers used:
  3886 ;;		wreg, status,2, status,0, cstack
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;Total ram usage:        0 bytes
  3897 ;; Hardware stack levels used:    1
  3898 ;; Hardware stack levels required when called:    5
  3899 ;; This function calls:
  3900 ;;		_Find
  3901 ;; This function is called by:
  3902 ;;		_main
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	text26
  3907  0008E0                     __ptext26:
  3908                           	callstack 0
  3909  0008E0                     _Blink:
  3910                           	callstack 25
  3911                           
  3912                           ;main.c: 252:     if(blink == 1){
  3913                           
  3914                           ;incstack = 0
  3915  0008E0  0435               	decf	_blink^0,w,c
  3916  0008E2  1036               	iorwf	(_blink+1)^0,w,c
  3917  0008E4  A4D8               	btfss	status,2,c
  3918  0008E6  0012               	return	
  3919                           
  3920                           ;main.c: 253:         if(on == 0){
  3921  0008E8  5033               	movf	_on^0,w,c
  3922  0008EA  1034               	iorwf	(_on+1)^0,w,c
  3923  0008EC  A4D8               	btfss	status,2,c
  3924  0008EE  D028               	goto	l2881
  3925                           
  3926                           ;main.c: 254:             LATC = Find(1) | grid.c;
  3927  0008F0  0E00               	movlw	0
  3928  0008F2  6E4E               	movwf	(Find@col+1)^0,c
  3929  0008F4  0E01               	movlw	1
  3930  0008F6  6E4D               	movwf	Find@col^0,c
  3931  0008F8  EC09  F000         	call	_Find	;wreg free
  3932  0008FC  504D               	movf	?_Find^0,w,c
  3933  0008FE  1011               	iorwf	_grid^0,w,c
  3934  000900  6E8B               	movwf	139,c	;volatile
  3935                           
  3936                           ;main.c: 255:             LATD = Find(2) | grid.d;
  3937  000902  0E00               	movlw	0
  3938  000904  6E4E               	movwf	(Find@col+1)^0,c
  3939  000906  0E02               	movlw	2
  3940  000908  6E4D               	movwf	Find@col^0,c
  3941  00090A  EC09  F000         	call	_Find	;wreg free
  3942  00090E  504D               	movf	?_Find^0,w,c
  3943  000910  1013               	iorwf	(_grid+2)^0,w,c
  3944  000912  6E8C               	movwf	140,c	;volatile
  3945                           
  3946                           ;main.c: 256:             LATE = Find(3) | grid.e;
  3947  000914  0E00               	movlw	0
  3948  000916  6E4E               	movwf	(Find@col+1)^0,c
  3949  000918  0E03               	movlw	3
  3950  00091A  6E4D               	movwf	Find@col^0,c
  3951  00091C  EC09  F000         	call	_Find	;wreg free
  3952  000920  504D               	movf	?_Find^0,w,c
  3953  000922  1015               	iorwf	(_grid+4)^0,w,c
  3954  000924  6E8D               	movwf	141,c	;volatile
  3955                           
  3956                           ;main.c: 257:             LATF = Find(4) | grid.f;
  3957  000926  0E00               	movlw	0
  3958  000928  6E4E               	movwf	(Find@col+1)^0,c
  3959  00092A  0E04               	movlw	4
  3960  00092C  6E4D               	movwf	Find@col^0,c
  3961  00092E  EC09  F000         	call	_Find	;wreg free
  3962  000932  504D               	movf	?_Find^0,w,c
  3963  000934  1017               	iorwf	(_grid+6)^0,w,c
  3964  000936  6E8E               	movwf	142,c	;volatile
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;main.c: 259:             on = 1;
  3968  000938  0E00               	movlw	0
  3969  00093A  6E34               	movwf	(_on+1)^0,c
  3970  00093C  0E01               	movlw	1
  3971  00093E  D02F               	goto	L11
  3972  000940                     l2881:
  3973  000940  0433               	decf	_on^0,w,c
  3974  000942  1034               	iorwf	(_on+1)^0,w,c
  3975  000944  A4D8               	btfss	status,2,c
  3976  000946  D02C               	goto	l2887
  3977                           
  3978                           ;main.c: 262:             LATC = (~Find(1)) & grid.c ;
  3979  000948  0E00               	movlw	0
  3980  00094A  6E4E               	movwf	(Find@col+1)^0,c
  3981  00094C  0E01               	movlw	1
  3982  00094E  6E4D               	movwf	Find@col^0,c
  3983  000950  EC09  F000         	call	_Find	;wreg free
  3984  000954  504D               	movf	?_Find^0,w,c
  3985  000956  0AFF               	xorlw	255
  3986  000958  1411               	andwf	_grid^0,w,c
  3987  00095A  6E8B               	movwf	139,c	;volatile
  3988                           
  3989                           ;main.c: 264:             LATD = (~Find(2)) & grid.d ;
  3990  00095C  0E00               	movlw	0
  3991  00095E  6E4E               	movwf	(Find@col+1)^0,c
  3992  000960  0E02               	movlw	2
  3993  000962  6E4D               	movwf	Find@col^0,c
  3994  000964  EC09  F000         	call	_Find	;wreg free
  3995  000968  504D               	movf	?_Find^0,w,c
  3996  00096A  0AFF               	xorlw	255
  3997  00096C  1413               	andwf	(_grid+2)^0,w,c
  3998  00096E  6E8C               	movwf	140,c	;volatile
  3999                           
  4000                           ;main.c: 265:             LATE = (~Find(3)) & grid.e ;
  4001  000970  0E00               	movlw	0
  4002  000972  6E4E               	movwf	(Find@col+1)^0,c
  4003  000974  0E03               	movlw	3
  4004  000976  6E4D               	movwf	Find@col^0,c
  4005  000978  EC09  F000         	call	_Find	;wreg free
  4006  00097C  504D               	movf	?_Find^0,w,c
  4007  00097E  0AFF               	xorlw	255
  4008  000980  1415               	andwf	(_grid+4)^0,w,c
  4009  000982  6E8D               	movwf	141,c	;volatile
  4010                           
  4011                           ;main.c: 266:             LATF = (~Find(4)) & grid.f ;
  4012  000984  0E00               	movlw	0
  4013  000986  6E4E               	movwf	(Find@col+1)^0,c
  4014  000988  0E04               	movlw	4
  4015  00098A  6E4D               	movwf	Find@col^0,c
  4016  00098C  EC09  F000         	call	_Find	;wreg free
  4017  000990  504D               	movf	?_Find^0,w,c
  4018  000992  0AFF               	xorlw	255
  4019  000994  1417               	andwf	(_grid+6)^0,w,c
  4020  000996  6E8E               	movwf	142,c	;volatile
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;main.c: 267:             on = 0;
  4024  000998  0E00               	movlw	0
  4025  00099A  6E34               	movwf	(_on+1)^0,c
  4026  00099C  0E00               	movlw	0
  4027  00099E                     L11:
  4028  00099E  6E33               	movwf	_on^0,c
  4029  0009A0                     l2887:
  4030                           
  4031                           ;main.c: 270:         blink = 0;
  4032  0009A0  0E00               	movlw	0
  4033  0009A2  6E36               	movwf	(_blink+1)^0,c
  4034  0009A4  0E00               	movlw	0
  4035  0009A6  6E35               	movwf	_blink^0,c
  4036  0009A8  0012               	return		;funcret
  4037  0009AA                     __end_of_Blink:
  4038                           	callstack 0
  4039                           
  4040 ;; *************** function _Find *****************
  4041 ;; Defined at:
  4042 ;;		line 164 in file "main.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;  col             2   10[COMRAM] int 
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;  second          2    8[BANK0 ] int 
  4047 ;;  first           2    6[BANK0 ] int 
  4048 ;;  second          2    4[BANK0 ] int 
  4049 ;;  first           2    2[BANK0 ] int 
  4050 ;;  res             2    0[BANK0 ] int 
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  2   10[COMRAM] int 
  4053 ;; Registers used:
  4054 ;;		wreg, status,2, status,0
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 3F/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4060 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Totals:         5      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;Total ram usage:       15 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    4
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_Blink
  4071 ;;		_Is_Collide
  4072 ;;		_Submit
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text27
  4077  000012                     __ptext27:
  4078                           	callstack 0
  4079  000012                     _Find:
  4080                           	callstack 24
  4081                           
  4082                           ;main.c: 165:      int res = 0;
  4083                           
  4084                           ;incstack = 0
  4085  000012  0E00               	movlw	0
  4086  000014  0100               	movlb	0	; () banked
  4087  000016  6F71               	movwf	(Find@res+1)& (0+255),b
  4088  000018  0E00               	movlw	0
  4089  00001A  6F70               	movwf	Find@res& (0+255),b
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;main.c: 166:      if(shape.lux == col || shape.llx == col){
  4093  00001C  504D               	movf	Find@col^0,w,c
  4094  00001E  1801               	xorwf	_shape^0,w,c
  4095  000020  E104               	bnz	u2680
  4096  000022  504E               	movf	(Find@col+1)^0,w,c
  4097  000024  1802               	xorwf	(_shape+1)^0,w,c
  4098  000026  B4D8               	btfsc	status,2,c
  4099  000028  D007               	goto	u2690
  4100  00002A                     u2680:
  4101                           
  4102                           ; BSR set to: 0
  4103  00002A  504D               	movf	Find@col^0,w,c
  4104  00002C  1805               	xorwf	(_shape+4)^0,w,c
  4105  00002E  E150               	bnz	l2673
  4106  000030  504E               	movf	(Find@col+1)^0,w,c
  4107  000032  1806               	xorwf	(_shape+5)^0,w,c
  4108  000034  A4D8               	btfss	status,2,c
  4109  000036  D04C               	goto	l2673
  4110  000038                     u2690:
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;main.c: 167:          int first = 0, second = 0;
  4114  000038  0E00               	movlw	0
  4115  00003A  6F73               	movwf	(Find@first+1)& (0+255),b
  4116  00003C  0E00               	movlw	0
  4117  00003E  6F72               	movwf	Find@first& (0+255),b
  4118  000040  0E00               	movlw	0
  4119  000042  6F75               	movwf	(Find@second+1)& (0+255),b
  4120  000044  0E00               	movlw	0
  4121  000046  6F74               	movwf	Find@second& (0+255),b
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;main.c: 168:          if(shape.luy > 0 ){
  4125  000048  BE0A               	btfsc	(_shape+9)^0,7,c
  4126  00004A  D01C               	goto	l2665
  4127  00004C  500A               	movf	(_shape+9)^0,w,c
  4128  00004E  E103               	bnz	u2700
  4129  000050  0409               	decf	(_shape+8)^0,w,c
  4130  000052  A0D8               	btfss	status,0,c
  4131  000054  D017               	goto	l2665
  4132  000056                     u2700:
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;main.c: 169:              first = 1 ;
  4136  000056  0E00               	movlw	0
  4137  000058  6F73               	movwf	(Find@first+1)& (0+255),b
  4138  00005A  0E01               	movlw	1
  4139  00005C  6F72               	movwf	Find@first& (0+255),b
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;main.c: 170:              first = first << (shape.luy-1) ;
  4143  00005E  C009  F04F         	movff	_shape+8,??_Find
  4144  000062  0EFF               	movlw	-1
  4145  000064  264F               	addwf	??_Find^0,f,c
  4146  000066  C072  F050         	movff	Find@first,??_Find+1
  4147  00006A  C073  F051         	movff	Find@first+1,??_Find+2
  4148  00006E  2A4F               	incf	??_Find^0,f,c
  4149  000070  D003               	goto	u2714
  4150  000072                     u2715:
  4151  000072  90D8               	bcf	status,0,c
  4152  000074  3650               	rlcf	(??_Find+1)^0,f,c
  4153  000076  3651               	rlcf	(??_Find+2)^0,f,c
  4154  000078                     u2714:
  4155  000078  2E4F               	decfsz	??_Find^0,f,c
  4156  00007A  D7FB               	goto	u2715
  4157  00007C  C050  F072         	movff	??_Find+1,Find@first
  4158  000080  C051  F073         	movff	??_Find+2,Find@first+1
  4159  000084                     l2665:
  4160                           
  4161                           ;main.c: 172:          if(shape.lly > 0){
  4162  000084  BE0E               	btfsc	(_shape+13)^0,7,c
  4163  000086  D01D               	goto	l2671
  4164  000088  500E               	movf	(_shape+13)^0,w,c
  4165  00008A  E103               	bnz	u2720
  4166  00008C  040D               	decf	(_shape+12)^0,w,c
  4167  00008E  A0D8               	btfss	status,0,c
  4168  000090  D018               	goto	l2671
  4169  000092                     u2720:
  4170                           
  4171                           ;main.c: 173:              second = 1;
  4172  000092  0E00               	movlw	0
  4173  000094  0100               	movlb	0	; () banked
  4174  000096  6F75               	movwf	(Find@second+1)& (0+255),b
  4175  000098  0E01               	movlw	1
  4176  00009A  6F74               	movwf	Find@second& (0+255),b
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;main.c: 174:              second = second << (shape.lly-1);
  4180  00009C  C00D  F04F         	movff	_shape+12,??_Find
  4181  0000A0  0EFF               	movlw	-1
  4182  0000A2  264F               	addwf	??_Find^0,f,c
  4183  0000A4  C074  F050         	movff	Find@second,??_Find+1
  4184  0000A8  C075  F051         	movff	Find@second+1,??_Find+2
  4185  0000AC  2A4F               	incf	??_Find^0,f,c
  4186  0000AE  D003               	goto	u2734
  4187  0000B0                     u2735:
  4188  0000B0  90D8               	bcf	status,0,c
  4189  0000B2  3650               	rlcf	(??_Find+1)^0,f,c
  4190  0000B4  3651               	rlcf	(??_Find+2)^0,f,c
  4191  0000B6                     u2734:
  4192  0000B6  2E4F               	decfsz	??_Find^0,f,c
  4193  0000B8  D7FB               	goto	u2735
  4194  0000BA  C050  F074         	movff	??_Find+1,Find@second
  4195  0000BE  C051  F075         	movff	??_Find+2,Find@second+1
  4196  0000C2                     l2671:
  4197                           
  4198                           ;main.c: 176:          res = second | first;
  4199  0000C2  0100               	movlb	0	; () banked
  4200  0000C4  5172               	movf	Find@first& (0+255),w,b
  4201  0000C6  1174               	iorwf	Find@second& (0+255),w,b
  4202  0000C8  6F70               	movwf	Find@res& (0+255),b
  4203  0000CA  5173               	movf	(Find@first+1)& (0+255),w,b
  4204  0000CC  1175               	iorwf	(Find@second+1)& (0+255),w,b
  4205  0000CE  6F71               	movwf	(Find@res+1)& (0+255),b
  4206  0000D0                     l2673:
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;main.c: 178:      if(shape.rux == col || shape.rlx == col){
  4210  0000D0  504D               	movf	Find@col^0,w,c
  4211  0000D2  1803               	xorwf	(_shape+2)^0,w,c
  4212  0000D4  E104               	bnz	u2740
  4213  0000D6  504E               	movf	(Find@col+1)^0,w,c
  4214  0000D8  1804               	xorwf	(_shape+3)^0,w,c
  4215  0000DA  B4D8               	btfsc	status,2,c
  4216  0000DC  D007               	goto	u2750
  4217  0000DE                     u2740:
  4218                           
  4219                           ; BSR set to: 0
  4220  0000DE  504D               	movf	Find@col^0,w,c
  4221  0000E0  1807               	xorwf	(_shape+6)^0,w,c
  4222  0000E2  E150               	bnz	l2693
  4223  0000E4  504E               	movf	(Find@col+1)^0,w,c
  4224  0000E6  1808               	xorwf	(_shape+7)^0,w,c
  4225  0000E8  A4D8               	btfss	status,2,c
  4226  0000EA  D04C               	goto	l2693
  4227  0000EC                     u2750:
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;main.c: 179:          int first = 0, second = 0;
  4231  0000EC  0E00               	movlw	0
  4232  0000EE  6F77               	movwf	(Find@first_290+1)& (0+255),b
  4233  0000F0  0E00               	movlw	0
  4234  0000F2  6F76               	movwf	Find@first_290& (0+255),b
  4235  0000F4  0E00               	movlw	0
  4236  0000F6  6F79               	movwf	(Find@second_291+1)& (0+255),b
  4237  0000F8  0E00               	movlw	0
  4238  0000FA  6F78               	movwf	Find@second_291& (0+255),b
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;main.c: 180:          if(shape.ruy > 0 ){
  4242  0000FC  BE0C               	btfsc	(_shape+11)^0,7,c
  4243  0000FE  D01C               	goto	l2685
  4244  000100  500C               	movf	(_shape+11)^0,w,c
  4245  000102  E103               	bnz	u2760
  4246  000104  040B               	decf	(_shape+10)^0,w,c
  4247  000106  A0D8               	btfss	status,0,c
  4248  000108  D017               	goto	l2685
  4249  00010A                     u2760:
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;main.c: 181:              first = 1 ;
  4253  00010A  0E00               	movlw	0
  4254  00010C  6F77               	movwf	(Find@first_290+1)& (0+255),b
  4255  00010E  0E01               	movlw	1
  4256  000110  6F76               	movwf	Find@first_290& (0+255),b
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;main.c: 182:              first = first << (shape.ruy-1) ;
  4260  000112  C00B  F04F         	movff	_shape+10,??_Find
  4261  000116  0EFF               	movlw	-1
  4262  000118  264F               	addwf	??_Find^0,f,c
  4263  00011A  C076  F050         	movff	Find@first_290,??_Find+1
  4264  00011E  C077  F051         	movff	Find@first_290+1,??_Find+2
  4265  000122  2A4F               	incf	??_Find^0,f,c
  4266  000124  D003               	goto	u2774
  4267  000126                     u2775:
  4268  000126  90D8               	bcf	status,0,c
  4269  000128  3650               	rlcf	(??_Find+1)^0,f,c
  4270  00012A  3651               	rlcf	(??_Find+2)^0,f,c
  4271  00012C                     u2774:
  4272  00012C  2E4F               	decfsz	??_Find^0,f,c
  4273  00012E  D7FB               	goto	u2775
  4274  000130  C050  F076         	movff	??_Find+1,Find@first_290
  4275  000134  C051  F077         	movff	??_Find+2,Find@first_290+1
  4276  000138                     l2685:
  4277                           
  4278                           ;main.c: 184:          if(shape.rly > 0){
  4279  000138  BE10               	btfsc	(_shape+15)^0,7,c
  4280  00013A  D01D               	goto	l2691
  4281  00013C  5010               	movf	(_shape+15)^0,w,c
  4282  00013E  E103               	bnz	u2780
  4283  000140  040F               	decf	(_shape+14)^0,w,c
  4284  000142  A0D8               	btfss	status,0,c
  4285  000144  D018               	goto	l2691
  4286  000146                     u2780:
  4287                           
  4288                           ;main.c: 185:              second = 1;
  4289  000146  0E00               	movlw	0
  4290  000148  0100               	movlb	0	; () banked
  4291  00014A  6F79               	movwf	(Find@second_291+1)& (0+255),b
  4292  00014C  0E01               	movlw	1
  4293  00014E  6F78               	movwf	Find@second_291& (0+255),b
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;main.c: 186:              second = second << (shape.rly-1);
  4297  000150  C00F  F04F         	movff	_shape+14,??_Find
  4298  000154  0EFF               	movlw	-1
  4299  000156  264F               	addwf	??_Find^0,f,c
  4300  000158  C078  F050         	movff	Find@second_291,??_Find+1
  4301  00015C  C079  F051         	movff	Find@second_291+1,??_Find+2
  4302  000160  2A4F               	incf	??_Find^0,f,c
  4303  000162  D003               	goto	u2794
  4304  000164                     u2795:
  4305  000164  90D8               	bcf	status,0,c
  4306  000166  3650               	rlcf	(??_Find+1)^0,f,c
  4307  000168  3651               	rlcf	(??_Find+2)^0,f,c
  4308  00016A                     u2794:
  4309  00016A  2E4F               	decfsz	??_Find^0,f,c
  4310  00016C  D7FB               	goto	u2795
  4311  00016E  C050  F078         	movff	??_Find+1,Find@second_291
  4312  000172  C051  F079         	movff	??_Find+2,Find@second_291+1
  4313  000176                     l2691:
  4314                           
  4315                           ;main.c: 188:          res = second | first;
  4316  000176  0100               	movlb	0	; () banked
  4317  000178  5176               	movf	Find@first_290& (0+255),w,b
  4318  00017A  1178               	iorwf	Find@second_291& (0+255),w,b
  4319  00017C  6F70               	movwf	Find@res& (0+255),b
  4320  00017E  5177               	movf	(Find@first_290+1)& (0+255),w,b
  4321  000180  1179               	iorwf	(Find@second_291+1)& (0+255),w,b
  4322  000182  6F71               	movwf	(Find@res+1)& (0+255),b
  4323  000184                     l2693:
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;main.c: 190:      return res;
  4327  000184  C070  F04D         	movff	Find@res,?_Find
  4328  000188  C071  F04E         	movff	Find@res+1,?_Find+1
  4329                           
  4330                           ; BSR set to: 0
  4331  00018C  0012               	return		;funcret
  4332  00018E                     __end_of_Find:
  4333                           	callstack 0
  4334                           
  4335 ;; *************** function _Arrange_Interrupts *****************
  4336 ;; Defined at:
  4337 ;;		line 116 in file "main.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      void 
  4344 ;; Registers used:
  4345 ;;		wreg, status,2
  4346 ;; Tracked objects:
  4347 ;;		On entry : 3F/0
  4348 ;;		On exit  : 3F/0
  4349 ;;		Unchanged: 3F/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;Total ram usage:        0 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:    4
  4358 ;; This function calls:
  4359 ;;		Nothing
  4360 ;; This function is called by:
  4361 ;;		_main
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text28
  4366  001222                     __ptext28:
  4367                           	callstack 0
  4368  001222                     _Arrange_Interrupts:
  4369                           	callstack 26
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;main.c: 117:     PIE2 = 0x00;
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;incstack = 0
  4376  001222  0E00               	movlw	0
  4377  001224  6EA0               	movwf	160,c	;volatile
  4378                           
  4379                           ;main.c: 118:     INTCON2 = 0x00;
  4380  001226  0E00               	movlw	0
  4381  001228  6EF1               	movwf	241,c	;volatile
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;main.c: 119:     INTCON2bits.INTEDG0 = 1;
  4385  00122A  8CF1               	bsf	241,6,c	;volatile
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;main.c: 120:     INTCON2bits.INTEDG1 = 1;
  4389  00122C  8AF1               	bsf	241,5,c	;volatile
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;main.c: 122:     INTCON2bits.RBPU = 1;
  4393  00122E  8EF1               	bsf	241,7,c	;volatile
  4394                           
  4395                           ;main.c: 124:     T0CON = 0x00;
  4396  001230  0E00               	movlw	0
  4397  001232  6ED5               	movwf	213,c	;volatile
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;main.c: 125:     T0CONbits.TMR0ON = 1;
  4401  001234  8ED5               	bsf	213,7,c	;volatile
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;main.c: 126:     T0CONbits.T0PS2 = 1;
  4405  001236  84D5               	bsf	213,2,c	;volatile
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;main.c: 127:     T0CONbits.T0PS1 = 0;
  4409  001238  92D5               	bcf	213,1,c	;volatile
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;main.c: 128:     T0CONbits.T0PS0 = 1;
  4413  00123A  80D5               	bsf	213,0,c	;volatile
  4414                           
  4415                           ;main.c: 130:     RCON = 0x00;
  4416  00123C  0E00               	movlw	0
  4417  00123E  6ED0               	movwf	208,c	;volatile
  4418                           
  4419                           ;main.c: 133:     TMR0H = 0x67;
  4420  001240  0E67               	movlw	103
  4421  001242  6ED7               	movwf	215,c	;volatile
  4422                           
  4423                           ;main.c: 134:     TMR0L = 0x69;
  4424  001244  0E69               	movlw	105
  4425  001246  6ED6               	movwf	214,c	;volatile
  4426                           
  4427                           ;main.c: 136:     INTCON = 0x00;
  4428  001248  0E00               	movlw	0
  4429  00124A  6EF2               	movwf	242,c	;volatile
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;main.c: 137:     INTCONbits.TMR0IE = 1;
  4433  00124C  8AF2               	bsf	242,5,c	;volatile
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;main.c: 138:     INTCONbits.RBIE = 1;
  4437  00124E  86F2               	bsf	242,3,c	;volatile
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;main.c: 139:     INTCONbits.PEIE = 1;
  4441  001250  8CF2               	bsf	242,6,c	;volatile
  4442                           
  4443                           ; BSR set to: 0
  4444  001252  0012               	return		;funcret
  4445  001254                     __end_of_Arrange_Interrupts:
  4446                           	callstack 0
  4447                           
  4448 ;; *************** function _HandleInterrupt *****************
  4449 ;; Defined at:
  4450 ;;		line 685 in file "main.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  1    wreg      void 
  4457 ;; Registers used:
  4458 ;;		wreg, status,2, status,0, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    3
  4471 ;; This function calls:
  4472 ;;		i2_UpdateSS
  4473 ;; This function is called by:
  4474 ;;		Interrupt level 2
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	intcode
  4479  000008                     __pintcode:
  4480                           	callstack 0
  4481  000008                     _HandleInterrupt:
  4482                           	callstack 24
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;incstack = 0
  4486  000008  8255               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4487  00000A  ED8B  F008         	call	int_func,f	;refresh shadow registers
  4488                           
  4489                           	psect	intcode_body
  4490  001116                     __pintcode_body:
  4491                           	callstack 24
  4492  001116                     int_func:
  4493                           	callstack 24
  4494  001116  0006               	pop		; remove dummy address from shadow register refresh
  4495                           
  4496                           ;main.c: 687:     UpdateSS();
  4497  001118  EC78  F009         	call	i2_UpdateSS	;wreg free
  4498                           
  4499                           ;main.c: 689:     if(INTCONbits.TMR0IF){
  4500  00111C  A4F2               	btfss	242,2,c	;volatile
  4501  00111E  D00B               	goto	i2l2549
  4502                           
  4503                           ;main.c: 690:         count++;
  4504  001120  4A3F               	infsnz	_count^0,f,c	;volatile
  4505  001122  2A40               	incf	(_count+1)^0,f,c	;volatile
  4506                           
  4507                           ;main.c: 691:         blink = 1;
  4508  001124  0E00               	movlw	0
  4509  001126  6E36               	movwf	(_blink+1)^0,c
  4510  001128  0E01               	movlw	1
  4511  00112A  6E35               	movwf	_blink^0,c
  4512                           
  4513                           ;main.c: 692:         TMR0H = 0x67;
  4514  00112C  0E67               	movlw	103
  4515  00112E  6ED7               	movwf	215,c	;volatile
  4516                           
  4517                           ;main.c: 693:         TMR0L = 0x69;
  4518  001130  0E69               	movlw	105
  4519  001132  6ED6               	movwf	214,c	;volatile
  4520                           
  4521                           ;main.c: 694:         INTCONbits.TMR0IF = 0;
  4522  001134  94F2               	bcf	242,2,c	;volatile
  4523  001136                     i2l2549:
  4524                           
  4525                           ;main.c: 697:     if(INTCONbits.RBIF){
  4526  001136  A0F2               	btfss	242,0,c	;volatile
  4527  001138  D014               	goto	i2l395
  4528                           
  4529                           ;main.c: 699:         INTCONbits.RBIF = 0;
  4530  00113A  90F2               	bcf	242,0,c	;volatile
  4531                           
  4532                           ;main.c: 701:         curB = PORTB;
  4533  00113C  CF81 F041          	movff	3969,_curB	;volatile
  4534  001140  6A42               	clrf	(_curB+1)^0,c
  4535                           
  4536                           ;main.c: 703:         if (!bInterruptFired) {
  4537  001142  5037               	movf	_bInterruptFired^0,w,c	;volatile
  4538  001144  1038               	iorwf	(_bInterruptFired+1)^0,w,c	;volatile
  4539  001146  A4D8               	btfss	status,2,c
  4540  001148  D008               	goto	i2l2557
  4541                           
  4542                           ;main.c: 704:             debounceTimer = 150*3;
  4543  00114A  0E01               	movlw	1
  4544  00114C  6E3A               	movwf	(_debounceTimer+1)^0,c	;volatile
  4545  00114E  0EC2               	movlw	194
  4546  001150  6E39               	movwf	_debounceTimer^0,c	;volatile
  4547                           
  4548                           ;main.c: 705:             bInterruptFired = 1;
  4549  001152  0E00               	movlw	0
  4550  001154  6E38               	movwf	(_bInterruptFired+1)^0,c	;volatile
  4551  001156  0E01               	movlw	1
  4552  001158  6E37               	movwf	_bInterruptFired^0,c	;volatile
  4553  00115A                     i2l2557:
  4554                           
  4555                           ;main.c: 708:         prevB = curB;
  4556  00115A  C041  F06E         	movff	_curB,_prevB
  4557  00115E  C042  F06F         	movff	_curB+1,_prevB+1
  4558  001162                     i2l395:
  4559  001162  9255               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4560  001164  0011               	retfie		f
  4561  001166                     __end_of_HandleInterrupt:
  4562                           	callstack 0
  4563                           
  4564 ;; *************** function i2_UpdateSS *****************
  4565 ;; Defined at:
  4566 ;;		line 467 in file "main.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;		None
  4569 ;; Auto vars:     Size  Location     Type
  4570 ;;		None
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		wreg, status,2, status,0, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;Total ram usage:        0 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    2
  4587 ;; This function calls:
  4588 ;;		i2_MakeThirdZero
  4589 ;;		i2_UpdateLeft
  4590 ;;		i2_UpdateRight
  4591 ;; This function is called by:
  4592 ;;		_HandleInterrupt
  4593 ;; This function uses a non-reentrant model
  4594 ;;
  4595                           
  4596                           	psect	text30
  4597  0012F0                     __ptext30:
  4598                           	callstack 0
  4599  0012F0                     i2_UpdateSS:
  4600                           	callstack 24
  4601                           
  4602                           ;main.c: 471:             UpdateRight();
  4603                           
  4604                           ;incstack = 0
  4605  0012F0  ECD5  F004         	call	i2_UpdateRight	;wreg free
  4606                           
  4607                           ;main.c: 474:             UpdateLeft();
  4608  0012F4  EC92  F006         	call	i2_UpdateLeft	;wreg free
  4609                           
  4610                           ;main.c: 477:             MakeThirdZero();
  4611  0012F8  EC3F  F009         	call	i2_MakeThirdZero	;wreg free
  4612  0012FC  0012               	return		;funcret
  4613  0012FE                     __end_ofi2_UpdateSS:
  4614                           	callstack 0
  4615                           
  4616 ;; *************** function i2_UpdateRight *****************
  4617 ;; Defined at:
  4618 ;;		line 411 in file "main.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  rdigit          2    6[COMRAM] int 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      void 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2, status,0, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;Total ram usage:        2 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    1
  4639 ;; This function calls:
  4640 ;;		i2___awmod
  4641 ;; This function is called by:
  4642 ;;		i2_UpdateSS
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text31
  4647  0009AA                     __ptext31:
  4648                           	callstack 0
  4649  0009AA                     i2_UpdateRight:
  4650                           	callstack 24
  4651                           
  4652                           ;main.c: 413:     int rdigit = SubmittedBlock % 10;
  4653                           
  4654                           ;incstack = 0
  4655  0009AA  C02F  F043         	movff	_SubmittedBlock,i2___awmod@dividend
  4656  0009AE  C030  F044         	movff	_SubmittedBlock+1,i2___awmod@dividend+1
  4657  0009B2  0E00               	movlw	0
  4658  0009B4  6E46               	movwf	(i2___awmod@divisor+1)^0,c
  4659  0009B6  0E0A               	movlw	10
  4660  0009B8  6E45               	movwf	i2___awmod@divisor^0,c
  4661  0009BA  EC05  F007         	call	i2___awmod	;wreg free
  4662  0009BE  C043  F049         	movff	?i2___awmod,i2UpdateRight@rdigit
  4663  0009C2  C044  F04A         	movff	?i2___awmod+1,i2UpdateRight@rdigit+1
  4664                           
  4665                           ;main.c: 415:     if(rdigit == 0){
  4666  0009C6  5049               	movf	i2UpdateRight@rdigit^0,w,c
  4667  0009C8  104A               	iorwf	(i2UpdateRight@rdigit+1)^0,w,c
  4668  0009CA  A4D8               	btfss	status,2,c
  4669  0009CC  D002               	goto	i2l2325
  4670                           
  4671                           ;main.c: 416:         LATJ = 0x3F;
  4672  0009CE  0E3F               	movlw	63
  4673  0009D0  D03D               	goto	L20
  4674  0009D2                     i2l2325:
  4675  0009D2  0449               	decf	i2UpdateRight@rdigit^0,w,c
  4676  0009D4  104A               	iorwf	(i2UpdateRight@rdigit+1)^0,w,c
  4677  0009D6  A4D8               	btfss	status,2,c
  4678  0009D8  D002               	goto	i2l2329
  4679                           
  4680                           ;main.c: 419:         LATJ = 0x06;
  4681  0009DA  0E06               	movlw	6
  4682  0009DC  D037               	goto	L20
  4683  0009DE                     i2l2329:
  4684  0009DE  0E02               	movlw	2
  4685  0009E0  1849               	xorwf	i2UpdateRight@rdigit^0,w,c
  4686  0009E2  104A               	iorwf	(i2UpdateRight@rdigit+1)^0,w,c
  4687  0009E4  A4D8               	btfss	status,2,c
  4688  0009E6  D002               	goto	i2l2333
  4689                           
  4690                           ;main.c: 422:         LATJ = 0x5B;
  4691  0009E8  0E5B               	movlw	91
  4692  0009EA  D030               	goto	L20
  4693  0009EC                     i2l2333:
  4694  0009EC  0E03               	movlw	3
  4695  0009EE  1849               	xorwf	i2UpdateRight@rdigit^0,w,c
  4696  0009F0  104A               	iorwf	(i2UpdateRight@rdigit+1)^0,w,c
  4697  0009F2  A4D8               	btfss	status,2,c
  4698  0009F4  D002               	goto	i2l2337
  4699                           
  4700                           ;main.c: 425:         LATJ = 0x4F;
  4701  0009F6  0E4F               	movlw	79
  4702  0009F8  D029               	goto	L20
  4703  0009FA                     i2l2337:
  4704  0009FA  0E04               	movlw	4
  4705  0009FC  1849               	xorwf	i2UpdateRight@rdigit^0,w,c
  4706  0009FE  104A               	iorwf	(i2UpdateRight@rdigit+1)^0,w,c
  4707  000A00  A4D8               	btfss	status,2,c
  4708  000A02  D002               	goto	i2l2341
  4709                           
  4710                           ;main.c: 428:         LATJ = 0x66;
  4711  000A04  0E66               	movlw	102
  4712  000A06  D022               	goto	L20
  4713  000A08                     i2l2341:
  4714  000A08  0E05               	movlw	5
  4715  000A0A  1849               	xorwf	i2UpdateRight@rdigit^0,w,c
  4716  000A0C  104A               	iorwf	(i2UpdateRight@rdigit+1)^0,w,c
  4717  000A0E  A4D8               	btfss	status,2,c
  4718  000A10  D002               	goto	i2l2345
  4719                           
  4720                           ;main.c: 431:         LATJ = 0x6D;
  4721  000A12  0E6D               	movlw	109
  4722  000A14  D01B               	goto	L20
  4723  000A16                     i2l2345:
  4724  000A16  0E06               	movlw	6
  4725  000A18  1849               	xorwf	i2UpdateRight@rdigit^0,w,c
  4726  000A1A  104A               	iorwf	(i2UpdateRight@rdigit+1)^0,w,c
  4727  000A1C  A4D8               	btfss	status,2,c
  4728  000A1E  D002               	goto	i2l2349
  4729                           
  4730                           ;main.c: 434:         LATJ = 0x7D;
  4731  000A20  0E7D               	movlw	125
  4732  000A22  D014               	goto	L20
  4733  000A24                     i2l2349:
  4734  000A24  0E07               	movlw	7
  4735  000A26  1849               	xorwf	i2UpdateRight@rdigit^0,w,c
  4736  000A28  104A               	iorwf	(i2UpdateRight@rdigit+1)^0,w,c
  4737  000A2A  A4D8               	btfss	status,2,c
  4738  000A2C  D002               	goto	i2l2353
  4739                           
  4740                           ;main.c: 437:         LATJ = 0x07;
  4741  000A2E  0E07               	movlw	7
  4742  000A30  D00D               	goto	L20
  4743  000A32                     i2l2353:
  4744  000A32  0E08               	movlw	8
  4745  000A34  1849               	xorwf	i2UpdateRight@rdigit^0,w,c
  4746  000A36  104A               	iorwf	(i2UpdateRight@rdigit+1)^0,w,c
  4747  000A38  A4D8               	btfss	status,2,c
  4748  000A3A  D002               	goto	i2l2357
  4749                           
  4750                           ;main.c: 440:         LATJ = 0x7F;
  4751  000A3C  0E7F               	movlw	127
  4752  000A3E  D006               	goto	L20
  4753  000A40                     i2l2357:
  4754  000A40  0E09               	movlw	9
  4755  000A42  1849               	xorwf	i2UpdateRight@rdigit^0,w,c
  4756  000A44  104A               	iorwf	(i2UpdateRight@rdigit+1)^0,w,c
  4757  000A46  A4D8               	btfss	status,2,c
  4758  000A48  D002               	goto	i2l300
  4759                           
  4760                           ;main.c: 443:         LATJ = 0x6F;
  4761  000A4A  0E6F               	movlw	111
  4762  000A4C                     L20:
  4763  000A4C  6E91               	movwf	145,c	;volatile
  4764  000A4E                     i2l300:
  4765                           
  4766                           ;main.c: 445:      LATH = 0x08;
  4767  000A4E  0E08               	movlw	8
  4768  000A50  6E90               	movwf	144,c	;volatile
  4769                           
  4770                           ;main.c: 447:     digitNo = (digitNo + 1) % 3;
  4771  000A52  0E01               	movlw	1
  4772  000A54  2425               	addwf	_digitNo^0,w,c
  4773  000A56  6E43               	movwf	i2___awmod@dividend^0,c
  4774  000A58  0E00               	movlw	0
  4775  000A5A  2026               	addwfc	(_digitNo+1)^0,w,c
  4776  000A5C  6E44               	movwf	(i2___awmod@dividend+1)^0,c
  4777  000A5E  0E00               	movlw	0
  4778  000A60  6E46               	movwf	(i2___awmod@divisor+1)^0,c
  4779  000A62  0E03               	movlw	3
  4780  000A64  6E45               	movwf	i2___awmod@divisor^0,c
  4781  000A66  EC05  F007         	call	i2___awmod	;wreg free
  4782  000A6A  C043  F025         	movff	?i2___awmod,_digitNo
  4783  000A6E  C044  F026         	movff	?i2___awmod+1,_digitNo+1
  4784  000A72  0012               	return		;funcret
  4785  000A74                     __end_ofi2_UpdateRight:
  4786                           	callstack 0
  4787                           
  4788 ;; *************** function i2_UpdateLeft *****************
  4789 ;; Defined at:
  4790 ;;		line 392 in file "main.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;		None
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;  leftdigit       2    8[COMRAM] int 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;Total ram usage:        2 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    1
  4811 ;; This function calls:
  4812 ;;		i2___awdiv
  4813 ;;		i2___awmod
  4814 ;; This function is called by:
  4815 ;;		i2_UpdateSS
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819                           	psect	text32
  4820  000D24                     __ptext32:
  4821                           	callstack 0
  4822  000D24                     i2_UpdateLeft:
  4823                           	callstack 24
  4824                           
  4825                           ;main.c: 394:     int leftdigit = SubmittedBlock / 10;
  4826                           
  4827                           ;incstack = 0
  4828  000D24  C02F  F043         	movff	_SubmittedBlock,i2___awdiv@dividend
  4829  000D28  C030  F044         	movff	_SubmittedBlock+1,i2___awdiv@dividend+1
  4830  000D2C  0E00               	movlw	0
  4831  000D2E  6E46               	movwf	(i2___awdiv@divisor+1)^0,c
  4832  000D30  0E0A               	movlw	10
  4833  000D32  6E45               	movwf	i2___awdiv@divisor^0,c
  4834  000D34  EC14  F006         	call	i2___awdiv	;wreg free
  4835  000D38  C043  F04B         	movff	?i2___awdiv,i2UpdateLeft@leftdigit
  4836  000D3C  C044  F04C         	movff	?i2___awdiv+1,i2UpdateLeft@leftdigit+1
  4837                           
  4838                           ;main.c: 395:     if(leftdigit == 0){
  4839  000D40  504B               	movf	i2UpdateLeft@leftdigit^0,w,c
  4840  000D42  104C               	iorwf	(i2UpdateLeft@leftdigit+1)^0,w,c
  4841  000D44  A4D8               	btfss	status,2,c
  4842  000D46  D002               	goto	i2l2305
  4843                           
  4844                           ;main.c: 396:         LATJ = 0x3F;
  4845  000D48  0E3F               	movlw	63
  4846  000D4A  D013               	goto	L21
  4847  000D4C                     i2l2305:
  4848  000D4C  044B               	decf	i2UpdateLeft@leftdigit^0,w,c
  4849  000D4E  104C               	iorwf	(i2UpdateLeft@leftdigit+1)^0,w,c
  4850  000D50  A4D8               	btfss	status,2,c
  4851  000D52  D002               	goto	i2l2309
  4852                           
  4853                           ;main.c: 399:         LATJ = 0x06;
  4854  000D54  0E06               	movlw	6
  4855  000D56  D00D               	goto	L21
  4856  000D58                     i2l2309:
  4857  000D58  0E02               	movlw	2
  4858  000D5A  184B               	xorwf	i2UpdateLeft@leftdigit^0,w,c
  4859  000D5C  104C               	iorwf	(i2UpdateLeft@leftdigit+1)^0,w,c
  4860  000D5E  A4D8               	btfss	status,2,c
  4861  000D60  D002               	goto	i2l2313
  4862                           
  4863                           ;main.c: 402:         LATJ = 0x5B;
  4864  000D62  0E5B               	movlw	91
  4865  000D64  D006               	goto	L21
  4866  000D66                     i2l2313:
  4867  000D66  0E03               	movlw	3
  4868  000D68  184B               	xorwf	i2UpdateLeft@leftdigit^0,w,c
  4869  000D6A  104C               	iorwf	(i2UpdateLeft@leftdigit+1)^0,w,c
  4870  000D6C  A4D8               	btfss	status,2,c
  4871  000D6E  D002               	goto	i2l278
  4872                           
  4873                           ;main.c: 405:         LATJ = 0x4F;
  4874  000D70  0E4F               	movlw	79
  4875  000D72                     L21:
  4876  000D72  6E91               	movwf	145,c	;volatile
  4877  000D74                     i2l278:
  4878                           
  4879                           ;main.c: 407:     LATH = 0x04;
  4880  000D74  0E04               	movlw	4
  4881  000D76  6E90               	movwf	144,c	;volatile
  4882                           
  4883                           ;main.c: 408:      digitNo = (digitNo + 1) % 3;
  4884  000D78  0E01               	movlw	1
  4885  000D7A  2425               	addwf	_digitNo^0,w,c
  4886  000D7C  6E43               	movwf	i2___awmod@dividend^0,c
  4887  000D7E  0E00               	movlw	0
  4888  000D80  2026               	addwfc	(_digitNo+1)^0,w,c
  4889  000D82  6E44               	movwf	(i2___awmod@dividend+1)^0,c
  4890  000D84  0E00               	movlw	0
  4891  000D86  6E46               	movwf	(i2___awmod@divisor+1)^0,c
  4892  000D88  0E03               	movlw	3
  4893  000D8A  6E45               	movwf	i2___awmod@divisor^0,c
  4894  000D8C  EC05  F007         	call	i2___awmod	;wreg free
  4895  000D90  C043  F025         	movff	?i2___awmod,_digitNo
  4896  000D94  C044  F026         	movff	?i2___awmod+1,_digitNo+1
  4897  000D98  0012               	return		;funcret
  4898  000D9A                     __end_ofi2_UpdateLeft:
  4899                           	callstack 0
  4900                           
  4901 ;; *************** function i2___awdiv *****************
  4902 ;; Defined at:
  4903 ;;		line 7 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/awdiv.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;  dividend        2    0[COMRAM] int 
  4906 ;;  divisor         2    2[COMRAM] int 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  quotient        2    6[COMRAM] int 
  4909 ;;  sign            1    5[COMRAM] unsigned char 
  4910 ;;  counter         1    4[COMRAM] unsigned char 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  2    0[COMRAM] int 
  4913 ;; Registers used:
  4914 ;;		wreg, status,2, status,0
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4920 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;Total ram usage:        8 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; This function calls:
  4927 ;;		Nothing
  4928 ;; This function is called by:
  4929 ;;		i2_UpdateLeft
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           	psect	text33
  4934  000C28                     __ptext33:
  4935                           	callstack 0
  4936  000C28                     i2___awdiv:
  4937                           	callstack 24
  4938                           
  4939                           ;incstack = 0
  4940  000C28  0E00               	movlw	0
  4941  000C2A  6E48               	movwf	i2___awdiv@sign^0,c
  4942  000C2C  AE46               	btfss	(i2___awdiv@divisor+1)^0,7,c
  4943  000C2E  D006               	goto	i2l2103
  4944  000C30  6C45               	negf	i2___awdiv@divisor^0,c
  4945  000C32  1E46               	comf	(i2___awdiv@divisor+1)^0,f,c
  4946  000C34  B0D8               	btfsc	status,0,c
  4947  000C36  2A46               	incf	(i2___awdiv@divisor+1)^0,f,c
  4948  000C38  0E01               	movlw	1
  4949  000C3A  6E48               	movwf	i2___awdiv@sign^0,c
  4950  000C3C                     i2l2103:
  4951  000C3C  AE44               	btfss	(i2___awdiv@dividend+1)^0,7,c
  4952  000C3E  D006               	goto	i2l2109
  4953  000C40  6C43               	negf	i2___awdiv@dividend^0,c
  4954  000C42  1E44               	comf	(i2___awdiv@dividend+1)^0,f,c
  4955  000C44  B0D8               	btfsc	status,0,c
  4956  000C46  2A44               	incf	(i2___awdiv@dividend+1)^0,f,c
  4957  000C48  0E01               	movlw	1
  4958  000C4A  1A48               	xorwf	i2___awdiv@sign^0,f,c
  4959  000C4C                     i2l2109:
  4960  000C4C  0E00               	movlw	0
  4961  000C4E  6E4A               	movwf	(i2___awdiv@quotient+1)^0,c
  4962  000C50  0E00               	movlw	0
  4963  000C52  6E49               	movwf	i2___awdiv@quotient^0,c
  4964  000C54  5045               	movf	i2___awdiv@divisor^0,w,c
  4965  000C56  1046               	iorwf	(i2___awdiv@divisor+1)^0,w,c
  4966  000C58  B4D8               	btfsc	status,2,c
  4967  000C5A  D01C               	goto	i2l2131
  4968  000C5C  0E01               	movlw	1
  4969  000C5E  6E47               	movwf	i2___awdiv@counter^0,c
  4970  000C60  D004               	goto	i2l2117
  4971  000C62                     i2l2115:
  4972  000C62  90D8               	bcf	status,0,c
  4973  000C64  3645               	rlcf	i2___awdiv@divisor^0,f,c
  4974  000C66  3646               	rlcf	(i2___awdiv@divisor+1)^0,f,c
  4975  000C68  2A47               	incf	i2___awdiv@counter^0,f,c
  4976  000C6A                     i2l2117:
  4977  000C6A  AE46               	btfss	(i2___awdiv@divisor+1)^0,7,c
  4978  000C6C  D7FA               	goto	i2l2115
  4979  000C6E                     i2u190_40:
  4980  000C6E  90D8               	bcf	status,0,c
  4981  000C70  3649               	rlcf	i2___awdiv@quotient^0,f,c
  4982  000C72  364A               	rlcf	(i2___awdiv@quotient+1)^0,f,c
  4983  000C74  5045               	movf	i2___awdiv@divisor^0,w,c
  4984  000C76  5C43               	subwf	i2___awdiv@dividend^0,w,c
  4985  000C78  5046               	movf	(i2___awdiv@divisor+1)^0,w,c
  4986  000C7A  5844               	subwfb	(i2___awdiv@dividend+1)^0,w,c
  4987  000C7C  A0D8               	btfss	status,0,c
  4988  000C7E  D005               	goto	i2l2127
  4989  000C80  5045               	movf	i2___awdiv@divisor^0,w,c
  4990  000C82  5E43               	subwf	i2___awdiv@dividend^0,f,c
  4991  000C84  5046               	movf	(i2___awdiv@divisor+1)^0,w,c
  4992  000C86  5A44               	subwfb	(i2___awdiv@dividend+1)^0,f,c
  4993  000C88  8049               	bsf	i2___awdiv@quotient^0,0,c
  4994  000C8A                     i2l2127:
  4995  000C8A  90D8               	bcf	status,0,c
  4996  000C8C  3246               	rrcf	(i2___awdiv@divisor+1)^0,f,c
  4997  000C8E  3245               	rrcf	i2___awdiv@divisor^0,f,c
  4998  000C90  2E47               	decfsz	i2___awdiv@counter^0,f,c
  4999  000C92  D7ED               	goto	i2u190_40
  5000  000C94                     i2l2131:
  5001  000C94  5048               	movf	i2___awdiv@sign^0,w,c
  5002  000C96  B4D8               	btfsc	status,2,c
  5003  000C98  D004               	goto	i2l2135
  5004  000C9A  6C49               	negf	i2___awdiv@quotient^0,c
  5005  000C9C  1E4A               	comf	(i2___awdiv@quotient+1)^0,f,c
  5006  000C9E  B0D8               	btfsc	status,0,c
  5007  000CA0  2A4A               	incf	(i2___awdiv@quotient+1)^0,f,c
  5008  000CA2                     i2l2135:
  5009  000CA2  C049  F043         	movff	i2___awdiv@quotient,?i2___awdiv
  5010  000CA6  C04A  F044         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  5011  000CAA  0012               	return		;funcret
  5012  000CAC                     __end_ofi2___awdiv:
  5013                           	callstack 0
  5014                           
  5015 ;; *************** function i2_MakeThirdZero *****************
  5016 ;; Defined at:
  5017 ;;		line 451 in file "main.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;		None
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		wreg, status,2, status,0, cstack
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;Total ram usage:        0 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    1
  5038 ;; This function calls:
  5039 ;;		i2___awmod
  5040 ;; This function is called by:
  5041 ;;		i2_UpdateSS
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           	psect	text34
  5046  00127E                     __ptext34:
  5047                           	callstack 0
  5048  00127E                     i2_MakeThirdZero:
  5049                           	callstack 24
  5050                           
  5051                           ;main.c: 453:     LATJ = 0x3F;
  5052                           
  5053                           ;incstack = 0
  5054  00127E  0E3F               	movlw	63
  5055  001280  6E91               	movwf	145,c	;volatile
  5056                           
  5057                           ;main.c: 454:     LATH = 0x03;
  5058  001282  0E03               	movlw	3
  5059  001284  6E90               	movwf	144,c	;volatile
  5060                           
  5061                           ;main.c: 455:     digitNo = (digitNo + 1) % 3;
  5062  001286  0E01               	movlw	1
  5063  001288  2425               	addwf	_digitNo^0,w,c
  5064  00128A  6E43               	movwf	i2___awmod@dividend^0,c
  5065  00128C  0E00               	movlw	0
  5066  00128E  2026               	addwfc	(_digitNo+1)^0,w,c
  5067  001290  6E44               	movwf	(i2___awmod@dividend+1)^0,c
  5068  001292  0E00               	movlw	0
  5069  001294  6E46               	movwf	(i2___awmod@divisor+1)^0,c
  5070  001296  0E03               	movlw	3
  5071  001298  6E45               	movwf	i2___awmod@divisor^0,c
  5072  00129A  EC05  F007         	call	i2___awmod	;wreg free
  5073  00129E  C043  F025         	movff	?i2___awmod,_digitNo
  5074  0012A2  C044  F026         	movff	?i2___awmod+1,_digitNo+1
  5075  0012A6  0012               	return		;funcret
  5076  0012A8                     __end_ofi2_MakeThirdZero:
  5077                           	callstack 0
  5078                           
  5079 ;; *************** function i2___awmod *****************
  5080 ;; Defined at:
  5081 ;;		line 7 in file "/opt/microchip/xc8/v2.30/pic/sources/c99/common/awmod.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;  dividend        2    0[COMRAM] int 
  5084 ;;  divisor         2    2[COMRAM] int 
  5085 ;; Auto vars:     Size  Location     Type
  5086 ;;  sign            1    5[COMRAM] unsigned char 
  5087 ;;  counter         1    4[COMRAM] unsigned char 
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  2    0[COMRAM] int 
  5090 ;; Registers used:
  5091 ;;		wreg, status,2, status,0
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5097 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;Total ram usage:        6 bytes
  5102 ;; Hardware stack levels used:    1
  5103 ;; This function calls:
  5104 ;;		Nothing
  5105 ;; This function is called by:
  5106 ;;		i2_UpdateLeft
  5107 ;;		i2_UpdateRight
  5108 ;;		i2_MakeThirdZero
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           	psect	text35
  5113  000E0A                     __ptext35:
  5114                           	callstack 0
  5115  000E0A                     i2___awmod:
  5116                           	callstack 24
  5117                           
  5118                           ;incstack = 0
  5119  000E0A  0E00               	movlw	0
  5120  000E0C  6E48               	movwf	i2___awmod@sign^0,c
  5121  000E0E  AE44               	btfss	(i2___awmod@dividend+1)^0,7,c
  5122  000E10  D006               	goto	i2l2147
  5123  000E12  6C43               	negf	i2___awmod@dividend^0,c
  5124  000E14  1E44               	comf	(i2___awmod@dividend+1)^0,f,c
  5125  000E16  B0D8               	btfsc	status,0,c
  5126  000E18  2A44               	incf	(i2___awmod@dividend+1)^0,f,c
  5127  000E1A  0E01               	movlw	1
  5128  000E1C  6E48               	movwf	i2___awmod@sign^0,c
  5129  000E1E                     i2l2147:
  5130  000E1E  AE46               	btfss	(i2___awmod@divisor+1)^0,7,c
  5131  000E20  D004               	goto	i2l2151
  5132  000E22  6C45               	negf	i2___awmod@divisor^0,c
  5133  000E24  1E46               	comf	(i2___awmod@divisor+1)^0,f,c
  5134  000E26  B0D8               	btfsc	status,0,c
  5135  000E28  2A46               	incf	(i2___awmod@divisor+1)^0,f,c
  5136  000E2A                     i2l2151:
  5137  000E2A  5045               	movf	i2___awmod@divisor^0,w,c
  5138  000E2C  1046               	iorwf	(i2___awmod@divisor+1)^0,w,c
  5139  000E2E  B4D8               	btfsc	status,2,c
  5140  000E30  D018               	goto	i2l2167
  5141  000E32  0E01               	movlw	1
  5142  000E34  6E47               	movwf	i2___awmod@counter^0,c
  5143  000E36  D004               	goto	i2l2157
  5144  000E38                     i2l2155:
  5145  000E38  90D8               	bcf	status,0,c
  5146  000E3A  3645               	rlcf	i2___awmod@divisor^0,f,c
  5147  000E3C  3646               	rlcf	(i2___awmod@divisor+1)^0,f,c
  5148  000E3E  2A47               	incf	i2___awmod@counter^0,f,c
  5149  000E40                     i2l2157:
  5150  000E40  AE46               	btfss	(i2___awmod@divisor+1)^0,7,c
  5151  000E42  D7FA               	goto	i2l2155
  5152  000E44                     i2u196_40:
  5153  000E44  5045               	movf	i2___awmod@divisor^0,w,c
  5154  000E46  5C43               	subwf	i2___awmod@dividend^0,w,c
  5155  000E48  5046               	movf	(i2___awmod@divisor+1)^0,w,c
  5156  000E4A  5844               	subwfb	(i2___awmod@dividend+1)^0,w,c
  5157  000E4C  A0D8               	btfss	status,0,c
  5158  000E4E  D004               	goto	i2l2163
  5159  000E50  5045               	movf	i2___awmod@divisor^0,w,c
  5160  000E52  5E43               	subwf	i2___awmod@dividend^0,f,c
  5161  000E54  5046               	movf	(i2___awmod@divisor+1)^0,w,c
  5162  000E56  5A44               	subwfb	(i2___awmod@dividend+1)^0,f,c
  5163  000E58                     i2l2163:
  5164  000E58  90D8               	bcf	status,0,c
  5165  000E5A  3246               	rrcf	(i2___awmod@divisor+1)^0,f,c
  5166  000E5C  3245               	rrcf	i2___awmod@divisor^0,f,c
  5167  000E5E  2E47               	decfsz	i2___awmod@counter^0,f,c
  5168  000E60  D7F1               	goto	i2u196_40
  5169  000E62                     i2l2167:
  5170  000E62  5048               	movf	i2___awmod@sign^0,w,c
  5171  000E64  B4D8               	btfsc	status,2,c
  5172  000E66  D004               	goto	i2l2171
  5173  000E68  6C43               	negf	i2___awmod@dividend^0,c
  5174  000E6A  1E44               	comf	(i2___awmod@dividend+1)^0,f,c
  5175  000E6C  B0D8               	btfsc	status,0,c
  5176  000E6E  2A44               	incf	(i2___awmod@dividend+1)^0,f,c
  5177  000E70                     i2l2171:
  5178  000E70  C043  F043         	movff	i2___awmod@dividend,?i2___awmod
  5179  000E74  C044  F044         	movff	i2___awmod@dividend+1,?i2___awmod+1
  5180  000E78  0012               	return		;funcret
  5181  000E7A                     __end_ofi2___awmod:
  5182                           	callstack 0
  5183  0000                     
  5184                           	psect	rparam
  5185  0000                     
  5186                           	psect	temp
  5187  000055                     btemp:
  5188                           	callstack 0
  5189  000055                     	ds	1
  5190  0000                     int$flags	set	btemp
  5191  0000                     wtemp8	set	btemp+1
  5192  0000                     ttemp5	set	btemp+1
  5193  0000                     ttemp6	set	btemp+4
  5194  0000                     ttemp7	set	btemp+8
  5195                           
  5196                           	psect	idloc
  5197                           
  5198                           ;Config register IDLOC0 @ 0x200000
  5199                           ;	unspecified, using default values
  5200  200000                     	org	2097152
  5201  200000  FF                 	db	255
  5202                           
  5203                           ;Config register IDLOC1 @ 0x200001
  5204                           ;	unspecified, using default values
  5205  200001                     	org	2097153
  5206  200001  FF                 	db	255
  5207                           
  5208                           ;Config register IDLOC2 @ 0x200002
  5209                           ;	unspecified, using default values
  5210  200002                     	org	2097154
  5211  200002  FF                 	db	255
  5212                           
  5213                           ;Config register IDLOC3 @ 0x200003
  5214                           ;	unspecified, using default values
  5215  200003                     	org	2097155
  5216  200003  FF                 	db	255
  5217                           
  5218                           ;Config register IDLOC4 @ 0x200004
  5219                           ;	unspecified, using default values
  5220  200004                     	org	2097156
  5221  200004  FF                 	db	255
  5222                           
  5223                           ;Config register IDLOC5 @ 0x200005
  5224                           ;	unspecified, using default values
  5225  200005                     	org	2097157
  5226  200005  FF                 	db	255
  5227                           
  5228                           ;Config register IDLOC6 @ 0x200006
  5229                           ;	unspecified, using default values
  5230  200006                     	org	2097158
  5231  200006  FF                 	db	255
  5232                           
  5233                           ;Config register IDLOC7 @ 0x200007
  5234                           ;	unspecified, using default values
  5235  200007                     	org	2097159
  5236  200007  FF                 	db	255
  5237                           
  5238                           	psect	config
  5239                           
  5240                           ; Padding undefined space
  5241  300000                     	org	3145728
  5242  300000  FF                 	db	255
  5243                           
  5244                           ;Config register CONFIG1H @ 0x300001
  5245                           ;	Oscillator Selection bits
  5246                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
  5247                           ;	Fail-Safe Clock Monitor Enable bit
  5248                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  5249                           ;	Internal/External Oscillator Switchover bit
  5250                           ;	IESO = OFF, Two-Speed Start-up disabled
  5251  300001                     	org	3145729
  5252  300001  06                 	db	6
  5253                           
  5254                           ;Config register CONFIG2L @ 0x300002
  5255                           ;	Power-up Timer Enable bit
  5256                           ;	PWRT = OFF, PWRT disabled
  5257                           ;	Brown-out Reset Enable bits
  5258                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  5259                           ;	Brown-out Voltage bits
  5260                           ;	BORV = 0x3, unprogrammed default
  5261  300002                     	org	3145730
  5262  300002  19                 	db	25
  5263                           
  5264                           ;Config register CONFIG2H @ 0x300003
  5265                           ;	Watchdog Timer
  5266                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  5267                           ;	Watchdog Timer Postscale Select bits
  5268                           ;	WDTPS = 0xF, unprogrammed default
  5269  300003                     	org	3145731
  5270  300003  1E                 	db	30
  5271                           
  5272                           ;Config register CONFIG3L @ 0x300004
  5273                           ;	unspecified, using default values
  5274                           ;	Processor Data Memory Mode Select bits
  5275                           ;	MODE = 0x3, unprogrammed default
  5276                           ;	Address Bus Width Select bits
  5277                           ;	ADDRBW = 0x3, unprogrammed default
  5278                           ;	Data Bus Width Select bit
  5279                           ;	DATABW = 0x1, unprogrammed default
  5280                           ;	External Bus Data Wait Enable bit
  5281                           ;	WAIT = 0x1, unprogrammed default
  5282  300004                     	org	3145732
  5283  300004  F3                 	db	243
  5284                           
  5285                           ;Config register CONFIG3H @ 0x300005
  5286                           ;	CCP2 MUX bit
  5287                           ;	CCP2MX = 0x1, unprogrammed default
  5288                           ;	ECCP MUX bit
  5289                           ;	ECCPMX = 0x1, unprogrammed default
  5290                           ;	Low-Power Timer1 Oscillator Enable bit
  5291                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  5292                           ;	MCLR Pin Enable bit
  5293                           ;	MCLRE = ON, MCLR pin enabled; RG5 input pin disabled
  5294  300005                     	org	3145733
  5295  300005  83                 	db	131
  5296                           
  5297                           ;Config register CONFIG4L @ 0x300006
  5298                           ;	Stack Full/Underflow Reset Enable bit
  5299                           ;	STVREN = 0x1, unprogrammed default
  5300                           ;	Single-Supply ICSP Enable bit
  5301                           ;	LVP = OFF, Single-Supply ICSP disabled
  5302                           ;	Boot Block Size Select bits
  5303                           ;	BBSIZ = 0x0, unprogrammed default
  5304                           ;	Extended Instruction Set Enable bit
  5305                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  5306                           ;	Background Debugger Enable bit
  5307                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  5308  300006                     	org	3145734
  5309  300006  81                 	db	129
  5310                           
  5311                           ; Padding undefined space
  5312  300007                     	org	3145735
  5313  300007  FF                 	db	255
  5314                           
  5315                           ;Config register CONFIG5L @ 0x300008
  5316                           ;	unspecified, using default values
  5317                           ;	Code Protection bit Block 0
  5318                           ;	CP0 = 0x1, unprogrammed default
  5319                           ;	Code Protection bit Block 1
  5320                           ;	CP1 = 0x1, unprogrammed default
  5321                           ;	Code Protection bit Block 2
  5322                           ;	CP2 = 0x1, unprogrammed default
  5323                           ;	Code Protection bit Block 3
  5324                           ;	CP3 = 0x1, unprogrammed default
  5325                           ;	Code Protection bit Block 4
  5326                           ;	CP4 = 0x1, unprogrammed default
  5327                           ;	Code Protection bit Block 5
  5328                           ;	CP5 = 0x1, unprogrammed default
  5329                           ;	Code Protection bit Block 6
  5330                           ;	CP6 = 0x1, unprogrammed default
  5331                           ;	Code Protection bit Block 7
  5332                           ;	CP7 = 0x1, unprogrammed default
  5333  300008                     	org	3145736
  5334  300008  FF                 	db	255
  5335                           
  5336                           ;Config register CONFIG5H @ 0x300009
  5337                           ;	unspecified, using default values
  5338                           ;	Boot Block Code Protection bit
  5339                           ;	CPB = 0x1, unprogrammed default
  5340                           ;	Data EEPROM Code Protection bit
  5341                           ;	CPD = 0x1, unprogrammed default
  5342  300009                     	org	3145737
  5343  300009  C0                 	db	192
  5344                           
  5345                           ;Config register CONFIG6L @ 0x30000A
  5346                           ;	unspecified, using default values
  5347                           ;	Write Protection bit Block 0
  5348                           ;	WRT0 = 0x1, unprogrammed default
  5349                           ;	Write Protection bit Block 1
  5350                           ;	WRT1 = 0x1, unprogrammed default
  5351                           ;	Write Protection bit Block 2
  5352                           ;	WRT2 = 0x1, unprogrammed default
  5353                           ;	Write Protection bit Block 3
  5354                           ;	WRT3 = 0x1, unprogrammed default
  5355                           ;	Write Protection bit Block 4
  5356                           ;	WRT4 = 0x1, unprogrammed default
  5357                           ;	Write Protection bit Block 5
  5358                           ;	WRT5 = 0x1, unprogrammed default
  5359                           ;	Write Protection bit Block 6
  5360                           ;	WRT6 = 0x1, unprogrammed default
  5361                           ;	Write Protection bit Block 7
  5362                           ;	WRT7 = 0x1, unprogrammed default
  5363  30000A                     	org	3145738
  5364  30000A  FF                 	db	255
  5365                           
  5366                           ;Config register CONFIG6H @ 0x30000B
  5367                           ;	unspecified, using default values
  5368                           ;	Configuration Register Write Protection bit
  5369                           ;	WRTC = 0x1, unprogrammed default
  5370                           ;	Boot Block Write Protection bit
  5371                           ;	WRTB = 0x1, unprogrammed default
  5372                           ;	Data EEPROM Write Protection bit
  5373                           ;	WRTD = 0x1, unprogrammed default
  5374  30000B                     	org	3145739
  5375  30000B  E0                 	db	224
  5376                           
  5377                           ;Config register CONFIG7L @ 0x30000C
  5378                           ;	unspecified, using default values
  5379                           ;	Table Read Protection bit Block 0
  5380                           ;	EBTR0 = 0x1, unprogrammed default
  5381                           ;	Table Read Protection bit Block 1
  5382                           ;	EBTR1 = 0x1, unprogrammed default
  5383                           ;	Table Read Protection bit Block 2
  5384                           ;	EBTR2 = 0x1, unprogrammed default
  5385                           ;	Table Read Protection bit Block 3
  5386                           ;	EBTR3 = 0x1, unprogrammed default
  5387                           ;	Table Read Protection bit Block 4
  5388                           ;	EBTR4 = 0x1, unprogrammed default
  5389                           ;	Table Read Protection bit Block 5
  5390                           ;	EBTR5 = 0x1, unprogrammed default
  5391                           ;	Table Read Protection bit Block 6
  5392                           ;	EBTR6 = 0x1, unprogrammed default
  5393                           ;	Table Read Protection bit Block 7
  5394                           ;	EBTR7 = 0x1, unprogrammed default
  5395  30000C                     	org	3145740
  5396  30000C  FF                 	db	255
  5397                           
  5398                           ;Config register CONFIG7H @ 0x30000D
  5399                           ;	unspecified, using default values
  5400                           ;	Boot Block Table Read Protection bit
  5401                           ;	EBTRB = 0x1, unprogrammed default
  5402  30000D                     	org	3145741
  5403  30000D  40                 	db	64
  5404                           tosu	equ	0xFFF
  5405                           tosh	equ	0xFFE
  5406                           tosl	equ	0xFFD
  5407                           stkptr	equ	0xFFC
  5408                           pclatu	equ	0xFFB
  5409                           pclath	equ	0xFFA
  5410                           pcl	equ	0xFF9
  5411                           tblptru	equ	0xFF8
  5412                           tblptrh	equ	0xFF7
  5413                           tblptrl	equ	0xFF6
  5414                           tablat	equ	0xFF5
  5415                           prodh	equ	0xFF4
  5416                           prodl	equ	0xFF3
  5417                           indf0	equ	0xFEF
  5418                           postinc0	equ	0xFEE
  5419                           postdec0	equ	0xFED
  5420                           preinc0	equ	0xFEC
  5421                           plusw0	equ	0xFEB
  5422                           fsr0h	equ	0xFEA
  5423                           fsr0l	equ	0xFE9
  5424                           wreg	equ	0xFE8
  5425                           indf1	equ	0xFE7
  5426                           postinc1	equ	0xFE6
  5427                           postdec1	equ	0xFE5
  5428                           preinc1	equ	0xFE4
  5429                           plusw1	equ	0xFE3
  5430                           fsr1h	equ	0xFE2
  5431                           fsr1l	equ	0xFE1
  5432                           bsr	equ	0xFE0
  5433                           indf2	equ	0xFDF
  5434                           postinc2	equ	0xFDE
  5435                           postdec2	equ	0xFDD
  5436                           preinc2	equ	0xFDC
  5437                           plusw2	equ	0xFDB
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         82
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     18      84
    BANK0           160     10      26
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _UpdateSS->_UpdateRight
    _UpdateRight->___awmod
    _UpdateLeft->___awdiv
    _MakeThirdZero->___awmod
    _Submit->_Is_Collide
    _Is_Collide->_Find
    _Blink->_Find

Critical Paths under _HandleInterrupt in COMRAM

    i2_UpdateSS->i2_UpdateLeft
    i2_UpdateRight->i2___awmod
    i2_UpdateLeft->i2___awdiv
    i2_MakeThirdZero->i2___awmod

Critical Paths under _main in BANK0

    _UpdateSS->_UpdateLeft
    _Submit->_Find
    _Is_Collide->_Find
    _Blink->_Find

Critical Paths under _HandleInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HandleInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HandleInterrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HandleInterrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HandleInterrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HandleInterrupt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HandleInterrupt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HandleInterrupt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HandleInterrupt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HandleInterrupt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HandleInterrupt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HandleInterrupt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HandleInterrupt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HandleInterrupt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HandleInterrupt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _HandleInterrupt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12151
                 _Arrange_Interrupts
                              _Blink
                     _CreateNewShape
                  _Fall_Each_Two_Sec
                               _Init
                              _MovA0
                              _MovA1
                              _MovA2
                              _MovA3
                             _MoveA0
                             _MoveA1
                             _MoveA2
                             _MoveA3
                             _Rotate
                             _Submit
                           _UpdateSS
                      _WaitForOneSec
                   _setInterruptFlag
 ---------------------------------------------------------------------------------
 (1) _setInterruptFlag                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WaitForOneSec                                        6     6      0      90
                                             10 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _UpdateSS                                             0     0      0    5064
                      _MakeThirdZero
                         _UpdateLeft
                        _UpdateRight
 ---------------------------------------------------------------------------------
 (2) _UpdateRight                                          2     2      0    1646
                                             16 COMRAM     2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _UpdateLeft                                           2     2      0    2085
                                              0 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     625
                                             10 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _MakeThirdZero                                        0     0      0    1333
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _Submit                                               0     0      0    5109
                     _CreateNewShape
                               _Find
                         _Is_Collide
                       _SaveSevenSeg
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1333
                                             10 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SaveSevenSeg                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Is_Collide                                           2     0      2    1888
                                             15 COMRAM     2     0      2
                               _Find
 ---------------------------------------------------------------------------------
 (2) _CreateNewShape                                       0     0      0       0
                        _Clear_Shape
 ---------------------------------------------------------------------------------
 (3) _Clear_Shape                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Rotate                                               2     2      0       0
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MoveA3                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MoveA2                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MoveA1                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MoveA0                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MovA3                                                2     2      0       0
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MovA2                                                2     2      0       0
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MovA1                                                2     2      0       0
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _MovA0                                                2     2      0       0
                                             10 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Fall_Each_Two_Sec                                    0     0      0       0
                          _Fall_Down
 ---------------------------------------------------------------------------------
 (2) _Fall_Down                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Blink                                                0     0      0    1888
                               _Find
 ---------------------------------------------------------------------------------
 (3) _Find                                                15    13      2    1888
                                             10 COMRAM     5     3      2
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (1) _Arrange_Interrupts                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _HandleInterrupt                                      0     0      0    2174
                         i2_UpdateSS
 ---------------------------------------------------------------------------------
 (5) i2_UpdateSS                                           0     0      0    2174
                    i2_MakeThirdZero
                       i2_UpdateLeft
                      i2_UpdateRight
 ---------------------------------------------------------------------------------
 (6) i2_UpdateRight                                        2     2      0     725
                                              6 COMRAM     2     2      0
                          i2___awmod
 ---------------------------------------------------------------------------------
 (6) i2_UpdateLeft                                         2     2      0     945
                                              8 COMRAM     2     2      0
                          i2___awdiv
                          i2___awmod
 ---------------------------------------------------------------------------------
 (7) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) i2_MakeThirdZero                                      0     0      0     504
                          i2___awmod
 ---------------------------------------------------------------------------------
 (7) i2___awmod                                            6     2      4     504
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Arrange_Interrupts
   _Blink
     _Find
   _CreateNewShape
     _Clear_Shape
   _Fall_Each_Two_Sec
     _Fall_Down
   _Init
   _MovA0
   _MovA1
   _MovA2
   _MovA3
   _MoveA0
   _MoveA1
   _MoveA2
   _MoveA3
   _Rotate
   _Submit
     _CreateNewShape
       _Clear_Shape
     _Find
     _Is_Collide
       _Find
     _SaveSevenSeg
     ___awmod
   _UpdateSS
     _MakeThirdZero
       ___awmod
     _UpdateLeft
       ___awdiv
       ___awmod
     _UpdateRight
       ___awmod
   _WaitForOneSec
   _setInterruptFlag

 _HandleInterrupt (ROOT)
   i2_UpdateSS
     i2_MakeThirdZero
       i2___awmod
     i2_UpdateLeft
       i2___awdiv
       i2___awmod
     i2_UpdateRight
       i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A      1A       5       16.2%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     12      54       1       89.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      6E      32        0.0%
DATA                 0      0      6E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Fri Apr 19 18:00:01 2024

          ??i2_MakeThirdZero 0049                   i2_UpdateSS 12F0                 ___awdiv@sign 0052  
                         _on 0033              ??_MakeThirdZero 0053                          l300 07F0  
                        l323 086A                          l316 0818                          l340 06D0  
                        l325 0878                          l333 0678                          l342 06E0  
                        l350 05A2                          l319 0826                          l271 04AC  
                        l336 0688                          l353 05B2                          l370 04DC  
                        l357 05FA                          l374 0524                          l278 0CFE  
                        l359 060A                          l367 04CC                          l376 0534  
                        u830 10EC                          u840 1100                          u850 1114  
               ___awmod@sign 0052                 i2_UpdateLeft 0D24                          wreg 000FE8  
                       l1303 10A6                         l1307 10B2                         l2223 11FC  
                       l1513 10C8                         l1611 0EC2                         l2227 120E  
                       l1525 10D8                         l2503 053E                         l2511 0574  
                       l1631 1032                         l1615 0ECE                         l1607 0EB6  
                       l2183 0A9A                         l1519 10D0                         l1801 08B4  
                       l2433 0692                         l2505 0550                         l1299 109A  
                       l2443 06EA                         l2435 06A4                         l2451 0720  
                       l1643 105C                         l1635 1040                         l1619 0EDA  
                       l2187 0AE4                         l2531 119A                         l2445 06FC  
                       l1741 0420                         l2463 05BC                         l1591 0F44  
                       l1583 0F2C                         l1639 104E                         l1663 0FF4  
                       l1655 0FD8                         l1751 044E                         l2711 0B44  
                       l2527 118E                         l2473 0614                         l2465 05CE  
                       l2481 064A                         l1761 047E                         l2705 0B34  
                       l2475 0626                         l1587 0F38                         l1579 0F20  
                       l1667 1002                         l1659 0FE6                         l2811 0CD6  
                       l2493 04E6                         l2901 01B0                         l2717 0B5A  
                       l2733 0B8C                         l2671 00C2                         l1783 0830  
                       l2495 04F8                         l2719 0B62                         l2815 0CE2  
                       l2831 0774                         l2665 0084                         l2673 00D0  
                       l1793 0882                         l1785 0840                         l2753 0DBA  
                       l2737 0B9A                         l2729 0B82                         l2691 0176  
                       l1795 0892                         l2819 0CF0                         l2851 07B8  
                       l2843 079C                         l2835 0780                         l2685 0138  
                       l2693 0184                         l2773 0E00                         l2765 0DE8  
                       l2757 0DC8                         l2749 0DAE                         l2925 02B0  
                       l2783 0BCA                         l2759 0DD0                         l2863 07E2  
                       l2855 07C6                         l2847 07AA                         l2839 078E  
                       l2881 0940                         l2769 0DF2                         l2937 0F62  
                       l2859 07D4                         l2939 0F9A                         l2887 09A0  
                       u1330 0850                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         u1360 08A2                         _LATD 000F8C  
                       _LATE 000F8D                         _LATF 000F8E                         _LATG 000F8F  
                       u2500 05DE                         _LATH 000F90                         u3150 0FAE  
                       _LATJ 000F91                         u2440 06B4                         u2530 0636  
                       u2700 0056                         u2470 070C                         u2720 0092  
                       u2560 0508                         _PIE2 000FA0                         u2714 0078  
                       u2715 0072                         u2740 00DE                         u2750 00EC  
                       u2734 00B6                         u2590 0560                         u2830 0B66  
                       u2735 00B0                         u2760 010A                         u2680 002A  
                       u2920 0BC0                         u2690 0038                         u2780 0146  
                       u2774 012C                         u2775 0126                         u2794 016A  
                       u2890 0DD4                         u2795 0164                         _RCON 000FD0  
                       _Find 0012                         _Init 02B4                         _curB 0041  
                       _main 0F4E                         _grid 0011                         btemp 0055  
                       start 000E                i2_UpdateRight 09AA                 ___param_bank 000000  
      __end_of_WaitForOneSec 1116                        ?_Find 004D                        ?_Init 0043  
                      ?_main 0043              __end_of___awdiv 0BA4              __end_of___awmod 0E0A  
                      _T0CON 000FD5              ___awdiv@divisor 004F                        i2l300 0A4E  
                      i2l278 0D74                        i2l395 1162              ___awdiv@counter 0051  
                      _TMR0H 000FD7                        _TMR0L 000FD6                        _PORTA 000F80  
                      _PORTB 000F81                        _PORTC 000F82                        _PORTD 000F83  
                      _PORTE 000F84                        _PORTF 000F85                        _PORTG 000F86  
                      _PORTH 000F87                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
                      _TRISF 000F97                        _TRISG 000F98                        _TRISH 000F99  
                      _TRISJ 000F9A                        _Blink 08E0                        _MovA0 0816  
                      _MovA1 0676                        _MovA2 05A0                        _MovA3 04CA  
                 _Is_Collide 0BA4                        _blink 0035                        _count 003F  
                      _shape 0001                        _prevB 006E                        _upMov 0029  
                _Clear_Shape 11AC                        ttemp5 0056                        ttemp6 0059  
                      ttemp7 005D                        status 000FD8                        wtemp8 0056  
             ?i2_UpdateRight 0043           __size_ofi2___awdiv 0084           __size_ofi2___awmod 0070  
               __end_of_Find 018E              __initialization 12A8                 __end_of_Init 03DA  
               __end_of_main 0FB2                  ?i2_UpdateSS 0043           __size_of_Fall_Down 005A  
          ??_HandleInterrupt 004D                       ??_Find 004F                       ??_Init 004D  
                     ??_main 0055                __activetblptr 000003                       ?_Blink 0043  
                     ?_MovA0 0043                       ?_MovA1 0043                       ?_MovA2 0043  
                     ?_MovA3 0043             __end_of_UpdateSS 12F0                       _ADCON1 000FC1  
           ___awdiv@dividend 004D      __size_of_CreateNewShape 00AC                       i2l2103 0C3C  
                     i2l2115 0C62                       i2l2131 0C94                       i2l2117 0C6A  
                     i2l2109 0C4C                       i2l2151 0E2A                       i2l2135 0CA2  
                     i2l2127 0C8A                       i2l2313 0D66                       i2l2305 0D4C  
                     i2l2171 0E70                       i2l2163 0E58                       i2l2155 0E38  
                     i2l2147 0E1E                       i2l2157 0E40                       i2l2309 0D58  
                     i2l2341 0A08                       i2l2333 09EC                       i2l2325 09D2  
                     i2l2167 0E62                       i2l2353 0A32                       i2l2345 0A16  
                     i2l2337 09FA                       i2l2329 09DE                       i2l2357 0A40  
                     i2l2349 0A24                       i2l2557 115A                       i2l2549 1136  
                     _INTCON 000FF2            _Fall_Each_Two_Sec 12CA                       _MoveA0 0EE4  
                     _MoveA1 100C                       _MoveA2 0E7A                       _MoveA3 0FB2  
         ?_Fall_Each_Two_Sec 0043                       _Rotate 03DA                       _Submit 018E  
 __end_of_Arrange_Interrupts 1254                    ??___awdiv 0051                    ??___awmod 0051  
        ??_Fall_Each_Two_Sec 004D                       clear_0 12AE                       clear_1 12BA  
           ___awdiv@quotient 0053                       _prevA0 006C                       _prevA1 006A  
                     _prevA2 0068                       _prevA3 0066              ___awmod@divisor 004F  
            ___awmod@counter 0051                       _rotate 003B                       _submit 003D  
             i2___awdiv@sign 0048            ?_setInterruptFlag 0043                   _UpdateLeft 0CAC  
          __end_ofi2___awdiv 0CAC            __end_ofi2___awmod 0E7A                  ?_Is_Collide 0052  
         ??_setInterruptFlag 004D               i2___awmod@sign 0048                ?_SaveSevenSeg 0043  
        __size_ofi2_UpdateSS 000E            __end_of_Fall_Down 10C0              i2_MakeThirdZero 127E  
  __end_of_Fall_Each_Two_Sec 12E2              ??i2_UpdateRight 0049                   __accesstop 0060  
    __end_of__initialization 12C0                ??_UpdateRight 0053                ___rparam_used 000001  
              __end_of_Blink 09AA                __end_of_MovA0 08E0                __end_of_MovA1 074C  
              __end_of_MovA2 0676                __end_of_MovA3 05A0               __pcstackCOMRAM 0043  
                    ??_Blink 0052                      ??_MovA0 004D                      ??_MovA1 004D  
                    ??_MovA2 004D                      ??_MovA3 004D               ??_SaveSevenSeg 004D  
                 __pbssBANK0 0060                      ?_MoveA0 0043                      ?_MoveA1 0043  
                    ?_MoveA2 0043                      ?_MoveA3 0043                      ?_Rotate 0043  
                    ?_Submit 0043          __size_of_Is_Collide 0084          __end_of_UpdateRight 0816  
                  ?_UpdateSS 0043        __end_of_MakeThirdZero 127E                  ?_UpdateLeft 0043  
                    _INTCON2 000FF1      __end_ofi2_MakeThirdZero 12A8                      Find@col 004D  
                    Find@res 0070               _CreateNewShape 0A74   __size_of_Fall_Each_Two_Sec 0018  
               ?_Clear_Shape 0043              _HandleInterrupt 0008                      __Hparam 0000  
                    __Lparam 0000              __size_of_MoveA0 006A              __size_of_MoveA1 005A  
            __size_of_MoveA2 006A              __size_of_MoveA3 005A              __size_of_Rotate 00F0  
            __size_of_Submit 0126                 ??i2_UpdateSS 004D                   ??_UpdateSS 0055  
                    ___awdiv 0B20                      ___awmod 0D9A                      __pcinit 12A8  
                    __ramtop 1000                      _digitNo 0025                      __ptext0 0F4E  
                    __ptext1 1166                      __ptext2 10C0                      __ptext3 12E2  
                    __ptext4 074C                      __ptext5 0CAC                      __ptext6 0B20  
                    __ptext7 1254                      __ptext8 018E                      __ptext9 0D9A  
                  _T0CONbits 000FD5                      _countA0 0023                      _countA1 001F  
                    _countA2 001D                      _countA3 001B                      _leftMov 002D  
                    _downMov 0027             ___awmod@dividend 004D                Find@first_290 0076  
     __end_of_CreateNewShape 0B20                      _stateA0 0021                      _stateA1 0064  
                    _stateA2 0062                      _stateA3 0060               __pintcode_body 1116  
       end_of_initialization 12C0       __size_of_WaitForOneSec 0056           __end_ofi2_UpdateSS 12FE  
                    int_func 1116                  _UpdateRight 074C                    Find@first 0072  
        __size_of_UpdateLeft 0078                      postinc0 000FEE         __end_of_SaveSevenSeg 1222  
        i2UpdateRight@rdigit 0049           _Arrange_Interrupts 1222                 ??_Is_Collide 0054  
           ?i2_MakeThirdZero 0043              ?_CreateNewShape 0043                    i2___awdiv 0C28  
                  i2___awmod 0E0A      __end_of_HandleInterrupt 1166          ?_Arrange_Interrupts 0043  
  __size_of_setInterruptFlag 0046           i2___awdiv@dividend 0043                    _Fall_Down 1066  
             __end_of_MoveA0 0F4E               __end_of_MoveA1 1066               __end_of_MoveA2 0EE4  
             __end_of_MoveA3 100C           __end_of_Is_Collide 0C28               __end_of_Rotate 04CA  
             __end_of_Submit 02B4         ??_Arrange_Interrupts 004D                _WaitForOneSec 10C0  
              ?i2_UpdateLeft 0043          start_initialization 12A8           i2___awdiv@quotient 0049  
                 ?i2___awdiv 0043                   ?i2___awmod 0043                _debounceTimer 0039  
      __end_ofi2_UpdateRight 0A74                   ?_Fall_Down 0043         __size_of_Clear_Shape 0042  
                   ??_MoveA0 004D                     ??_MoveA1 004D                     ??_MoveA2 004D  
                   ??_MoveA3 004D                     ??_Rotate 004D                     ??_Submit 0054  
             ?_WaitForOneSec 0043            __size_of_UpdateSS 000E               ??i2_UpdateLeft 004B  
               ??_UpdateLeft 0055                  __pbssCOMRAM 0001                __pcstackBANK0 0070  
           ?_HandleInterrupt 0043        __size_of_SaveSevenSeg 0034           __end_of_UpdateLeft 0D24  
                  __pintcode 0008                     ?___awdiv 004D                     ?___awmod 004D  
             __size_of_Blink 00CA               __size_of_MovA0 00CA               __size_of_MovA1 00D6  
             __size_of_MovA2 00D6               __size_of_MovA3 00D6                  ??i2___awdiv 0047  
                ??i2___awmod 0047                 _SaveSevenSeg 11EE             _setInterruptFlag 1166  
               ?_UpdateRight 0043                  ??_Fall_Down 004D               WaitForOneSec@i 004D  
             WaitForOneSec@j 004F               WaitForOneSec@k 0051       __size_of_MakeThirdZero 002A  
                   i2u190_40 0C6E                     i2u196_40 0E44              ??_WaitForOneSec 004D  
           ??_CreateNewShape 004D            i2___awdiv@divisor 0045            i2___awdiv@counter 0047  
      i2UpdateLeft@leftdigit 004B                  _INTCON2bits 000FF1                     _CurShape 0031  
         i2___awmod@dividend 0043            UpdateRight@rdigit 0053         __end_ofi2_UpdateLeft 0D9A  
                   __Hrparam 0000                     __Lrparam 0000                     _UpdateSS 12E2  
           __size_of___awdiv 0084             __size_of___awmod 0070                _MakeThirdZero 1254  
                   __ptext10 11EE                     __ptext11 0BA4                     __ptext20 05A0  
                   __ptext12 0A74                     __ptext21 0676                     __ptext13 11AC  
                   __ptext30 12F0                     __ptext22 0816                     __ptext14 03DA  
                   __ptext31 09AA                     __ptext23 02B4                     __ptext15 0FB2  
                   __ptext32 0D24                     __ptext24 12CA                     __ptext16 0E7A  
                   __ptext33 0C28                     __ptext25 1066                     __ptext17 100C  
                   __ptext34 127E                     __ptext26 08E0                     __ptext18 0EE4  
                   __ptext35 0E0A                     __ptext27 0012                     __ptext19 04CA  
                   __ptext28 1222                __size_of_Find 017C                __size_of_Init 0126  
   __size_ofi2_MakeThirdZero 002A                __size_of_main 0064                     _rightMov 002B  
                   int$flags 0055  __size_of_Arrange_Interrupts 0032               _SubmittedBlock 002F  
          i2___awmod@divisor 0045               ?_MakeThirdZero 0043            i2___awmod@counter 0047  
            _bInterruptFired 0037                   _INTCONbits 000FF2                _RotationOrder 0019  
                   intlevel2 0000                ??_Clear_Shape 004D               Find@second_291 0078  
       __size_of_UpdateRight 00CA                   Find@second 0074     __end_of_setInterruptFlag 11AC  
     __size_ofi2_UpdateRight 00CA          UpdateLeft@leftdigit 0070        __size_ofi2_UpdateLeft 0076  
   __size_of_HandleInterrupt 115E          __end_of_Clear_Shape 11EE  
